<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="42">
            <Title>The structure of this book </Title>
            <Text>This book is intended to be read as an introduction to the language, to using it and to show how sophisticated programs can be built using its facilities. We assume some familiarity with programming, especially logic programming, although the pace is relatively gentle.

Part I gets us started, with the style of L&amp;O programs. Part II explores some programming examples and techniques. In Part III we look at the features of L&amp;O in more detail. This book is not a reference manual for L&amp;amp;O; however, we do aim to cover the language in sufficient detail to impart the essence of L&amp;O.

Our style in presenting L&amp;O is rather informal; this is deliberate – our focus is to explain the shape of L&amp;O and to show its utility. For a more detailed and formal explanation of the features of L&amp;O the reader is referred to the L&amp;O reference manual.

Conventions

We use a `typewriter` font whenever we are quoting either a specific element of L&amp;O, or something that may be typed in at the keyboard. We use *emphasis* both for emphasis and to introduce a term for the first time. Many terms are defined in the Glossary, see page \pageref{glossary}.

&gt; Every so often – sometimes more than once on a given page – you will see a paragraph highlighted this way. Such notes are often comments about how to use a given bit of information, or may be a warning about some issue that is relevant to the text at hand.

Getting and installing L&amp;O

[Appendix Install][Install] discusses the process involved in installing the L&amp;O system. Please note that this process is quite likely to evolve; however, the location:

	git@github.com:fmccabe/l-and-o.git

will remain as a good source to get the L&amp;O system.

Acknowledgments

Creating a programming language and writing about it are not solo activities. In my case I had the substantial help of a number of colleagues; most notably Keith Clark who is really a part of the design team for L&amp;O. He has tracked L&amp;O’s progress through many different versions.

Users are critical in any software enterprise, and Johnny Knottenbelt was one of the first. I hope that the inevitable stream of bugs that he found did not cause him too much grief.

In addition Jonathan Dale and Kevin Twidle who have endured many *explanations* of this or that new feature while trying to do their proper work. I thank my family, Midori and Stephen who have had less of a husband/father than they have the right to expect.

Finally, I thank you, dear reader, for taking the trouble to parse my English and following me on the road to L&amp;O.

Contact

If you have any questions, about the L&amp;O language or this book, please contact me at `fmccabe@gmail.com`.
</Text>
        </Document>
        <Document ID="36">
            <Title>Sample MS</Title>
            <Text>Simon Umwan Your manuscript should have your address and contact details on the first page only.
If you have an agent, your agent's address can be included beneath.
Non-Fiction With Sub-Heads Format by S. Umwan
2,200 words
Contents
Foreword	3 Chapter One - Philately	6 Chapter Two - Phil Attley	11 Endnotes	18
Non-Fiction/Umwan	2
Foreword
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim. Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam
Non-Fiction/Umwan	3
pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis. Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan.
Non-Fiction/Umwan	4
Suspendisse potenti. Vivamus vitae risus neque, id tempus mi. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis. Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
Non-Fiction/Umwan	5
Chapter One: Philately
The Joy of Collecting Stamps
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim. Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum
Non-Fiction/Umwan	6
tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Meeting People
Meeting people is overrated. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim. Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet.1 Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
The Smell
Stamps smelly nice. And they are tasty. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna
Non-Fiction/Umwan	7
tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim. Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Difficult-to-Find Stamps
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est.2 Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat
Non-Fiction/Umwan	8
eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
The Treskilling Yellow
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi.3 Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu
Non-Fiction/Umwan	9
id lacus gravida luctus ullamcorper pellentesque justo.
Inverted Jenny
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi.4 Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Non-Fiction/Umwan	10
Chapter Two: Phil Attley
The Life of Phil Attley
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim. Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum
Non-Fiction/Umwan	11
tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Birth
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar
Non-Fiction/Umwan	12
pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.5
Early Years
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis. Praesent lacinia condimentum erat, a tempor elit viverra eget.
Non-Fiction/Umwan	13
Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis. Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
School
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim. Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero. Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo sagittis ullamcorper. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.6 Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Non-Fiction/Umwan	14
Family
Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum. Sed porta tortor non mauris iaculis vel molestie nisl interdum. Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis. Duis vitae nulla felis. In adipiscing libero massa.7 Sed neque mauris, gravida non bibendum congue, congue at massa. Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
Licked to Death!
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo
Non-Fiction/Umwan	15
sagittis dignissim. Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu
Non-Fiction/Umwan	16
Non-Fiction/Umwan	17
id lacus gravida luctus ullamcorper pellentesque justo.
Endnotes
1. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. 2. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. 3. Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec. 4. Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero.
Non-Fiction/Umwan	18
5. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. 6. Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum. Sed porta tortor non mauris iaculis vel molestie nisl interdum.
7. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis.
Non-Fiction/Umwan	19
</Text>
        </Document>
        <Document ID="11">
            <Title>Title Page</Title>
            <Synopsis>Title page to the manuscript.</Synopsis>
            <Text>Francis McCabe
20500 Town Center Lane #293
Cupertino
CA
95014
650740-6673
frankmccabe@me.com

(Your agent’s name)
(Your agent’s address)
&lt;$wc100&gt; words










&lt;$projecttitle&gt;

by &lt;$fullName&gt;</Text>
            <Notes>This is the title page of the manuscript. Note that “Compile As-Is” is ticked - this ensures that the title page’s formatting doesn’t get changed during the Compile process, even though the formatting of other text documents will be overridden to use a standard 12-point manuscript font.

The &lt;$projecttitle&gt; and &lt;$fullname&gt; tags get replaced with the information set in Project &gt; Meta-Data Settings… &gt; Project Properties. You can edit those settings or just replace this text altogether. (Other information is taken from Address Book when the project is created.)</Notes>
        </Document>
        <Document ID="37">
            <Title>Preface</Title>
            <Text>Developing applications in a logic programming language is subject to the same issues as that face developers in other programming languages: programming is still a team sport; and safety is nearly always critical. L&amp;O is a logic programming language that is oriented to development of complex applications that must be similarly safe and effective.</Text>
        </Document>
        <Document ID="4">
            <Title>Chapter Subtitle</Title>
        </Document>
        <Document ID="27">
            <Title>Ideas</Title>
        </Document>
        <Document ID="12">
            <Title>Non-Fiction Format</Title>
            <Text>NON-FICTION WITH SUB-HEADS

About This Template
When compiled (File &gt; Compile), this project will generate a document in standard manuscript format with sub-headings inside the chapters.

How To Use This Template
	•	Edit the Title Page document to ensure it contains the correct information.
	•	Create a new folder for each chapter and title each folder with the name of the chapter. If you don’t intend to use chapter names, just use something descriptive that tells you what the chapter is about. (You do not need to title the folders “Chapter One” and so on, as chapter numbering will be taken care of automatically during the Compile process.) The first chapter folder has been created for you with the placeholder title “Chapter Subtitle”.
	•	Create a new text document for each sub-section within the chapter folders, giving each the title of the subheading you wish to appear in the text. You can nest text documents for smaller subheadings, like this:
	#
	•	If you don’t require a foreword, move the “Foreword” document to the Trash folder. Alternatively, rename it “Preface” or “Introduction” if you prefer. If you would rather the foreword come after the table of contents - as is sometimes the case - drag the “Foreword” document and drop it below the “Contents” document.
	•	Before compiling, to create your table of contents, simply select all documents you wish to be included in the contents listing (usually this will be the “Foreword”, all chapter folders, and “Endnotes”, but not the nested sub-sections), then go to Edit &gt; Copy Special &gt; Copy Documents as ToC. Then paste into the “Contents” document (use Edit &gt; Paste and Match Style to paste without the dotted underline between the chapter names and page numbers). The resulting linked text and page number tags will be replaced with the final chapter names and page numbers in the compiled document. You don’t need to do this every time you compile, just when chapters have been added, deleted, renamed or moved around. (Note to Microsoft Word users: If you export to Word, you may need to generate a print preview in Word to force the page numbers to show up correctly - they may appear as question marks before doing so.)
	•	If you have no footnotes or endnotes in your text, be sure to delete the “Endnotes” document.
	•	“Notes” and “Ideas” folders have been provided for your convenience, although you can replace them or create different top-level folders for your research materials if necessary (these are just regular folders that have had custom icons assigned to them using the Documents &gt; Change Icon feature.)
	•	Compile your manuscript into standard manuscript format by selecting File &gt; Compile.

Tables and Figures
If you need to use tables or figures in your manuscript, you can refer to them using the following tags, replacing “KEYWORD” with a unique word that identifies your table or figure.

!fig(KEYWORD)
!table(KEYWORD)

For instance, consider the following text, which makes use of such tags.

Table !table(sales): Sales 2011
Table !table(dates): Shipment dates
Figure !fig(skeleton): The skeleton of the gnu.
Figure !fig(malcolmreynolds): The second coolest character in Firefly.

… (For sales figures, see table !table(sales))… For shipment dates, see table !table(dates)… where he discovered the skeleton of a gnarled gnu (see figure !fig(skeleton))… Chronicles providing a similar role, albeit without the Castle actor (see figure !fig(malcolmreynolds)).

In the compiled document, the above text would look like this:

Table 1: Sales 2011
Table 2: Shipment dates
Figure 1: The skeleton of the gnu.
Figure 2: The second coolest character in Firefly.

… (For sales figures, see table 1)… For shipment dates, see table 2… where he discovered the skeleton of a gnarled gnu (see figure 1)… Chronicles providing a similar role, albeit without the Castle actor (see figure 2).

Making Changes
There are various minor changes you can make to the settings to tweak this template so that it better suits your needs, as follows:
	•	Chapter subtitles: If you don’t want to include the names of your chapter folders below the chapter numbering text in the compiled document, go to the “Formatting” pane in the Compile sheet and deselect “Title” in the list of elements to include. You will also need to edit the title prefix in the “Level Settings”.
	•	Hierarchical numbering: If you require hierarchical numbering for sub-sections, choose “Non-Fiction with Sub-Heads (Hierarchical)” from the “Format As” menu in Compile. (If this format isn’t in the list, choose “Manage…” at the bottom of the “Format As” menu and tick “Non-Fiction with Sub-Heads (Hierarchical)” in the panel that appears, then click “OK”. It will then be available in the “Format As” menu.) Alternatively, edit the “Level Settings” for each level in the “Formatting” pane of Compile and add the “&lt;$hn&gt;” (for “hierarchical numbering”) tag to the title prefixes. 
	•	Page header: You can edit the page header in the “Page Settings” pane of the Compile sheet.
	•	Font: To quickly change the font used throughout the compiled document, use “Quick Font Override” in Compile. To change the font size of the various sub-headings, use the “Formatting” pane.

Sample Document
See the “Sample MS” PDF file in the Research folder for an example of a document that has been created using this template. This is what the “Draft” folder structure looked like in the binder for this sample document:

￼

Final Note
Scrivener project templates are flexible and are not intended to restrict you to a particular workflow. You can change, delete or move the files and folders contained in the template, and you can create your own templates by setting up a skeletal project with the files, folders and settings you would like to use for new projects and using File &gt; Save As Template.</Text>
        </Document>
        <Document ID="38">
            <Title>Software Engineering</Title>
            <Text>Developing any kind of software is a complex task, made more difficult by the possibilities and risks offered by the Internet. Such complexity is not removed simply by adopting logic as the foundation of one’s languages. Integration, reliability, security, modularization, evolvability, versioning, safety are all qualities that are important for software systems that are independent of the underlying technology. For knowledge intensive applications the list continues – we also require flexibility, explainability, awareness of context. The design of L&amp;O is guided by a strong desire to gain the benefits of modern software engineering best practice as well as that of knowledge engineering.

L&amp;O is a multi-paradigm language – it has a strong foundation in object oriented programming, functional programming and logic programming. In addition, it is a multi-threaded language with communication capabilities. This is a powerful combination aiming to solve the hard issues of complex software development.</Text>
        </Document>
        <Document ID="6">
            <Title>Section</Title>
        </Document>
        <Document ID="40">
            <Title>Object Orientation</Title>
            <Text>L&amp;O’s object orderedness is fundamental to L&amp;O’s approach to software engineering. To support the evolution of programs it is important to be able to modify a large program in a way that has manageable and predictable consequences. This is aided by having a clean separation between interfaces and implementations of components of the program. Being able to change the implementation of a component without changing all the references to the program is a basic benefit of object ordered programming.

Similarly, any change to a component (whether code or data) should not require changes to unaffected parts of the overall system. For example, merely adding a new function to a module should not require modifying programs that only use existing features of the module. Both of these are important benefits of object ordered programming

&gt; We use the term *object ordered programming* to avoid some of the specifics of common object oriented languages – the key feature of object ordered programming is the encapsulation of code and data that permits the *hiding* of the implementation of a concept from the parts of the application that wish to merely *use* the concept. Features such as inheritance are important but secondary compared to the core concepts of encapsulation and hiding.

As an example of the importance of interfaces, consider representing binary trees using **Prolog** terms – which is **Prolog**’s basic means for structuring dynamic data. For example, we might use a `tree` term:

	tree(empty,"A",tree(empty,"B",tree(empty,"C",empty)))

to denote a basic binary tree structure containing the strings `"A"`, `"B"` and `"C"`.

As a data structuring technique, the **Prolog** term is versatile and simple; however, it combines *implementation* of data structures with *access* in an unfortunate way. For example, to search a `tree` for an element we must use specific `tree` term patterns to unify against the actual tree:

	find(A,tree(_,A,_)).
	find(A,tree(L,B,_)) :- A&lt;B, find(A,L).
	find(A,tree(_,B,R)) :- A&gt;B, find(A,R).

This simple program can be used to search an ordered binary tree, looking for elements that unify with the search term. The `find` program is concise, relatively clear and efficient. Perhaps this program was exactly what was needed.

However, should it become necessary to adjust our tree representation – perhaps to include a weight element – then, in **Prolog**, *all* references to the `tree` term will need to change, including existing uses which have no interest in the new weight feature. Our `find` program will certainly have to be modified – to add the extra argument to the `tree` term and perhaps ignore it. On average there will an order of magnitude more references that *use* the concept of `tree` than references which *define* the essence of `tree`.

In L&amp;O we can write the `find` program in a way that does not depend on the shape of the `tree` term:

	find(A,T) :- T.hasLabel(A).
	find(A,T) :- A&lt;T.label(), find(A,T.left()).
	find(A,T) :- A&gt;T.label(), find(A,T.right()).

L&amp;O’s labeled theory notation makes it straightforward to encapsulate the `tree` concept in an object, and to use an interface contract to access the tree. As a result, we should be able to add weights to our tree without upsetting existing uses of the tree – in particular, the `find` program does not need to be modified.\note{It may need to be re-compiled however.}

For an OO language, such a capability is not novel, but traditionally, logic programming languages have not really focused on such engineering issues.

L&amp;O has some features that distinguish it from some OO languages such as Java\tm. L&amp;O’s object notation is based on Logic and Objects (@fgm:92) with some significant simplifications and modifications to incorporate types and *interface*s.</Text>
        </Document>
        <Document ID="28">
            <Title>Notes</Title>
        </Document>
        <Document ID="39">
            <Title>Static Types</Title>
            <Text>L&amp;O is a strongly statically typed programming language. The purpose of using a static type system is to enhance programmers’ confidence in the correctness of the program – it cannot replace a formal proof of correctness.

The type system of L&amp;O is quite rich and expressive; this is intentional -- in order to reduce the _temptation_ to step outside the strict confines of type safety. Some of the features of L&amp;O types include:

	•	Higher-order type terms that can denote function and other program values
	•	Universally and existentially quantified types
	•	Contracts and implementations
	•	Structural and nominative type terms

For example, the L&amp;O version of `find` above really needs a *type annotation* before it is complete:

	find: all u,t ~~ searchable[u] |: (u,t){}.

where we both give an explicit (quantified) type and require that the entity being search is `searchable`.

We use an approach based on Hindley &amp; Milner’s @hindley:69 type term approach for representing types. However, type unification is augmented with a sub-type relation – permitting types and classes to be defined as extensions of other types. In addition we require all programs and top-level variables and constants to have explicit type declarations. Variables in rules do not need type declarations – although they are permitted.

Having a static typed language can be quite constrictive compared to the untyped freedom one gets in languages such as **Prolog**. However, for applications requiring a strong sense of reliability, having a strongly typed language provides a better base than an untyped language.

In addition to being statically typed, the reader might have noticed that the `find` program we introduced above had a *type annotation*. We believe that explicitly annotating program types is an effective compromise between declaring the type of *every* variable and declaring none of them.
</Text>
        </Document>
        <Document ID="30">
            <Title>Foreword</Title>
        </Document>
        <Document ID="0">
            <Title>Programming in L&amp;O</Title>
        </Document>
        <Document ID="29">
            <Title>Endnotes</Title>
            <Text> All footnotes will get inserted here upon print, and this bubble will be removed automatically.</Text>
        </Document>
        <Document ID="35">
            <Title>Sub-Section</Title>
        </Document>
        <Document ID="41">
            <Title>Ontologies</Title>
            <Text>Since L&amp;O is a Logic Programming language, it makes sense to ask how suitable it is for developing Ontologies.

## Meta-order and object-order

Unlike **Prolog**, L&amp;O does not permit data to be directly interpreted as code. The standard **Prolog** approach of using the same language for meta-level names of programs and programs themselves – which in turn allows program text to be manipulated like other data – has a number of technical problems; especially when considering distributed and secure applications. However, as we shall see, L&amp;O’s object oriented features allow us to emulate the important uses of Prolog’s meta-level features. Moreover, in L&amp;O we can do this in a type safe way.

## Threads and distribution

L&amp;O is a multi-tasking programming language. It is possible to spawn off computations as separate threads or tasks.

In a multi-threaded environment there are two overlapping concerns – sharing of resources and coordination of activities. In the cases of shared resources the primary requirement is that the different users of a resource see consistent views of the resource. In the case of coordination the primary requirement is a means of controlling the flow of execution in the different threads of activity.

L&amp;O threads may share access to objects, and to their state in the case of stateful objects – within a single invocation of the system. L&amp;O supports synchronized access to such shared objects to permit contention issues to be addressed.

Synchronizing access to shared resources is important, however it is not sufficient to achieve coordination between concurrent activities. In L&amp;O, coordination is achieved through *message communication*. Our message communication functionality is not built-in to the language but is made available via the use of standard *packages*, in particular the `go.mbox` package. The communications model in `go.mbox` is very simple: there are mailboxes and dropboxes: threads read their mail by querying their mailbox objects and can send messages to other threads using dropboxes linked to mailboxes. The model permits multiple implementations of the concept, indeed a single mailbox might receive mail delivered from a variety of kinds of dropboxes.

Overall, the intention behind the design of L&amp;O is to make programs more transparent: what you see in a L&amp;O program is what you mean – there can be no hidden semantics. This property is what makes L&amp;O a reasonable language to use for high integrity applications – such as agents that will be performing tasks that may involve real resources, or in safety critical areas.


##### Multiple paradigms

L&amp;O is a multi-paradigm language – there are specialized notations for functions, action rules and grammar rules, as well as predicates. The reason for this is two fold: it allows us to have tailored syntax and semantics for the different kinds of programs being written. Secondly, by offering these different notations we can encapsulate a more suitable semantics without the use of ugly operators such as **Prolog**’s cut operator.

In many cases a logic programmer knows full well whether their program is intended to be fully relational or is actually a function. By giving different notations for these cases it allows programmers to signal their intentions more clearly than if all kinds of program have to be expressed in the single formalism of a logic clause.</Text>
        </Document>
        <Document ID="31">
            <Title>Contents</Title>
        </Document>
    </Documents>
</SearchIndexes>
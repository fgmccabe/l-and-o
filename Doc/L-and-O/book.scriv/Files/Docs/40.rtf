{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 L&O\'92s 
\i object orderedness
\i0  is fundamental to L&O\'92s approach to software engineering. To support the evolution of programs it is important to be able to modify a large program in a way that has manageable and predictable consequences. This is aided by having a clean separation between interfaces and implementations of components of the program. Being able to change the implementation of a component without changing all the references to the program is a basic benefit of object ordered programming.\
\
Similarly, any change to a component (whether code or data) should not require changes to unaffected parts of the overall system. For example, merely adding a new function to a module should not require modifying programs that only use existing features of the module. Both of these are important benefits of object ordered programming\
\
> We use the term *object ordered programming* to avoid some of the specifics of common object oriented languages \'96 the key feature of object ordered programming is the encapsulation of code and data that permits the *hiding* of the implementation of a concept from the parts of the application that wish to merely *use* the concept. Features such as inheritance are important but secondary compared to the core concepts of encapsulation and hiding.\
\
As an example of the importance of interfaces, consider representing binary trees using **Prolog** terms \'96 which is **Prolog**\'92s basic means for structuring dynamic data. For example, we might use a `tree` term:\
\
	tree(empty,"A",tree(empty,"B",tree(empty,"C",empty)))\
\
to denote a basic binary tree structure containing the strings `"A"`, `"B"` and `"C"`.\
\
As a data structuring technique, the **Prolog** term is versatile and simple; however, it combines *implementation* of data structures with *access* in an unfortunate way. For example, to search a `tree` for an element we must use specific `tree` term patterns to unify against the actual tree:\
\
	find(A,tree(_,A,_)).\
	find(A,tree(L,B,_)) :- A<B, find(A,L).\
	find(A,tree(_,B,R)) :- A>B, find(A,R).\
\
This simple program can be used to search an ordered binary tree, looking for elements that unify with the search term. The `find` program is concise, relatively clear and efficient. Perhaps this program was exactly what was needed.\
\
However, should it become necessary to adjust our tree representation \'96 perhaps to include a weight element \'96 then, in **Prolog**, *all* references to the `tree` term will need to change, including existing uses which have no interest in the new weight feature. Our `find` program will certainly have to be modified \'96 to add the extra argument to the `tree` term and perhaps ignore it. On average there will an order of magnitude more references that *use* the concept of `tree` than references which *define* the essence of `tree`.\
\
In L&O we can write the `find` program in a way that does not depend on the shape of the `tree` term:\
\
	find(A,T) :- T.hasLabel(A).\
	find(A,T) :- A<T.label(), find(A,T.left()).\
	find(A,T) :- A>T.label(), find(A,T.right()).\
\
L&O\'92s labeled theory notation makes it straightforward to encapsulate the `tree` concept in an object, and to use an interface contract to access the tree. As a result, we should be able to add weights to our tree without upsetting existing uses of the tree \'96 in particular, the `find` program does not need to be modified.\\note\{It may need to be re-compiled however.\}\
\
For an OO language, such a capability is not novel, but traditionally, logic programming languages have not really focused on such engineering issues.\
\
L&O has some features that distinguish it from some OO languages such as Java\\tm. L&O\'92s object notation is based on Logic and Objects (@fgm:92) with some significant simplifications and modifications to incorporate types and *interface*s.}
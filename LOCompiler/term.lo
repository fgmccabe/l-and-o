lo.comp.term {
  import lo.

  import lo.comp.misc.
  import lo.comp.package.
  import lo.comp.types.

  public term ::= anon
               | varbl(string)
               | intgr(integer)
               | flot(float)
               | enum(string)
               | strct(string,integer)
               | prg(string,integer)
               | strng(string)
               | cons(term,list[term])
               | invoke(option[tloc],term,list[term]).

  public tloc ::= tloc(integer,integer,integer,integer).

  public rel <~ { name:term }.

  public rel:(term,option[tloc],list[clse]) <=> rel.
  rel(Nm,_,_) <= {
    name = Nm.
  }

  public clse ::= clse(list[term],term,list[term],list[pred])
              | eqn(list[term],term,list[term],term,list[pred]).


  public pred ::= call(option[tloc],term,list[term])
                    | ecall(option[tloc],string,list[term])
                    | ocall(option[tloc],term,term,term)
                    | unfy(option[tloc],term,term)
                    | neck
                    | fail
                    | except(option[tloc],term).

  public prProg ::= prProg(pkgSpec,map[term,rel]).

  public implementation display[prProg] <= {
    disp(Prog) => dispProg(Prog).
  }

  private dispProg:(prProg)=>ss.
  dispProg(prProg(_,Rels)) => ssSeq(values(Rels)//dispRel).

  public implementation display[rel] <= {
    disp(R) => dispRel(R).
  }

  private dispRel:(rel) => ss.
  dispRel(rel(Nm,Lc,Rules)) =>
    ssSeq(Rules//dispClause).

  public implementation display[clse] <= {
    disp(Cl) => dispClause(Cl).
  }

  private dispClause:(clse) => ss.
  dispClause(clse(Q,Hd,Args,Body)) => ssSeq([dispTerm(Hd,Q),dispArgs(Args,Q),ss(":-"),ssSeq(dispPreds("","\n    ",Body,Q)),ss(".\n")]).
  dispClause(eqn(Q,Hd,Args,Rep,Body)) => ssSeq([dispTerm(Hd,Q),dispArgs(Args,Q),ss("=>"),dispTerm(Rep,Q),ss(":-"),ssSeq(dispPreds("","\n    ",Body,Q)),ss(".\n")]).

  public implementation display[term] <= {
    disp(T) => dispTerm(T,[]).
  }

  public dispTerm:(term,list[term]) => ss.
  dispTerm(anon,_) => ss("_").
  dispTerm(varbl(Nm),Q) => ssSeq([ss(Nm)]) :- varbl(Nm) in Q.
  dispTerm(varbl(Nm),Q) => ssSeq([ss(Nm),ss("?")]) :- \+ varbl(Nm) in Q.
  dispTerm(intgr(Ix),_) => disp(Ix).
  dispTerm(flot(Dx),_) => disp(Dx).
  dispTerm(enum(Nm),_) => ss(Nm).
  dispTerm(strct(Nm,Ar),_) => ssSeq([ss(Nm),ss(":"),disp(Ar)]).
  dispTerm(prg(Nm,Ar),_) => ssSeq([ss(Nm),ss("/"),disp(Ar)]).
  dispTerm(strng(Sx),_) => disp(Sx).
  dispTerm(cons(Op,Args),Q) => ssSeq([dispTerm(Op,Q),dispArgs(Args,Q)]).
  dispTerm(invoke(_,Op,Args),Q) => ssSeq([ss("<"),dispTerm(Op,Q),ss(">"),dispArgs(Args,Q)]).

  dispArgs:(list[term],list[term]) => ss.
  dispArgs(Args,Q) => ssSeq([ss("("),..dispEls("",")",Args,Q)]).

  private dispEls:(string,string,list[term],list[term]) => list[ss].
  dispEls(_,Tail,[],_) => [ss(Tail)].
  dispEls(Sep,Tail,[e,..l],Q) => [ss(Sep),dispTerm(e,Q),..dispEls(", ",Tail,l,Q)].

  public implementation display[pred] <= {
    disp(P) => displayPred(P,[]).
  }

  private displayPred:(pred,list[term]) => ss.
  displayPred(neck,_) => ss("!").
  displayPred(call(_,Op,Args),Q) => ssSeq([dispTerm(Op,Q),dispArgs(Args,Q)]).
  displayPred(ecall(_,Op,Args),Q) => ssSeq([ss(Op),dispArgs(Args,Q)]).
  displayPred(ocall(_,Rc,Lb,Th),Q) => ssSeq([dispTerm(Lb,Q),ss("."),dispTerm(Rc,Q)]).
  displayPred(unfy(_,L,R),Q) => ssSeq([dispTerm(L,Q),ss("="),dispTerm(R,Q)]).
  displayPred(fail,_) => ss("fail").
  displayPred(except(_,T),Q) => ssSeq([ss("raise "),dispTerm(T,Q)]).

  private dispPreds:(string,string,list[pred],list[term]) => list[ss].
  dispPreds(_,_,[],_) => [].
  dispPreds(Sep,Alt,[C,..L],Q) => [ss(Sep),displayPred(C,Q),..dispPreds(Alt,Alt,L,Q)].

  public predArity:(pred) => integer.
  predArity(neck) => 0.
  predArity(fail) => 0.
  predArity(except(_,_)) => 1.
  predArity(call(_,_,Args)) => size(Args).
  predArity(ocall(_,_,_,_)) => 3.
  predArity(unfy(_,_,_)) => 2.
  predArity(ecall(_,_,Args)) => size(Args).

  public predLoc:(pred) => option[tloc].
  predLoc(neck) => none.
  predLoc(fail) => none.
  predLoc(except(Lc,_)) => Lc.
  predLoc(call(Lc,_,_)) => Lc.
  predLoc(ocall(Lc,_,_,_)) => Lc.
  predLoc(ecall(Lc,_,_)) => Lc.
  predLoc(unfy(Lc,_,_)) => Lc.

  public implementation equality[term] <= {
    T1 == T2 :- eqTerm(T1,T2).
    hash(T) => hashTerm(T).
  }

  eqTerm:(term,term){}.
  eqTerm(anon,anon).
  eqTerm(varbl(Nm1),varbl(Nm2)) :- Nm1==Nm2.
  eqTerm(intgr(Ix),intgr(Ix)).
  eqTerm(flot(Dx),flot(Dx)).
  eqTerm(enum(N1),enum(N2)) :- N1==N2.
  eqTerm(strct(N1,Ar),strct(N2,Ar)) :- N1==N2.
  eqTerm(prg(N1,Ar),prg(N2,Ar)) :- N1==N2.
  eqTerm(strng(S1),strng(S2)) :- S1==S2.
  eqTerm(cons(O1,E1),cons(O2,E2)) :- eqTerm(O1,O2), eqEls(E1,E2).

  eqEls:(list[term],list[term]){}.
  eqEls([],[]).
  eqEls([E1,..L1],[E2,..L2]) :- eqTerm(E1,E2), eqEls(L1,L2).

  hashTerm:(term)=>integer.
  hashTerm(anon)=>0.
  hashTerm(varbl(Nm1)) => hash(Nm1).
  hashTerm(intgr(Ix)) => Ix.
  hashTerm(flot(Dx)) => hash(Dx).
  hashTerm(enum(N1)) => hashTerm(strct(N1,0)).
  hashTerm(strct(N1,Ar)) => (hash(N1)*37+Ar)%18446744073709551616. -- 'cos of swi-prolog :('
  hashTerm(prg(N1,Ar)) => (hash(N1)*37+Ar)%18446744073709551616.
  hashTerm(strng(S1)) => hash(S1).
  hashTerm(cons(O1,Els)) => foldRight((H,T)=>H*37+hash(T),hash(O1),Els)%18446744073709551616.

  public genVr:(string) => term.
  genVr(Nm) => varbl(_str_gen(Nm)).

  public isGroundTerm:(term){}.
  isGroundTerm(intgr(_)).
  isGroundTerm(flot(_)).
  isGroundTerm(enum(_)).
  isGroundTerm(strct(_,_)).
  isGroundTerm(prg(_,_)).
  isGroundTerm(strng(_)).
  isGroundTerm(cons(Op,Els)) :-
    isGroundTerm(Op),
    E in Els *> isGroundTerm(E).

  public tupleSig:(integer) => term.
  tupleSig(Ar) => strct("()\(Ar)",Ar).

  public isTupleSig:(term,integer){}.
  isTupleSig(strct(Nm,Ar),Ar) :- Nm="()\(Ar)".

  public mkTpl:(list[term]) => term.
  mkTpl(Els) => cons(tupleSig(size(Els)),Els).

  public clName:(clse) => term.
  clName(clse(_,Nm,_,_)) => Nm.
  clName(eqn(_,Nm,_,_,_)) => Nm.

  public nthPred:(clse,integer) => pred.
  nthPred(clse(_,_,_,Body),Ix) => C :- nthEl(Body,Ix,C).

  public clArgs:(clse) => list[term].
  clArgs(clse(_,_,Args,_)) => Args.
  clArgs(eqn(_,_,Args,_,_)) => Args.
}

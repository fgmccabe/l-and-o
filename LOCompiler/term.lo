lo.comp.term {
  import lo.

  import lo.comp.package.
  import lo.comp.types.

  public type term ::= anon
                   | varbl(string)
                   | intgr(integer)
                   | flot(float)
                   | enum(string)
                   | strct(string,integer)
                   | prg(string,integer)
                   | strng(string)
                   | tuple(list[term])
                   | cons(term,list[term])
                   | code(tipe,list[integer],list[term]).

  public type clse ::= clse(list[term],term,list[term],list[pred]).

  public type pred ::= call(term,list[term])
                    | ecall(string,list[term])
                    | ocall(term,term,term)
                    | unfy(term,term)
                    | neck
                    | fail
                    | except(term).

  public type prProg ::= prProg(pkgSpec,list[clse]).

  public implementation display[prProg] <= {
    disp(Prog) => dispProg(Prog).
  }

  private dispProg:(prProg)=>ss.
  dispProg(prProg(_,Rules)) => ssSeq([ss("compiled rules\n"),..dispRules(Rules)]).

  private dispRules:(list[clse]) => list[ss].
  dispRules([]) => [].
  dispRules([Cl,..Rls]) => [disp(Cl),..dispRules(Rls)].

  public implementation display[clse] <= {
    disp(Cl) => dispClause(Cl).
  }

  private dispClause:(clse) => ss.
  dispClause(clse([],Hd,Args,Body)) => ssSeq([disp(Hd),disp(Args),ss(":-"),ssSeq(dispPreds("","\n    ",Body)),ss(".\n")]).
  dispClause(clse(Q,Hd,Args,Body)) => ssSeq([ss("all "),ssSeq(dispEls(""," ~~\n",Q)),disp(Hd),disp(Args),ss(":-"),ssSeq(dispPreds("","\n    ",Body)),ss(".\n")]).

  public implementation display[term] <= {
    disp(T) => dispTerm(T).
  }

  private dispTerm:(term) => ss.
  dispTerm(anon) => ss("_").
  dispTerm(varbl(Nm)) => ssSeq([ss(Nm),ss("?")]).
  dispTerm(intgr(Ix)) => disp(Ix).
  dispTerm(flot(Dx)) => disp(Dx).
  dispTerm(enum(Nm)) => ss(Nm).
  dispTerm(strct(Nm,Ar)) => ssSeq([ss(Nm),ss("@"),disp(Ar)]).
  dispTerm(prg(Nm,Ar)) => ssSeq([ss(Nm),ss("/"),disp(Ar)]).
  dispTerm(strng(Sx)) => disp(Sx).
  dispTerm(tuple(Els)) => ssSeq([ss("("),..dispEls("",")",Els)]).
  dispTerm(cons(Op,Args)) => ssSeq([disp(Op),ss("("),..dispEls("",")",Args)]).

  private dispEls:(string,string,list[term]) => list[ss].
  dispEls(_,Tail,[]) => [ss(Tail)].
  dispEls(Sep,Tail,[e,..l]) => [ss(Sep),dispTerm(e),..dispEls(", ",Tail,l)].

  public implementation display[pred] <= {
    disp(P) => displayPred(P).
  }

  private displayPred:(pred) => ss.
  displayPred(neck) => ss("!").
  displayPred(call(Op,Args)) => ssSeq([dispTerm(Op),ss("("),..dispEls("",")",Args)]).
  displayPred(ecall(Op,Args)) => ssSeq([disp(Op),ss("("),..dispEls("",")",Args)]).
  displayPred(ocall(Rc,Lb,Th)) => ssSeq([dispTerm(Lb),ss("/"),dispTerm(Th),ss("."),dispTerm(Rc)]).
  displayPred(unfy(L,R)) => ssSeq([dispTerm(L),ss("="),dispTerm(R)]).
  displayPred(fail) => ss("fail").
  displayPred(except(T)) => ssSeq([ss("raise "),disp(T)]).

  private dispPreds:(string,string,list[pred]) => list[ss].
  dispPreds(_,_,[]) => [].
  dispPreds(Sep,Alt,[C,..L]) => [ss(Sep),displayPred(C),..dispPreds(Alt,Alt,L)].

  public genVr:(string) => term.
  genVr(Nm) => varbl(_str_gen(Nm)).

  public isGroundTerm:(term){}.
  isGroundTerm(intgr(_)).
  isGroundTerm(flot(_)).
  isGroundTerm(enum(_)).
  isGroundTerm(strct(_,_)).
  isGroundTerm(prg(_,_)).
  isGroundTerm(strng(_)).
  isGroundTerm(tuple(Els)) :-
    isGroundTerm(E) *> E in Els.
  isGroundTerm(cons(Op,Els)) :-
    isGroundTerm(Op),
    isGroundTerm(E) *> E in Els.
  isGroundTerm(code(_,_,_)).
}
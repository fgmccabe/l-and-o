lo.comp.code.pkg{
  import lo.

  -- Top level of the prolog compiler

  import lo.comp.errors.
  import lo.comp.package.
  import lo.comp.reduce.
  import lo.comp.term.

  import lo.comp.code.asm.
  import lo.comp.code.clause.
  import lo.comp.code.code.
  import lo.comp.code.indexing.
  import lo.comp.code.instructions.
  import lo.comp.code.registers.

  public compileMdl:(prProg,report,report) => codeMdl.
  compileMdl(prProg(Spec,Rels),Rp,Rp) =>
    codeMdl(Spec,pairs(Rels)//(((Nm,Rl)) => asm(compRel(Nm,Rl)))).

  compRel:(term,trel) => assem.
  compRel(prg(Nm,Ar),trel(_,Lc,Fal,Cls)) => Code :-
    logMsg("Compiling \(Cls)"),
    Prefix = Nm+"_",
    L0 = newLabel(Prefix),
    DefltCode = defltSeq(Prefix,L0,Cls,true,[],Lts,Entries,[],[],SrcMap),
    IndexCode = genIndex(Entries,L0),
    Code = assem(prg(Nm,Ar),IndexCode<>DefltCode,[litrl(newLabel(Prefix),prg(Nm,Ar)),..Lts],SrcMap),
    logMsg("Assembler output: \(Code)").

  defltSeq:(string,string,list[clse],logical,list[litrl],list[litrl],list[(string,clse)],list[(string,clse)],list[(string,string,tloc)],list[(string,string,tloc)]) => list[instruction].
  defltSeq(Prefix,Lb,[Cl],true,Lts,Ltx,[(Lb,Cl),..Entries],Entries,Sm,SMx) => [iLbl(Lb),..ClCode] :-
    compCl(reduceClause(Cl),Lts,Sm) = assem(_,ClCode,Ltx,SMx).
  defltSeq(Prefix,Lb,[Cl],false,Lts,Ltx,[(Lbx,Cl),..Entries],Entries,Sm,Smx) => [iLbl(Lb),iTrustme,iLbl(Lbx),..ClCode] :-
    Lbx = newLabel("Cl"),
    compCl(reduceClause(Cl),Lts,Sm) = assem(_,ClCode,Ltx,Smx).
  defltSeq(Prefix,Lb,[Cl,..Rest],true,Lts,Ltx,[(Lbx,Cl),..Entries],Enx,Sm,Smx) =>
      [iLbl(Lb),iTryme(Lbnxt),iLbl(Lbx),..ClCode] <> defltSeq(Prefix,Lbnxt,Rest,false,Lt0,Ltx,Entries,Enx,Sm1,Smx) :-
    Lbx = newLabel("Cl"),
    Lbnxt = newLabel("Nxt"),
    compCl(reduceClause(Cl),Lts,Sm) = assem(_,ClCode,Lt0,Sm1).
  defltSeq(Prefix,Lb,[Cl,..Rest],false,Lts,Ltx,[(Lbx,Cl),..Entries],Enx,Sm,Smx) =>
      [iLbl(Lb),iRetryme(Lbnxt),iLbl(Lbx),..ClCode] <> defltSeq(Prefix,Lbnxt,Rest,false,Lt0,Ltx,Entries,Enx,Sm1,Smx) :-
    Lbx = newLabel("Cl"),
    Lbnxt = newLabel("Nxt"),
    compCl(reduceClause(Cl),Lts,Sm) = assem(_,ClCode,Lt0,Sm1).
  defltSeq(_,Lb,[],_,Lts,Lts,Entries,Entries,Sm,Sm) => [iLbl(Lb),iFayl].
}

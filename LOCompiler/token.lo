lo.comp.token{
  import lo.comp.location.
  import lo.

  public type
  tok ::= lpar
       |  rpar
       |  lbra
       |  rbra
       |  lbrce
       |  rbrce
       |  lqpar
       |  rqpar
       |  idTok(string)
       |  idQTok(string)
       |  intTok(integer)
       |  fltTok(float)
       |  stringTok(list[stringSegment])
       |  regTok(string)
       |  period.

  public
  stringSegment ::= segment(location,string)
                | interpolate(location,string,string).

  public token <~ hasLoc.

  public tok:(tok,location) <=> token.
  tok(Tk,Loc) <= {
    loc = Loc.
  }.

  public implementation display[token] <= {
    disp(Tk) => dispToken(Tk).
  }

  dispToken:(token)=>ss.
  dispToken(tok(Tk,Lc)) => ssSeq([disp(Tk),ss("@"),disp(Lc)]).

  public implementation display[tok] <= {
    disp(Tk) => tokDisp(Tk).
  }

  tokDisp : (tok) => ss.
  tokDisp(lpar) => ss("(").
  tokDisp(rpar) => ss(")").
  tokDisp(lbra) => ss("[").
  tokDisp(rbra) => ss("]").
  tokDisp(lbrce) => ss("{").
  tokDisp(rbrce) => ss("}").
  tokDisp(lqpar) => ss("<|").
  tokDisp(rqpar) => ss("|>").
  tokDisp(idTok(Nm)) => ss(Nm).
  tokDisp(idQTok(Nm)) => ssSeq([ss("'"),ss(Nm),ss("'")]).
  tokDisp(intTok(Ix)) => disp(Ix).
  tokDisp(fltTok(Dx)) => disp(Dx).
  tokDisp(stringTok(Sx)) => disp(Sx).
  tokDisp(regTok(Rg)) => ssSeq([ss("`"),ss(Rg),ss("`")]).
  tokDisp(period) => ss(". ").

  private
  implementation display[stringSegment] <= {
    disp(segment(_,T)) => ss(T).
    disp(interpolate(_,In,"")) => ssSeq([ss("display("),ss(In),ss(")")]).
    disp(interpolate(_,In,Fmt)) => ssSeq([ss("format("),ss(In),ss(":"),ss(Fmt),ss(")")]).
  }
}

lo.comp.token{
  import lo.comp.location.
  import lo.

  public tok ::= lpar
       |  rpar
       |  lbra
       |  rbra
       |  lbrce
       |  rbrce
       |  lqpar
       |  rqpar
       |  idTok(string)
       |  intTok(integer)
       |  fltTok(float)
       |  stringTok(list[stringSegment])
       |  period
       |  terminal.

  public stringSegment ::= segment(location,string) 
                | interpolate(location,string,string).

  public token <~ hasLoc.

  public tok:(tok,location) <=> token.
  tok(Tk,Loc) .. {
    loc = Loc.
  }.

  public tokenDisp : display[token].
  tokenDisp .. {
    display(tok(Tk,Loc)) => ssSeq([tokDisp.display(Tk),ss("@"),locationDisp.display(Loc)]).
  }.

  public tokDisp : display[tok].
  tokDisp .. {
    display(lpar) => ss("(").
    display(rpar) => ss(")").
    display(lbra) => ss("[").
    display(rbra) => ss("]").
    display(lbrce) => ss("{").
    display(rbrce) => ss("}").
    display(lqpar) => ss("<|").
    display(rqpar) => ss("|>").
    display(idTok(Nm)) => ss(Nm).
    display(intTok(Ix)) => intDisp.display(Ix).
    display(fltTok(Dx)) => fltDisp.display(Dx).
    display(stringTok(Sx)) => listDisp(segmentDisp).display(Sx).
    display(period) => ss(". ").
    display(terminal) => ss("<term>").
  }.

  segmentDisp : display[stringSegment].
  segmentDisp .. {
    display(segment(_,T)) => ss(T).
    display(interpolate(_,In,"")) => ssSeq([ss("display("),ss(In),ss(")")]).
    display(interpolate(_,In,Fmt)) => ssSeq([ss("format("),ss(In),ss(":"),ss(Fmt),ss(")")]).
  }
}
lo.comp.ast{
  import lo.
  import lo.comp.location.
  import lo.comp.keywords.
  import lo.comp.operators.

  public type ast <~ hasLoc.

  public implementation display[ast] <= {
    disp(T) => showAst(T,2000).
  }

  public
  iden:(location,string) <=> ast.
  iden(Loc,Nm) <= {
    loc = Loc.
  }

  public
  intg:(location,integer) <=> ast.
  intg(Loc,Ix) <= {
    loc = Loc.
  }

  public
  flot:(location,float) <=> ast.
  flot(Loc,Dx) <= {
    loc = Loc
  }

  public
  strg:(location,string) <=> ast.
  strg(Loc,St) <= {
    loc = Loc
  }

  public
  tupl:(location,string,list[ast]) <=> ast.
  tupl(Loc,Nm,Els) <= {
    loc = Loc.
  }

  public
  appl:(location,ast,ast) <=> ast.
  appl(Loc,Op,Arg) <= {
    loc = Loc.
  }

  private
  showAst:(ast,integer) => ss.
  showAst(iden(_,Nm),_) =>  ssSeq([ss("("), ss(Nm), ss(")")]) :-  isOperator(Nm,_).
  showAst(iden(_,Nm),_) => ss(Nm).
  showAst(intg(_,Ix),_) => disp(Ix).
  showAst(flot(_,Dx),_) => disp(Dx).
  showAst(strg(_,Sx),_) => disp(Sx).
  showAst(tupl(_,Nm,Els),_) => 
      ssSeq([ss(Lft),ssSeq(showEls(Els,Pr,Sep,"")),ss(Rgt)]) :- 
    tupleBrackets(Nm,Lft,Rgt,Pr,Sep).
  showAst(appl(_,iden(_,Op),tupl(_,"()",[A])),Pr) =>
      ssSeq([showOpen(Pr,PrOp), ss(Op), ss(" "), showAst(A,PrR), showClose(Pr,PrOp)]) :-
    prefixOp(Op,PrOp,PrR).
  showAst(appl(_,iden(_,Op),tupl(_,"()",[A])),Pr) =>
      ssSeq([showOpen(Pr,PrOp), showAst(A,PrL), ss(" "), ss(Op), showClose(Pr,PrOp)]) :-
    postfixOp(Op,PrL,PrOp).
  showAst(appl(_,iden(_,Op),tupl(_,"()",[L,R])),Pr) =>
      ssSeq([showOpen(Pr,PrOp), showAst(L,PrL), ss(" "), ss(Op), ss(" "), showAst(R,PrR), showClose(Pr,PrOp)]) :-
    infixOp(Op,PrL,PrOp,PrR).
  showAst(appl(_,Op,Args),_) =>
    ssSeq([showAst(Op,0), showAst(Args,0)]).

  private dumpAst:(ast){}.
  dumpAst(A) :-
    _logmsg("\(A)").

  private
  showEls:(list[ast],integer,string,string) => list[ss].
  showEls([],_,_,_) => [].
  showEls([E,..Ls],Pr,Sep,Sp) => [ss(Sp),showAst(E,Pr),..showEls(Ls,Pr,Sep,Sep)].

  private
  showOpen:(integer,integer)=>ss.
  showOpen(Pr,PrOp) => ss("(") :- PrOp>Pr.
  showOpen(_,_) => ss("").

  private
  showClose:(integer,integer)=>ss.
  showClose(Pr,PrOp) => ss(")") :-  PrOp>Pr.
  showClose(_,_) => ss("").

  private
  tupleBrackets:(string,string,string,integer,string){}.
  tupleBrackets("()","(",")",2000,", ").
  tupleBrackets("[]","[","]",1000,", ").
  tupleBrackets("{}","{","}",2000,".\n").
}
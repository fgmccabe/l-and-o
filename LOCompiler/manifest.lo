lo.comp.manifest{
  import lo.
  import lo.resources.
  import lo.uri.
  import lo.comp.package.
  import lo.comp.parseutils.

  public type manifest ::= manifest(list[manifestEntry]).

  -- A manifest entry looks like:
  -- packageName : { (version:file[uri])* }

  type manifestEntry ::= manifestEntry(string,list[(version,uri,string)]).

  -- Tokenization and parsing manifest files

  private type token ::= mAnifest | lbrce | rbrce | eqUals | stAr 
    | pkgId(string) | utok(list[integer]).

  tokens:(list[token]) --> list[integer].
  tokens(Toks) --> spaces(), moreToks(Toks).

  moreToks:(list[token]) --> list[integer].
  moreToks([]) --> eof.
  moreToks([Tok,..More]) --> token(Tok), tokens(More).

  token:(token) --> list[integer].
  token(mAnifest) --> "manifest".
  token(lbrce) --> "{".
  token(rbrce) --> "}".
  token(start) --> "*".
  token(colon) --> ":".
  token(eqUals) --> "=".
  token(utok(Seq)) --> "[", stringText(Seq), "]".
  token(pkgId(Nm)) --> pkgIden(Nm).

  stringText:(list[integer]) --> list[integer].
  stringText([]) --> [].
  stringText([C,..More]) --> "\\", quote(C), stringText(More).
  stringText([C,..More]) --> [C], { C \= 0c] }, stringText(More).

  quote:(integer) --> list[integer].
  quote(0c\n) --> "n".
  quote(0c") --> "\"".
  quote(0c') --> "'".
  quote(0c\t) --> "t".
  quote(C) --> [C].

  public readManifest:(uri) => manifest.
  readManifest(u) => m :- parseManifest(m) %% getResource(u).

  public flushManifest:(uri,manifest){}.
  flushManifest(Root,M) :-
    putResource(Root,flatten(disp(M))).

  -- Parsing a manifest from tokens
  public parseManifest:(manifest) --> list[integer].
  parseManifest(M) --> tokens(TL), { pManifest(M) %% TL}.

  pManifest:(manifest) --> list[token].
  pManifest(manifest(E)) --> [mAnifest, lbrce], entries(E), [rbrce].

  entries:(list[manifestEntry]) --> list[token].
  entries([Entry,..More]) --> entry(Entry), entries(More).
  entries([]) --> [].

  entry:(manifestEntry) --> list[token].
  entry(manifestEntry(Pk,Versions)) --> [pkgId(Pk), colon, lbrce], versions(Versions), [rbrce].

  versions:(list[(version,uri,string)]) --> list[token].
  versions([V,..More]) --> version(V), versions(More).
  versions([]) --> [].

  version:((version,uri,string)) --> list[token].
  version((V,Uri,F)) --> versionName(V), [equals, pkgId(F), utok(U)], { uriParse(Uri)%%U }.

  versionName:(version) --> list[token].
  versionName(defltVersion) --> [stAr].
  versionName(vers(S)) --> [pkgId(S)].

  -- Displaying a manifest
  public implementation display[manifest] .. {
    disp(manifest(E)) => ssSeq([ss("manifest"),ss("{\n"),ssSeq(showEntries(E)),ss("}\n")]).
  }

  showEntries:(list[manifestEntry]) => list[ss].
  showEntries([]) => [].
  showEntries([E,..L]) => [showEntry(E),..showEntries(L)].

  showEntry:(manifestEntry) => ss.
  showEntry(manifestEntry(Pk,Versions)) => ssSeq([ss("  "),ss(Pk),ss(":{\n"),ssSeq(showVersions(Versions)),ss("  }\n")]).

  showVersions:(list[(version,uri,string)]) => list[ss].
  showVersions([]) => [].
  showVersions([V,..M]) => [showVersion(V),..showVersions(M)].

  showVersion:((version,uri,string)) => ss.
  showVersion((V,U,F)) => ssSeq([ss("    "),disp(V),ss("="),ss(F),ss("["),disp(U),ss("]\n")]).

  -- Simple API to manipulate entries in a mAnifest

  public locateVersion:(manifest,string,version,version,uri,string){}.
  locateVersion(manifest(Entries),Pkg,Vers,Act,U,Fn) :-
    manifestEntry(Pkg,V) in Entries,
    getVersion(Vers,Act,V,U,Fn).

  getVersion:(version,version,list[(version,uri,string)],uri,string){}.
  getVersion(Vers,Vers,V,U,Fn) :- (Vers,U,Fn) in V!.
  getVersion(defltVersion,Act,V,U,Fn) :- (Act,U,Fn) in V!.

  public addToManifest:(manifest,uri,string,version,string) => manifest.
  addToManifest(manifest(M),U,Pkg,Version,FileName) => manifest(addEntry(M,U,Pkg,Version,FileName)).

  addEntry:(list[manifestEntry],uri,string,version,string) => list[manifestEntry].
  addEntry([],U,Pkg,Version,FileName) => [(manifestEntry(Pkg,[(Version,U,FileName)]))].
  addEntry([manifestEntry(Pkg,Vers),..E],U,Pkg,Version,FileName) => [manifestEntry(Pkg,addVersion(Vers,U,Version,FileName)),..E].
  addEntry([E,..M],U,Pkg,Version,FileName) => [E,..addEntry(M,U,Pkg,Version,FileName)].

  addVersion:(list[(version,uri,string)],uri,version,string) => list[(version,uri,string)].
  addVersion([],U,Vers,FileNm) => [(Vers,U,FileNm)].
  addVersion([(Vers,_,_),..V],U,Vers,FileNm) => [(Vers,U,FileNm),..V] . -- replace version
  addVersion([V,..M],U,Vers,FileNm) => [V,..addVersion(M,U,Vers,FileNm)].
}
lo.comp.regexp{
  -- Parse a regular expression
  import lo.
  import lo.comp.lexer.

  public
  regExp ::= reChars(list[integer]) 
         | reNegChars(list[integer])
         | reGroup(regExp,string)
         | reChoice(regExp,regExp)
         | rePlus(regExp)
         | reStar(regExp)
         | rePeriod
         | reEof
         | reStart
         | reLiteral(integer)
         | reSeq(list[regExp]).

  public
  regDisp:display[regExp].
  regDisp..{
    display(reChars[Chars]) => ssSeq([ss("["),ss(implode(Chars)),ss("]")]).
    display(reNegChars[Chars]) => ssSeq([ss("[^"),ss(implode(Chars)),ss("]")]).
    display(reGroup(R,"")) => ssSeq([ss("("),display(R),ss(")")]).
    display(reGroup(R,Nm)) => ssSeq([ss("("),display(R),ss(":"),ss(Nm),ss(")")]).
    display(reChoice(A,B)) => ssSeq([display(A),ss("|"),display(B)]).
    display(rePlus(A)) => ssSeq([display(A),ss("+")]).
    display(reStar(A)) => ssSeq([display(A),ss("*")]).
    display(rePeriod) => ss(".").
    display(reEof) => ss("$").
    display(reStart) => ss("^").
    display(reLiteral(Code)) => ss(implode([Code])).
    display(reSeq(A)) => ssSeq(dispSeq(A)).

    dispSeq([]) => [].
    dispSeq([R,..M]) => [display(R),..dispSeq(M)].
  }

  -- Parse regular expressions
  regularExp:(regExp) --> stream[integer].
  regularExp(R) --> reExp(F), reFollow(F,R).

  reExp:(regExp) --> stream[integer].
  reExp(rePeriod) --> ".".
  reExp(reStart) --> "^".
  reExp(reEof) --> "$".
  reExp(reNegChars(Chrs)) --> "[^", charClass(Chrs), "]".
  reExp(reChars(Chrs)) --> "[", charClass(Chrs), "]".
  reExp(reGroup(R,V)) --> "(", regularExp(R), groupVar(V), ")".
  reExp(reLiteral(Ch)) --> charRef(Ch).

  charClass:(list[integer]) --> stream[integer].
  charClass([]) --> "]"+.
  charClass(Chrs) --> charRef(St), "-", charRef(En), charClass(More), { Chrs = mergeChars(More,charRange(St,End))}.
  charClass([Ch,..More]) --> charRef(Ch), charClass(More).

  reFollow:(regExp,regExp) --> stream[integer].
  reFollow(R,F) --> "*", reFollow(reStar(R),F).
  reFollow(R,F) --> "+", reFollow(rePlus(R),F).
  reFollow(R,reChoice(R,N)) --> "|", regularExp(N).
  reFollow(R,R) --> [].

  charRange:(integer,integer) => list[integer].
  charRange(St,St) => [St].
  charRange(St,En) :: St<En => [St,..charRange(St+1,En)].

  mergeChars:(list[integer],list[integer]) => list[integer].
  mergeChars([],X) => X.
  mergeChars([E,..X],Y) :: isMember(E,Y) => mergeChars(X,Y).
  mergeChars([E,..X],Y) => [E,..mergeChars(X,Y)]. 

}
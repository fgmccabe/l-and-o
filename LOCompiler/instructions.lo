/* Automatically generated, do not edit */
lo.comp.instructions{
  import lo.
  public type instruction ::=              -- type defining the opcodes
     iLbl(string)               -- label in code stream
   | iHalt		-- stop execution
   | iDie		-- stop current process
   | iSucc		-- Succeed a clause
   | iKawl(integer,string)		-- call to program
   | iLkawl(integer,string)		-- last call to program
   | iDlkawl(integer,string)		-- deallocating last call
   | iKawlO(integer,integer)		-- call object method
   | iLkawlO(integer,integer)		-- last method call
   | iDlkawlO(integer,integer)		-- deallocating last variable call
   | iGo_to(string)		-- jump
   | iEscape(integer,string)		-- service function
   | iAlloc(integer,integer)		-- allocate locals
   | iDealloc		-- deallocate locals
   | iTryme(string)		-- try inline clause
   | iRetryme(string)		-- retry inline clause
   | iTrustme		-- last inline clause
   | iTrycl(string)		-- try clause
   | iRetry(string)		-- retry clause
   | iTrust(string)		-- last clause
   | iFayl		-- fail current execution
   | iCut		-- cut choice point
   | iIndexi(integer,integer)		-- integer index jump
   | iIndexl(integer)		-- list index
   | iIndexs(integer,integer)		-- symbol index jump
   | iIndexn(integer,integer)		-- numerical index jump
   | iIndexx(integer,integer)		-- constructor index jump
   | iTrpblk		-- start error block
   | iTrpend		-- end error block
   | iExcept(integer)		-- raise run-time exception
   | iGcmap(integer,integer)		-- Set active arguments & local depth
   | iGc(integer,integer)		-- Invoke GC if not enough space
   | iSusp(integer,integer)		-- suspend/execute call
   | iResume(integer)		-- continue from suspended call
   | iTrgr(integer)		-- trigger suspended calls
   | iUAA(integer,integer)		-- Unify argument registers
   | iUAY(integer,integer)		-- Unify
   | iUAS(integer)		-- Unify
   | iUcAS(integer)		-- Unify with occurs check
   | iUAlit(integer,string)		-- Unify with literal
   | iUAcns(integer,string)		-- Unify with constructor
   | iUYY(integer,integer)		-- Unify Y[h],Y[m]
   | iUYS(integer)		-- Unify
   | iUcYS(integer)		-- Unify with occurs check
   | iUSlit(string)		-- Unify literal
   | iUScns(string)		-- Unify constructor
   | iUAcns0(string)		-- Unify A[0] with constructor
   | iUAcns1(string)		-- Unify A[1] with constructor
   | iUAcns2(string)		-- Unify A[2] with constructor
   | iUAcns3(string)		-- Unify A[3] with constructor
   | iUAcns4(string)		-- Unify A[4] with constructor
   | iMAA(integer,integer)		-- Move
   | iMAY(integer,integer)		-- Move
   | iMuAY(integer,integer)		-- Move unsafe
   | iMAS(integer)		-- Move
   | iMAlit(integer,string)		-- Move literal
   | iMAcns(integer,string)		-- Build constructor 
   | iMYA(integer,integer)		-- Move
   | iMYY(integer,integer)		-- Move
   | iMYS(integer)		-- Move
   | iMSA(integer)		-- Move
   | iMSY(integer)		-- Move
   | iMSlit(string)		-- Move literal
   | iMScns(string)		-- Build constructor
   | iOAU(integer)		-- Unbind A[h]
   | iOYU(integer)		-- Unbind local
   | iOYA(integer,integer)		-- Overwrite local
   | iOYnil(integer)		-- Overwrite with empty list
   | iCAA(integer,integer)		-- Match
   | iCAY(integer,integer)		-- Match
   | iCAS(integer)		-- Match
   | iCAlit(integer,string)		-- Match literal
   | iCAcns(integer,string)		-- Match constructor
   | iCYA(integer,integer)		-- Match
   | iCYS(integer)		-- Match
   | iCSA(integer)		-- Match
   | iCSY(integer)		-- Match
   | iCSlit(string)		-- Match literal
   | iCScns(string)		-- Match constructor
   | iCAcns0(string)		-- Match constructor in A[0]
   | iCAcns1(string)		-- Match constructor in A[1]
   | iCAcns2(string)		-- Match constructor in A[2]
   | iCAcns3(string)		-- Match constructor in A[3]
   | iCAcns4(string)		-- Match constructor in A[4]
   | iClAA(integer,integer)		-- First/clear
   | iClAY(integer,integer)		-- First/clear
   | iClAS(integer)		-- First/clear
   | iClSA(integer)		-- First/clear
   | iClSY(integer)		-- First/clear
   | iVrA(integer)		-- Test for variable
   | iVrY(integer)		-- Test for variable
   | iNvrA(integer)		-- Test for non-variable
   | iNvrY(integer)		-- Test for non-variable
   | iVdA(integer)		-- Void A[h]
   | iVdAA(integer,integer)		-- Void A[h],Count
   | iVdY(integer)		-- Void Y[X]
   | iVdYY(integer,integer)		-- Void Y[X],Count}
   | iClA(integer)		-- Clear A[h]
   | iClY(integer)		-- Clear Y[X]
   | iClS		-- Clear S++
   | iClYY(integer,integer).		-- Clear Y[X],Count


  public implementation display[instruction] <= {
    disp(iHalt) => ss("halt").
    disp(iDie) => ss("die").
    disp(iSucc) => ss("succ").
    disp(iKawl(A1,A2)) => ssSeq([ss("kawl"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iLkawl(A1,A2)) => ssSeq([ss("lkawl"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iDlkawl(A1,A2)) => ssSeq([ss("dlkawl"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iKawlO(A1,A2)) => ssSeq([ss("kawlO"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iLkawlO(A1,A2)) => ssSeq([ss("lkawlO"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iDlkawlO(A1,A2)) => ssSeq([ss("dlkawlO"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iGo_to(A1)) => ssSeq([ss("go_to"),ss(" "),ss(A1)]).
    disp(iEscape(A1,A2)) => ssSeq([ss("escape"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iAlloc(A1,A2)) => ssSeq([ss("alloc"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iDealloc) => ss("dealloc").
    disp(iTryme(A1)) => ssSeq([ss("tryme"),ss(" "),ss(A1)]).
    disp(iRetryme(A1)) => ssSeq([ss("retryme"),ss(" "),ss(A1)]).
    disp(iTrustme) => ss("trustme").
    disp(iTrycl(A1)) => ssSeq([ss("trycl"),ss(" "),ss(A1)]).
    disp(iRetry(A1)) => ssSeq([ss("retry"),ss(" "),ss(A1)]).
    disp(iTrust(A1)) => ssSeq([ss("trust"),ss(" "),ss(A1)]).
    disp(iFayl) => ss("fayl").
    disp(iCut) => ss("cut").
    disp(iIndexi(A1,A2)) => ssSeq([ss("indexi"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iIndexl(A1)) => ssSeq([ss("indexl"),ss(" "),disp(A1)]).
    disp(iIndexs(A1,A2)) => ssSeq([ss("indexs"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iIndexn(A1,A2)) => ssSeq([ss("indexn"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iIndexx(A1,A2)) => ssSeq([ss("indexx"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iTrpblk) => ss("trpblk").
    disp(iTrpend) => ss("trpend").
    disp(iExcept(A1)) => ssSeq([ss("except"),ss(" "),disp(A1)]).
    disp(iGcmap(A1,A2)) => ssSeq([ss("gcmap"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iGc(A1,A2)) => ssSeq([ss("gc"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iSusp(A1,A2)) => ssSeq([ss("susp"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iResume(A1)) => ssSeq([ss("resume"),ss(" "),disp(A1)]).
    disp(iTrgr(A1)) => ssSeq([ss("trgr"),ss(" "),disp(A1)]).
    disp(iUAA(A1,A2)) => ssSeq([ss("uAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iUAY(A1,A2)) => ssSeq([ss("uAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iUAS(A1)) => ssSeq([ss("uAS"),ss(" "),disp(A1)]).
    disp(iUcAS(A1)) => ssSeq([ss("ucAS"),ss(" "),disp(A1)]).
    disp(iUAlit(A1,A2)) => ssSeq([ss("uAlit"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iUAcns(A1,A2)) => ssSeq([ss("uAcns"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iUYY(A1,A2)) => ssSeq([ss("uYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iUYS(A1)) => ssSeq([ss("uYS"),ss(" "),disp(A1)]).
    disp(iUcYS(A1)) => ssSeq([ss("ucYS"),ss(" "),disp(A1)]).
    disp(iUSlit(A2)) => ssSeq([ss("uSlit"),ss(" "),ss(A2)]).
    disp(iUScns(A2)) => ssSeq([ss("uScns"),ss(" "),ss(A2)]).
    disp(iUAcns0(A1)) => ssSeq([ss("uAcns0"),ss(" "),ss(A1)]).
    disp(iUAcns1(A1)) => ssSeq([ss("uAcns1"),ss(" "),ss(A1)]).
    disp(iUAcns2(A1)) => ssSeq([ss("uAcns2"),ss(" "),ss(A1)]).
    disp(iUAcns3(A1)) => ssSeq([ss("uAcns3"),ss(" "),ss(A1)]).
    disp(iUAcns4(A1)) => ssSeq([ss("uAcns4"),ss(" "),ss(A1)]).
    disp(iMAA(A1,A2)) => ssSeq([ss("mAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iMAY(A1,A2)) => ssSeq([ss("mAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iMuAY(A1,A2)) => ssSeq([ss("muAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iMAS(A1)) => ssSeq([ss("mAS"),ss(" "),disp(A1)]).
    disp(iMAlit(A1,A2)) => ssSeq([ss("mAlit"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iMAcns(A1,A2)) => ssSeq([ss("mAcns"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iMYA(A1,A2)) => ssSeq([ss("mYA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iMYY(A1,A2)) => ssSeq([ss("mYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iMYS(A1)) => ssSeq([ss("mYS"),ss(" "),disp(A1)]).
    disp(iMSA(A2)) => ssSeq([ss("mSA"),ss(" "),disp(A2)]).
    disp(iMSY(A2)) => ssSeq([ss("mSY"),ss(" "),disp(A2)]).
    disp(iMSlit(A2)) => ssSeq([ss("mSlit"),ss(" "),ss(A2)]).
    disp(iMScns(A2)) => ssSeq([ss("mScns"),ss(" "),ss(A2)]).
    disp(iOAU(A1)) => ssSeq([ss("oAU"),ss(" "),disp(A1)]).
    disp(iOYU(A1)) => ssSeq([ss("oYU"),ss(" "),disp(A1)]).
    disp(iOYA(A1,A2)) => ssSeq([ss("oYA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iOYnil(A1)) => ssSeq([ss("oYnil"),ss(" "),disp(A1)]).
    disp(iCAA(A1,A2)) => ssSeq([ss("cAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iCAY(A1,A2)) => ssSeq([ss("cAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iCAS(A1)) => ssSeq([ss("cAS"),ss(" "),disp(A1)]).
    disp(iCAlit(A1,A2)) => ssSeq([ss("cAlit"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iCAcns(A1,A2)) => ssSeq([ss("cAcns"),ss(" "),disp(A1),ss(" "),ss(A2)]).
    disp(iCYA(A1,A2)) => ssSeq([ss("cYA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iCYS(A1)) => ssSeq([ss("cYS"),ss(" "),disp(A1)]).
    disp(iCSA(A2)) => ssSeq([ss("cSA"),ss(" "),disp(A2)]).
    disp(iCSY(A2)) => ssSeq([ss("cSY"),ss(" "),disp(A2)]).
    disp(iCSlit(A2)) => ssSeq([ss("cSlit"),ss(" "),ss(A2)]).
    disp(iCScns(A2)) => ssSeq([ss("cScns"),ss(" "),ss(A2)]).
    disp(iCAcns0(A1)) => ssSeq([ss("cAcns0"),ss(" "),ss(A1)]).
    disp(iCAcns1(A1)) => ssSeq([ss("cAcns1"),ss(" "),ss(A1)]).
    disp(iCAcns2(A1)) => ssSeq([ss("cAcns2"),ss(" "),ss(A1)]).
    disp(iCAcns3(A1)) => ssSeq([ss("cAcns3"),ss(" "),ss(A1)]).
    disp(iCAcns4(A1)) => ssSeq([ss("cAcns4"),ss(" "),ss(A1)]).
    disp(iClAA(A1,A2)) => ssSeq([ss("clAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iClAY(A1,A2)) => ssSeq([ss("clAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iClAS(A1)) => ssSeq([ss("clAS"),ss(" "),disp(A1)]).
    disp(iClSA(A2)) => ssSeq([ss("clSA"),ss(" "),disp(A2)]).
    disp(iClSY(A2)) => ssSeq([ss("clSY"),ss(" "),disp(A2)]).
    disp(iVrA(A1)) => ssSeq([ss("vrA"),ss(" "),disp(A1)]).
    disp(iVrY(A1)) => ssSeq([ss("vrY"),ss(" "),disp(A1)]).
    disp(iNvrA(A1)) => ssSeq([ss("nvrA"),ss(" "),disp(A1)]).
    disp(iNvrY(A1)) => ssSeq([ss("nvrY"),ss(" "),disp(A1)]).
    disp(iVdA(A1)) => ssSeq([ss("vdA"),ss(" "),disp(A1)]).
    disp(iVdAA(A1,A2)) => ssSeq([ss("vdAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iVdY(A1)) => ssSeq([ss("vdY"),ss(" "),disp(A1)]).
    disp(iVdYY(A1,A2)) => ssSeq([ss("vdYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
    disp(iClA(A1)) => ssSeq([ss("clA"),ss(" "),disp(A1)]).
    disp(iClY(A1)) => ssSeq([ss("clY"),ss(" "),disp(A1)]).
    disp(iClS) => ss("clS").
    disp(iClYY(A1,A2)) => ssSeq([ss("clYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  }

}.

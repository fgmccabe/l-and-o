/* Automatically generated, do not edit */
lo.comp.code.instructions{
  import lo.

  import lo.comp.term.
  public type instruction ::=              -- type defining the opcodes
     iLbl(string)               -- label in code stream
   | iHalt		-- stop execution
   | iDie		-- stop current process
   | iSucc		-- Succeed a clause
   | iKawl(integer,string)		-- call to program
   | iLkawl(integer,string)		-- last call to program
   | iDlkawl(integer,string)		-- deallocating last call
   | iKawlO(integer,integer)		-- call object method
   | iLkawlO(integer,integer)		-- last method call
   | iDlkawlO(integer,integer)		-- deallocating last variable call
   | iGo_to(string)		-- jump
   | iEscape(integer,string)		-- service function
   | iAlloc(integer,integer)		-- allocate locals
   | iDealloc		-- deallocate locals
   | iTryme(string)		-- try inline clause
   | iRetryme(string)		-- retry inline clause
   | iTrustme		-- last inline clause
   | iTrycl(string)		-- try clause
   | iRetry(string)		-- retry clause
   | iTrust(string)		-- last clause
   | iFayl		-- fail current execution
   | iCut		-- cut choice point
   | iIndexi(integer,integer)		-- integer index jump
   | iIndexs(integer,integer)		-- symbol index jump
   | iIndexn(integer,integer)		-- numerical index jump
   | iIndexx(integer,integer)		-- constructor index jump
   | iTrpblk		-- start error block
   | iTrpend		-- end error block
   | iExcept(integer)		-- raise run-time exception
   | iGcmap(integer,integer)		-- Set active arguments & local depth
   | iGc(integer,integer)		-- Invoke GC if not enough space
   | iSusp(integer,integer)		-- suspend/execute call
   | iResume(integer)		-- continue from suspended call
   | iTrgr(integer)		-- trigger suspended calls
   | iUAA(integer,integer)		-- Unify argument registers
   | iUAY(integer,integer)		-- Unify
   | iUAS(integer)		-- Unify
   | iUcAS(integer)		-- Unify with occurs check
   | iUAlit(integer,string)		-- Unify with literal
   | iUAcns(integer,string)		-- Unify with constructor
   | iUYY(integer,integer)		-- Unify Y[h],Y[m]
   | iUYS(integer)		-- Unify
   | iUcYS(integer)		-- Unify with occurs check
   | iUSlit(string)		-- Unify literal
   | iUScns(string)		-- Unify constructor
   | iMAA(integer,integer)		-- Move
   | iMAY(integer,integer)		-- Move
   | iMuAY(integer,integer)		-- Move unsafe
   | iMAS(integer)		-- Move
   | iMAlit(integer,string)		-- Move literal
   | iMAcns(integer,string)		-- Build constructor 
   | iMYA(integer,integer)		-- Move
   | iMYY(integer,integer)		-- Move
   | iMYS(integer)		-- Move
   | iMSA(integer)		-- Move
   | iMSY(integer)		-- Move
   | iMSlit(string)		-- Move literal
   | iMScns(string)		-- Build constructor
   | iOAU(integer)		-- Unbind A[h]
   | iOYU(integer)		-- Unbind local
   | iOYA(integer,integer)		-- Overwrite local
   | iOYnil(integer)		-- Overwrite with empty list
   | iCAA(integer,integer)		-- Match
   | iCAY(integer,integer)		-- Match
   | iCAS(integer)		-- Match
   | iCAlit(integer,string)		-- Match literal
   | iCAcns(integer,string)		-- Match constructor
   | iCYA(integer,integer)		-- Match
   | iCYS(integer)		-- Match
   | iCSA(integer)		-- Match
   | iCSY(integer)		-- Match
   | iCSlit(string)		-- Match literal
   | iCScns(string)		-- Match constructor
   | iClAA(integer,integer)		-- First/clear
   | iClAY(integer,integer)		-- First/clear
   | iClAS(integer)		-- First/clear
   | iClSA(integer)		-- First/clear
   | iClSY(integer)		-- First/clear
   | iVrA(integer)		-- Test for variable
   | iVrY(integer)		-- Test for variable
   | iNvrA(integer)		-- Test for non-variable
   | iNvrY(integer)		-- Test for non-variable
   | iVdA(integer)		-- Void A[h]
   | iVdAA(integer,integer)		-- Void A[h],Count
   | iVdY(integer)		-- Void Y[X]
   | iVdYY(integer,integer)		-- Void Y[X],Count}
   | iClA(integer)		-- Clear A[h]
   | iClY(integer)		-- Clear Y[X]
   | iClS		-- Clear S++
   | iClYY(integer,integer).		-- Clear Y[X],Count


  public implementation display[instruction] <= {
    disp(I) => showIns(I,[]).
  }

  public showIns:(instruction,map[string,term])=>ss.
  showIns(iLbl(Lb),_) => ssSeq([ss(Lb),ss(":")]).
  showIns(iHalt,_) => ss("halt").
  showIns(iDie,_) => ss("die").
  showIns(iSucc,_) => ss("succ").
  showIns(iKawl(A1,A2),Lits) => ssSeq([ss("kawl"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iLkawl(A1,A2),Lits) => ssSeq([ss("lkawl"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iDlkawl(A1,A2),Lits) => ssSeq([ss("dlkawl"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iKawlO(A1,A2),Lits) => ssSeq([ss("kawlO"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iLkawlO(A1,A2),Lits) => ssSeq([ss("lkawlO"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iDlkawlO(A1,A2),Lits) => ssSeq([ss("dlkawlO"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iGo_to(A1),Lits) => ssSeq([ss("go_to"),ss(" "),ss(A1)]).
  showIns(iEscape(A1,A2),Lits) => ssSeq([ss("escape"),ss(" "),disp(A1),ss(" "),ss(A2)]).
  showIns(iAlloc(A1,A2),Lits) => ssSeq([ss("alloc"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iDealloc,_) => ss("dealloc").
  showIns(iTryme(A1),Lits) => ssSeq([ss("tryme"),ss(" "),ss(A1)]).
  showIns(iRetryme(A1),Lits) => ssSeq([ss("retryme"),ss(" "),ss(A1)]).
  showIns(iTrustme,_) => ss("trustme").
  showIns(iTrycl(A1),Lits) => ssSeq([ss("trycl"),ss(" "),ss(A1)]).
  showIns(iRetry(A1),Lits) => ssSeq([ss("retry"),ss(" "),ss(A1)]).
  showIns(iTrust(A1),Lits) => ssSeq([ss("trust"),ss(" "),ss(A1)]).
  showIns(iFayl,_) => ss("fayl").
  showIns(iCut,_) => ss("cut").
  showIns(iIndexi(A1,A2),Lits) => ssSeq([ss("indexi"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iIndexs(A1,A2),Lits) => ssSeq([ss("indexs"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iIndexn(A1,A2),Lits) => ssSeq([ss("indexn"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iIndexx(A1,A2),Lits) => ssSeq([ss("indexx"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iTrpblk,_) => ss("trpblk").
  showIns(iTrpend,_) => ss("trpend").
  showIns(iExcept(A1),Lits) => ssSeq([ss("except"),ss(" "),disp(A1)]).
  showIns(iGcmap(A1,A2),Lits) => ssSeq([ss("gcmap"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iGc(A1,A2),Lits) => ssSeq([ss("gc"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iSusp(A1,A2),Lits) => ssSeq([ss("susp"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iResume(A1),Lits) => ssSeq([ss("resume"),ss(" "),disp(A1)]).
  showIns(iTrgr(A1),Lits) => ssSeq([ss("trgr"),ss(" "),disp(A1)]).
  showIns(iUAA(A1,A2),Lits) => ssSeq([ss("uAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iUAY(A1,A2),Lits) => ssSeq([ss("uAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iUAS(A1),Lits) => ssSeq([ss("uAS"),ss(" "),disp(A1)]).
  showIns(iUcAS(A1),Lits) => ssSeq([ss("ucAS"),ss(" "),disp(A1)]).
  showIns(iUAlit(A1,A2),Lits) => ssSeq([ss("uAlit"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iUAcns(A1,A2),Lits) => ssSeq([ss("uAcns"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iUYY(A1,A2),Lits) => ssSeq([ss("uYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iUYS(A1),Lits) => ssSeq([ss("uYS"),ss(" "),disp(A1)]).
  showIns(iUcYS(A1),Lits) => ssSeq([ss("ucYS"),ss(" "),disp(A1)]).
  showIns(iUSlit(A2),Lits) => ssSeq([ss("uSlit"),ss(" "),showLit(A2,Lits)]).
  showIns(iUScns(A2),Lits) => ssSeq([ss("uScns"),ss(" "),showLit(A2,Lits)]).
  showIns(iMAA(A1,A2),Lits) => ssSeq([ss("mAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iMAY(A1,A2),Lits) => ssSeq([ss("mAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iMuAY(A1,A2),Lits) => ssSeq([ss("muAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iMAS(A1),Lits) => ssSeq([ss("mAS"),ss(" "),disp(A1)]).
  showIns(iMAlit(A1,A2),Lits) => ssSeq([ss("mAlit"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iMAcns(A1,A2),Lits) => ssSeq([ss("mAcns"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iMYA(A1,A2),Lits) => ssSeq([ss("mYA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iMYY(A1,A2),Lits) => ssSeq([ss("mYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iMYS(A1),Lits) => ssSeq([ss("mYS"),ss(" "),disp(A1)]).
  showIns(iMSA(A2),Lits) => ssSeq([ss("mSA"),ss(" "),disp(A2)]).
  showIns(iMSY(A2),Lits) => ssSeq([ss("mSY"),ss(" "),disp(A2)]).
  showIns(iMSlit(A2),Lits) => ssSeq([ss("mSlit"),ss(" "),showLit(A2,Lits)]).
  showIns(iMScns(A2),Lits) => ssSeq([ss("mScns"),ss(" "),showLit(A2,Lits)]).
  showIns(iOAU(A1),Lits) => ssSeq([ss("oAU"),ss(" "),disp(A1)]).
  showIns(iOYU(A1),Lits) => ssSeq([ss("oYU"),ss(" "),disp(A1)]).
  showIns(iOYA(A1,A2),Lits) => ssSeq([ss("oYA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iOYnil(A1),Lits) => ssSeq([ss("oYnil"),ss(" "),disp(A1)]).
  showIns(iCAA(A1,A2),Lits) => ssSeq([ss("cAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iCAY(A1,A2),Lits) => ssSeq([ss("cAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iCAS(A1),Lits) => ssSeq([ss("cAS"),ss(" "),disp(A1)]).
  showIns(iCAlit(A1,A2),Lits) => ssSeq([ss("cAlit"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iCAcns(A1,A2),Lits) => ssSeq([ss("cAcns"),ss(" "),disp(A1),ss(" "),showLit(A2,Lits)]).
  showIns(iCYA(A1,A2),Lits) => ssSeq([ss("cYA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iCYS(A1),Lits) => ssSeq([ss("cYS"),ss(" "),disp(A1)]).
  showIns(iCSA(A2),Lits) => ssSeq([ss("cSA"),ss(" "),disp(A2)]).
  showIns(iCSY(A2),Lits) => ssSeq([ss("cSY"),ss(" "),disp(A2)]).
  showIns(iCSlit(A2),Lits) => ssSeq([ss("cSlit"),ss(" "),showLit(A2,Lits)]).
  showIns(iCScns(A2),Lits) => ssSeq([ss("cScns"),ss(" "),showLit(A2,Lits)]).
  showIns(iClAA(A1,A2),Lits) => ssSeq([ss("clAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iClAY(A1,A2),Lits) => ssSeq([ss("clAY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iClAS(A1),Lits) => ssSeq([ss("clAS"),ss(" "),disp(A1)]).
  showIns(iClSA(A2),Lits) => ssSeq([ss("clSA"),ss(" "),disp(A2)]).
  showIns(iClSY(A2),Lits) => ssSeq([ss("clSY"),ss(" "),disp(A2)]).
  showIns(iVrA(A1),Lits) => ssSeq([ss("vrA"),ss(" "),disp(A1)]).
  showIns(iVrY(A1),Lits) => ssSeq([ss("vrY"),ss(" "),disp(A1)]).
  showIns(iNvrA(A1),Lits) => ssSeq([ss("nvrA"),ss(" "),disp(A1)]).
  showIns(iNvrY(A1),Lits) => ssSeq([ss("nvrY"),ss(" "),disp(A1)]).
  showIns(iVdA(A1),Lits) => ssSeq([ss("vdA"),ss(" "),disp(A1)]).
  showIns(iVdAA(A1,A2),Lits) => ssSeq([ss("vdAA"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iVdY(A1),Lits) => ssSeq([ss("vdY"),ss(" "),disp(A1)]).
  showIns(iVdYY(A1,A2),Lits) => ssSeq([ss("vdYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).
  showIns(iClA(A1),Lits) => ssSeq([ss("clA"),ss(" "),disp(A1)]).
  showIns(iClY(A1),Lits) => ssSeq([ss("clY"),ss(" "),disp(A1)]).
  showIns(iClS,_) => ss("clS").
  showIns(iClYY(A1,A2),Lits) => ssSeq([ss("clYY"),ss(" "),disp(A1),ss(" "),disp(A2)]).

  showLit:(string,map[string,term]) => ss.
  showLit(Lt,M) => disp(T) :- present(M,Lt,T).
  showLit(Lt,_) => ss(Lt).
}.

/* Automatically generated, do not edit */

lo.comp.escapes{

  import lo.
  import lo.comp.types.

  public escapeType:(string)=>tipe.
  escapeType("_exit") => predType([tipe("lo.core*integer")]).
  escapeType("_command_line") => funType([],typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])).
  escapeType("_command_opts") => funType([],typeExp(tpFun("lo.core*list",1),[tupleType([tipe("lo.core*string"),tipe("lo.core*string")])])).
  escapeType("_unify") => univType(kVar("t"),predType([kVar("t"),kVar("t")])).
  escapeType("_identical") => univType(kVar("t"),predType([kVar("t"),kVar("t")])).
  escapeType("var") => univType(kVar("t"),predType([kVar("t")])).
  escapeType("ground") => univType(kVar("t"),predType([kVar("t")])).
  escapeType("_call") => predType([tipe("lo.core*string"),tipe("lo.core*integer"),typeExp(tpFun("lo.core*list",1),[typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])])]).
  escapeType("_defined") => predType([tipe("lo.core*string"),tipe("lo.core*integer")]).
  escapeType("_int_plus") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_int_minus") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_int_times") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_int_div") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_int_mod") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_flt_plus") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_flt_minus") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_flt_times") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_flt_div") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_flt_mod") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_int_abs") => funType([tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_flt_abs") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_int_lt") => predType([tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_int_ge") => predType([tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_flt_lt") => predType([tipe("lo.core*float"),tipe("lo.core*float")]).
  escapeType("_flt_ge") => predType([tipe("lo.core*float"),tipe("lo.core*float")]).
  escapeType("_int2flt") => funType([tipe("lo.core*integer")],tipe("lo.core*float")).
  escapeType("_flt2int") => funType([tipe("lo.core*float")],tipe("lo.core*integer")).
  escapeType("_flt_hash") => funType([tipe("lo.core*float")],tipe("lo.core*integer")).
  escapeType("_pwr") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("sqrt") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("exp") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("log") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("log10") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("pi") => funType([],tipe("lo.core*float")).
  escapeType("sin") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("cos") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("tan") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("asin") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("acos") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("atan") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("trunc") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("floor") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("ceil") => funType([tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("integral") => predType([tipe("lo.core*float")]).
  escapeType("srand") => predType([tipe("lo.core*float")]).
  escapeType("rand") => funType([],tipe("lo.core*float")).
  escapeType("irand") => funType([tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_ldexp") => funType([tipe("lo.core*float"),tipe("lo.core*float")],tipe("lo.core*float")).
  escapeType("_frexp") => predType([tipe("lo.core*float"),tipe("lo.core*float"),tipe("lo.core*integer")]).
  escapeType("_modf") => predType([tipe("lo.core*float"),tipe("lo.core*float"),tipe("lo.core*float")]).
  escapeType("_band") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_bor") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_bxor") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_blsl") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_blsr") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_basr") => funType([tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_bnot") => funType([tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_nthb") => predType([tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_suspend") => univType(kVar("u"),predType([kVar("u"),predType([])])).
  escapeType("_get_file") => funType([tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_put_file") => predType([tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_cwd") => funType([],tipe("lo.core*string")).
  escapeType("_cd") => predType([tipe("lo.core*string")]).
  escapeType("_rm") => predType([tipe("lo.core*string")]).
  escapeType("_mv") => predType([tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_mkdir") => predType([tipe("lo.core*string"),tipe("lo.core*integer")]).
  escapeType("_rmdir") => predType([tipe("lo.core*string")]).
  escapeType("_isdir") => predType([tipe("lo.core*string")]).
  escapeType("_chmod") => predType([tipe("lo.core*string"),tipe("lo.core*integer")]).
  escapeType("_ls") => funType([tipe("lo.core*string")],typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])).
  escapeType("_file_mode") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_file_present") => predType([tipe("lo.core*string")]).
  escapeType("_file_type") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_file_size") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_file_modified") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_file_date") => predType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_openInFile") => funType([tipe("lo.core*string"),tipe("lo.core*integer")],tipe("lo.io*fileHandle")).
  escapeType("_openOutFile") => funType([tipe("lo.core*string"),tipe("lo.core*integer")],tipe("lo.io*fileHandle")).
  escapeType("_openAppendFile") => funType([tipe("lo.core*string"),tipe("lo.core*integer")],tipe("lo.io*fileHandle")).
  escapeType("_openAppendIOFile") => funType([tipe("lo.core*string"),tipe("lo.core*integer")],tipe("lo.io*fileHandle")).
  escapeType("_popen") => predType([tipe("lo.core*string"),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")]),typeExp(tpFun("lo.core*list",1),[tupleType([tipe("lo.core*string"),tipe("lo.core*string")])]),tipe("lo.io*fileHandle"),tipe("lo.io*fileHandle"),tipe("lo.io*fileHandle")]).
  escapeType("_close") => predType([tipe("lo.io*fileHandle")]).
  escapeType("_end_of_file") => predType([tipe("lo.io*fileHandle")]).
  escapeType("_ready") => predType([tipe("lo.io*fileHandle")]).
  escapeType("_inchars") => funType([tipe("lo.io*fileHandle"),tipe("lo.core*integer")],tipe("lo.core*string")).
  escapeType("_inbytes") => funType([tipe("lo.io*fileHandle"),tipe("lo.core*integer")],typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])).
  escapeType("_inchar") => funType([tipe("lo.io*fileHandle")],tipe("lo.core*integer")).
  escapeType("_inbyte") => funType([tipe("lo.io*fileHandle")],tipe("lo.core*integer")).
  escapeType("_inline") => funType([tipe("lo.io*fileHandle")],tipe("lo.core*string")).
  escapeType("_intext") => funType([tipe("lo.io*fileHandle"),tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_outch") => predType([tipe("lo.io*fileHandle"),tipe("lo.core*integer")]).
  escapeType("_outbyte") => predType([tipe("lo.io*fileHandle"),tipe("lo.core*integer")]).
  escapeType("_outbytes") => predType([tipe("lo.io*fileHandle"),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])]).
  escapeType("_outtext") => predType([tipe("lo.io*fileHandle"),tipe("lo.core*string")]).
  escapeType("_stdfile") => funType([tipe("lo.core*integer")],tipe("lo.io*fileHandle")).
  escapeType("_fposition") => funType([tipe("lo.io*fileHandle")],tipe("lo.core*integer")).
  escapeType("_fseek") => predType([tipe("lo.io*fileHandle"),tipe("lo.core*integer")]).
  escapeType("_flush") => predType([tipe("lo.io*fileHandle")]).
  escapeType("_flushall") => predType([]).
  escapeType("_setfileencoding") => predType([tipe("lo.io*fileHandle"),tipe("lo.core*integer")]).
  escapeType("_install_pkg") => funType([tipe("lo.core*string")],typeExp(tpFun("lo.core*list",1),[tupleType([tipe("lo.core*string"),tipe("lo.core*string")])])).
  escapeType("_pkg_is_present") => predType([tipe("lo.core*string"),tipe("lo.core*string"),tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_logmsg") => predType([tipe("lo.core*string")]).
  escapeType("_connect") => predType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.io*fileHandle"),tipe("lo.io*fileHandle")]).
  escapeType("_listen") => predType([tipe("lo.core*integer"),tipe("lo.io*fileHandle")]).
  escapeType("_accept") => predType([tipe("lo.core*integer"),tipe("lo.io*fileHandle"),tipe("lo.io*fileHandle"),tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*string")]).
  escapeType("_udpPort") => predType([tipe("lo.core*integer"),tipe("lo.io*udpHandle")]).
  escapeType("_udpGet") => predType([tipe("lo.io*udpHandle"),tipe("lo.core*string"),tipe("lo.core*string"),tipe("lo.core*integer")]).
  escapeType("_udpSend") => predType([tipe("lo.io*udpHandle"),tipe("lo.core*string"),tipe("lo.core*string"),tipe("lo.core*integer")]).
  escapeType("_udpClose") => predType([tipe("lo.io*udpHandle")]).
  escapeType("hosttoip") => funType([tipe("lo.core*string")],typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])).
  escapeType("iptohost") => funType([tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_delay") => predType([tipe("lo.core*float")]).
  escapeType("_sleep") => predType([tipe("lo.core*float")]).
  escapeType("_now") => funType([],tipe("lo.core*float")).
  escapeType("_today") => funType([],tipe("lo.core*float")).
  escapeType("_ticks") => funType([],tipe("lo.core*float")).
  escapeType("_time2date") => predType([tipe("lo.core*float"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*float"),tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_time2utc") => predType([tipe("lo.core*float"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*float"),tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_date2time") => funType([tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*float"),tipe("lo.core*integer")],tipe("lo.core*float")).
  escapeType("_utc2time") => funType([tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*float"),tipe("lo.core*integer")],tipe("lo.core*float")).
  escapeType("_isCcChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isCfChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isCnChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isCoChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isCsChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isLlChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isLmChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isLoChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isLtChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isLuChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isMcChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isMeChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isMnChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isNdChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isNlChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isNoChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPcChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPdChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPeChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPfChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPiChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPoChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isPsChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isScChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isSkChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isSmChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isSoChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isZlChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isZpChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isZsChar") => predType([tipe("lo.core*integer")]).
  escapeType("_isLetterChar") => predType([tipe("lo.core*integer")]).
  escapeType("_digitCode") => funType([tipe("lo.core*integer")],tipe("lo.core*integer")).
  escapeType("_int2str") => funType([tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*string")).
  escapeType("_flt2str") => funType([tipe("lo.core*float"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*logical")],tipe("lo.core*string")).
  escapeType("_int_format") => funType([tipe("lo.core*integer"),tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_flt_format") => funType([tipe("lo.core*float"),tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_str2flt") => funType([tipe("lo.core*string")],tipe("lo.core*float")).
  escapeType("_str2int") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_str_lt") => predType([tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_str_ge") => predType([tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_str_hash") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_str_len") => funType([tipe("lo.core*string")],tipe("lo.core*integer")).
  escapeType("_str_gen") => funType([tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_stringOf") => univType(kVar("t"),funType([kVar("t"),tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*string"))).
  escapeType("_trim") => funType([tipe("lo.core*string"),tipe("lo.core*integer")],tipe("lo.core*string")).
  escapeType("explode") => funType([tipe("lo.core*string")],typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])).
  escapeType("implode") => funType([typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])],tipe("lo.core*string")).
  escapeType("_str_find") => predType([tipe("lo.core*string"),tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer")]).
  escapeType("_sub_str") => funType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer")],tipe("lo.core*string")).
  escapeType("_str_split") => predType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_str_concat") => funType([tipe("lo.core*string"),tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("_str_start") => predType([tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("_str_multicat") => funType([typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])],tipe("lo.core*string")).
  escapeType("getenv") => funType([tipe("lo.core*string"),tipe("lo.core*string")],tipe("lo.core*string")).
  escapeType("setenv") => predType([tipe("lo.core*string"),tipe("lo.core*string")]).
  escapeType("envir") => funType([],typeExp(tpFun("lo.core*list",1),[tupleType([tipe("lo.core*string"),tipe("lo.core*string")])])).
  escapeType("getlogin") => funType([],tipe("lo.core*string")).
  escapeType("_fork") => funType([predType([])],tipe("lo.thread*thread")).
  escapeType("_thread") => funType([],tipe("lo.thread*thread")).
  escapeType("kill") => predType([tipe("lo.thread*thread")]).
  escapeType("thread_state") => funType([tipe("lo.thread*thread")],tipe("lo.thread*processState")).
  escapeType("waitfor") => predType([tipe("lo.thread*thread")]).
  escapeType("_shell") => funType([tipe("lo.core*string"),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")]),typeExp(tpFun("lo.core*list",1),[tupleType([tipe("lo.core*string"),tipe("lo.core*string")])])],tipe("lo.core*integer")).
  escapeType("_newLock") => funType([],tipe("lo.thread*lock")).
  escapeType("_acquireLock") => predType([tipe("lo.thread*lock"),tipe("lo.core*float")]).
  escapeType("_waitLock") => predType([tipe("lo.thread*lock"),tipe("lo.core*float")]).
  escapeType("_releaseLock") => predType([tipe("lo.thread*lock")]).
  escapeType("_ins_debug") => predType([]).
  escapeType("_stackTrace") => predType([]).

  public isEscape:(string,logical){}.
  isEscape("_exit",true).
  isEscape("_command_line",false).
  isEscape("_command_opts",false).
  isEscape("_unify",false).
  isEscape("_identical",false).
  isEscape("var",false).
  isEscape("ground",false).
  isEscape("_call",true).
  isEscape("_defined",false).
  isEscape("_int_plus",false).
  isEscape("_int_minus",false).
  isEscape("_int_times",false).
  isEscape("_int_div",false).
  isEscape("_int_mod",false).
  isEscape("_flt_plus",false).
  isEscape("_flt_minus",false).
  isEscape("_flt_times",false).
  isEscape("_flt_div",false).
  isEscape("_flt_mod",false).
  isEscape("_int_abs",false).
  isEscape("_flt_abs",false).
  isEscape("_int_lt",false).
  isEscape("_int_ge",false).
  isEscape("_flt_lt",false).
  isEscape("_flt_ge",false).
  isEscape("_int2flt",false).
  isEscape("_flt2int",false).
  isEscape("_flt_hash",false).
  isEscape("_pwr",false).
  isEscape("sqrt",false).
  isEscape("exp",false).
  isEscape("log",false).
  isEscape("log10",false).
  isEscape("pi",false).
  isEscape("sin",false).
  isEscape("cos",false).
  isEscape("tan",false).
  isEscape("asin",false).
  isEscape("acos",false).
  isEscape("atan",false).
  isEscape("trunc",false).
  isEscape("floor",false).
  isEscape("ceil",false).
  isEscape("integral",false).
  isEscape("srand",false).
  isEscape("rand",false).
  isEscape("irand",false).
  isEscape("_ldexp",false).
  isEscape("_frexp",false).
  isEscape("_modf",false).
  isEscape("_band",false).
  isEscape("_bor",false).
  isEscape("_bxor",false).
  isEscape("_blsl",false).
  isEscape("_blsr",false).
  isEscape("_basr",false).
  isEscape("_bnot",false).
  isEscape("_nthb",false).
  isEscape("_suspend",true).
  isEscape("_get_file",true).
  isEscape("_put_file",true).
  isEscape("_cwd",true).
  isEscape("_cd",true).
  isEscape("_rm",true).
  isEscape("_mv",true).
  isEscape("_mkdir",true).
  isEscape("_rmdir",true).
  isEscape("_isdir",true).
  isEscape("_chmod",true).
  isEscape("_ls",true).
  isEscape("_file_mode",true).
  isEscape("_file_present",true).
  isEscape("_file_type",true).
  isEscape("_file_size",true).
  isEscape("_file_modified",true).
  isEscape("_file_date",true).
  isEscape("_openInFile",true).
  isEscape("_openOutFile",true).
  isEscape("_openAppendFile",true).
  isEscape("_openAppendIOFile",true).
  isEscape("_popen",true).
  isEscape("_close",true).
  isEscape("_end_of_file",true).
  isEscape("_ready",true).
  isEscape("_inchars",true).
  isEscape("_inbytes",true).
  isEscape("_inchar",true).
  isEscape("_inbyte",true).
  isEscape("_inline",true).
  isEscape("_intext",true).
  isEscape("_outch",true).
  isEscape("_outbyte",true).
  isEscape("_outbytes",true).
  isEscape("_outtext",true).
  isEscape("_stdfile",true).
  isEscape("_fposition",true).
  isEscape("_fseek",true).
  isEscape("_flush",true).
  isEscape("_flushall",true).
  isEscape("_setfileencoding",true).
  isEscape("_install_pkg",true).
  isEscape("_pkg_is_present",true).
  isEscape("_logmsg",true).
  isEscape("_connect",true).
  isEscape("_listen",true).
  isEscape("_accept",true).
  isEscape("_udpPort",true).
  isEscape("_udpGet",true).
  isEscape("_udpSend",true).
  isEscape("_udpClose",true).
  isEscape("hosttoip",false).
  isEscape("iptohost",false).
  isEscape("_delay",true).
  isEscape("_sleep",true).
  isEscape("_now",true).
  isEscape("_today",true).
  isEscape("_ticks",true).
  isEscape("_time2date",false).
  isEscape("_time2utc",false).
  isEscape("_date2time",false).
  isEscape("_utc2time",false).
  isEscape("_isCcChar",false).
  isEscape("_isCfChar",false).
  isEscape("_isCnChar",false).
  isEscape("_isCoChar",false).
  isEscape("_isCsChar",false).
  isEscape("_isLlChar",false).
  isEscape("_isLmChar",false).
  isEscape("_isLoChar",false).
  isEscape("_isLtChar",false).
  isEscape("_isLuChar",false).
  isEscape("_isMcChar",false).
  isEscape("_isMeChar",false).
  isEscape("_isMnChar",false).
  isEscape("_isNdChar",false).
  isEscape("_isNlChar",false).
  isEscape("_isNoChar",false).
  isEscape("_isPcChar",false).
  isEscape("_isPdChar",false).
  isEscape("_isPeChar",false).
  isEscape("_isPfChar",false).
  isEscape("_isPiChar",false).
  isEscape("_isPoChar",false).
  isEscape("_isPsChar",false).
  isEscape("_isScChar",false).
  isEscape("_isSkChar",false).
  isEscape("_isSmChar",false).
  isEscape("_isSoChar",false).
  isEscape("_isZlChar",false).
  isEscape("_isZpChar",false).
  isEscape("_isZsChar",false).
  isEscape("_isLetterChar",false).
  isEscape("_digitCode",false).
  isEscape("_int2str",false).
  isEscape("_flt2str",false).
  isEscape("_int_format",false).
  isEscape("_flt_format",false).
  isEscape("_str2flt",false).
  isEscape("_str2int",false).
  isEscape("_str_lt",false).
  isEscape("_str_ge",false).
  isEscape("_str_hash",false).
  isEscape("_str_len",false).
  isEscape("_str_gen",false).
  isEscape("_stringOf",false).
  isEscape("_trim",false).
  isEscape("explode",false).
  isEscape("implode",false).
  isEscape("_str_find",false).
  isEscape("_sub_str",false).
  isEscape("_str_split",false).
  isEscape("_str_concat",false).
  isEscape("_str_start",false).
  isEscape("_str_multicat",false).
  isEscape("getenv",true).
  isEscape("setenv",true).
  isEscape("envir",false).
  isEscape("getlogin",false).
  isEscape("_fork",true).
  isEscape("_thread",true).
  isEscape("kill",true).
  isEscape("thread_state",true).
  isEscape("waitfor",true).
  isEscape("_shell",true).
  isEscape("_newLock",true).
  isEscape("_acquireLock",true).
  isEscape("_waitLock",true).
  isEscape("_releaseLock",true).
  isEscape("_ins_debug",true).
  isEscape("_stackTrace",true).

  public escCode:(string)=>integer.
  escCode("_exit") => 0.
  escCode("_command_line") => 1.
  escCode("_command_opts") => 2.
  escCode("_unify") => 3.
  escCode("_identical") => 4.
  escCode("var") => 5.
  escCode("ground") => 6.
  escCode("_call") => 7.
  escCode("_defined") => 8.
  escCode("_int_plus") => 9.
  escCode("_int_minus") => 10.
  escCode("_int_times") => 11.
  escCode("_int_div") => 12.
  escCode("_int_mod") => 13.
  escCode("_flt_plus") => 14.
  escCode("_flt_minus") => 15.
  escCode("_flt_times") => 16.
  escCode("_flt_div") => 17.
  escCode("_flt_mod") => 18.
  escCode("_int_abs") => 19.
  escCode("_flt_abs") => 20.
  escCode("_int_lt") => 21.
  escCode("_int_ge") => 22.
  escCode("_flt_lt") => 23.
  escCode("_flt_ge") => 24.
  escCode("_int2flt") => 25.
  escCode("_flt2int") => 26.
  escCode("_flt_hash") => 27.
  escCode("_pwr") => 28.
  escCode("sqrt") => 29.
  escCode("exp") => 30.
  escCode("log") => 31.
  escCode("log10") => 32.
  escCode("pi") => 33.
  escCode("sin") => 34.
  escCode("cos") => 35.
  escCode("tan") => 36.
  escCode("asin") => 37.
  escCode("acos") => 38.
  escCode("atan") => 39.
  escCode("trunc") => 40.
  escCode("floor") => 41.
  escCode("ceil") => 42.
  escCode("integral") => 43.
  escCode("srand") => 44.
  escCode("rand") => 45.
  escCode("irand") => 46.
  escCode("_ldexp") => 47.
  escCode("_frexp") => 48.
  escCode("_modf") => 49.
  escCode("_band") => 50.
  escCode("_bor") => 51.
  escCode("_bxor") => 52.
  escCode("_blsl") => 53.
  escCode("_blsr") => 54.
  escCode("_basr") => 55.
  escCode("_bnot") => 56.
  escCode("_nthb") => 57.
  escCode("_suspend") => 58.
  escCode("_get_file") => 59.
  escCode("_put_file") => 60.
  escCode("_cwd") => 61.
  escCode("_cd") => 62.
  escCode("_rm") => 63.
  escCode("_mv") => 64.
  escCode("_mkdir") => 65.
  escCode("_rmdir") => 66.
  escCode("_isdir") => 67.
  escCode("_chmod") => 68.
  escCode("_ls") => 69.
  escCode("_file_mode") => 70.
  escCode("_file_present") => 71.
  escCode("_file_type") => 72.
  escCode("_file_size") => 73.
  escCode("_file_modified") => 74.
  escCode("_file_date") => 75.
  escCode("_openInFile") => 76.
  escCode("_openOutFile") => 77.
  escCode("_openAppendFile") => 78.
  escCode("_openAppendIOFile") => 79.
  escCode("_popen") => 80.
  escCode("_close") => 81.
  escCode("_end_of_file") => 82.
  escCode("_ready") => 83.
  escCode("_inchars") => 84.
  escCode("_inbytes") => 85.
  escCode("_inchar") => 86.
  escCode("_inbyte") => 87.
  escCode("_inline") => 88.
  escCode("_intext") => 89.
  escCode("_outch") => 90.
  escCode("_outbyte") => 91.
  escCode("_outbytes") => 92.
  escCode("_outtext") => 93.
  escCode("_stdfile") => 94.
  escCode("_fposition") => 95.
  escCode("_fseek") => 96.
  escCode("_flush") => 97.
  escCode("_flushall") => 98.
  escCode("_setfileencoding") => 99.
  escCode("_install_pkg") => 100.
  escCode("_pkg_is_present") => 101.
  escCode("_logmsg") => 102.
  escCode("_connect") => 103.
  escCode("_listen") => 104.
  escCode("_accept") => 105.
  escCode("_udpPort") => 106.
  escCode("_udpGet") => 107.
  escCode("_udpSend") => 108.
  escCode("_udpClose") => 109.
  escCode("hosttoip") => 110.
  escCode("iptohost") => 111.
  escCode("_delay") => 112.
  escCode("_sleep") => 113.
  escCode("_now") => 114.
  escCode("_today") => 115.
  escCode("_ticks") => 116.
  escCode("_time2date") => 117.
  escCode("_time2utc") => 118.
  escCode("_date2time") => 119.
  escCode("_utc2time") => 120.
  escCode("_isCcChar") => 121.
  escCode("_isCfChar") => 122.
  escCode("_isCnChar") => 123.
  escCode("_isCoChar") => 124.
  escCode("_isCsChar") => 125.
  escCode("_isLlChar") => 126.
  escCode("_isLmChar") => 127.
  escCode("_isLoChar") => 128.
  escCode("_isLtChar") => 129.
  escCode("_isLuChar") => 130.
  escCode("_isMcChar") => 131.
  escCode("_isMeChar") => 132.
  escCode("_isMnChar") => 133.
  escCode("_isNdChar") => 134.
  escCode("_isNlChar") => 135.
  escCode("_isNoChar") => 136.
  escCode("_isPcChar") => 137.
  escCode("_isPdChar") => 138.
  escCode("_isPeChar") => 139.
  escCode("_isPfChar") => 140.
  escCode("_isPiChar") => 141.
  escCode("_isPoChar") => 142.
  escCode("_isPsChar") => 143.
  escCode("_isScChar") => 144.
  escCode("_isSkChar") => 145.
  escCode("_isSmChar") => 146.
  escCode("_isSoChar") => 147.
  escCode("_isZlChar") => 148.
  escCode("_isZpChar") => 149.
  escCode("_isZsChar") => 150.
  escCode("_isLetterChar") => 151.
  escCode("_digitCode") => 152.
  escCode("_int2str") => 153.
  escCode("_flt2str") => 154.
  escCode("_int_format") => 155.
  escCode("_flt_format") => 156.
  escCode("_str2flt") => 157.
  escCode("_str2int") => 158.
  escCode("_str_lt") => 159.
  escCode("_str_ge") => 160.
  escCode("_str_hash") => 161.
  escCode("_str_len") => 162.
  escCode("_str_gen") => 163.
  escCode("_stringOf") => 164.
  escCode("_trim") => 165.
  escCode("explode") => 166.
  escCode("implode") => 167.
  escCode("_str_find") => 168.
  escCode("_sub_str") => 169.
  escCode("_str_split") => 170.
  escCode("_str_concat") => 171.
  escCode("_str_start") => 172.
  escCode("_str_multicat") => 173.
  escCode("getenv") => 174.
  escCode("setenv") => 175.
  escCode("envir") => 176.
  escCode("getlogin") => 177.
  escCode("_fork") => 178.
  escCode("_thread") => 179.
  escCode("kill") => 180.
  escCode("thread_state") => 181.
  escCode("waitfor") => 182.
  escCode("_shell") => 183.
  escCode("_newLock") => 184.
  escCode("_acquireLock") => 185.
  escCode("_waitLock") => 186.
  escCode("_releaseLock") => 187.
  escCode("_ins_debug") => 188.
  escCode("_stackTrace") => 189.

}.

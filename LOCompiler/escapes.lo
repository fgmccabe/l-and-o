/* Automatically generated, do not edit */

lo.comp.escapes{

  import lo.
  import lo.comp.types.

  public escapeType:(string)=>tipe.
  escapeType("_exit") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_command_line") => funType(tupleType([]),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])).
  escapeType("_command_opts") => funType(tupleType([]),typeExp(tpFun("lo.core*list",1),[tupleType([tipe("lo.core*string"),tipe("lo.core*string")])])).
  escapeType("_unify") => univType(kVar("t"),predType(tupleType([kVar("t"),kVar("t")]))).
  escapeType("_identical") => univType(kVar("t"),predType(tupleType([kVar("t"),kVar("t")]))).
  escapeType("var") => univType(kVar("t"),predType(tupleType([kVar("t")]))).
  escapeType("ground") => univType(kVar("t"),predType(tupleType([kVar("t")]))).
  escapeType("_int_plus") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_int_minus") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_int_times") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_int_div") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_int_mod") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_flt_plus") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_flt_minus") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_flt_times") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_flt_div") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_flt_mod") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_int_abs") => funType(tupleType([tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_flt_abs") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_int_lt") => predType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")])).
  escapeType("_int_ge") => predType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")])).
  escapeType("_flt_lt") => predType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")])).
  escapeType("_flt_ge") => predType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")])).
  escapeType("_int2flt") => funType(tupleType([tipe("lo.core*integer")]),tipe("lo.core*float")).
  escapeType("_flt2int") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*integer")).
  escapeType("_flt_hash") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*integer")).
  escapeType("_pwr") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("sqrt") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("exp") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("log") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("log10") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("pi") => funType(tupleType([]),tipe("lo.core*float")).
  escapeType("sin") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("cos") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("tan") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("asin") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("acos") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("atan") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("trunc") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("floor") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("ceil") => funType(tupleType([tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("integral") => predType(tupleType([tipe("lo.core*float")])).
  escapeType("srand") => predType(tupleType([tipe("lo.core*float")])).
  escapeType("rand") => funType(tupleType([]),tipe("lo.core*float")).
  escapeType("irand") => funType(tupleType([tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_ldexp") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*float")]),tipe("lo.core*float")).
  escapeType("_frexp") => predType(tupleType([tipe("lo.core*float"),tipe("lo.core*float"),tipe("lo.core*integer")])).
  escapeType("_modf") => predType(tupleType([tipe("lo.core*float"),tipe("lo.core*float"),tipe("lo.core*float")])).
  escapeType("_band") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_bor") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_bxor") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_blsl") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_blsr") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_basr") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_bnot") => funType(tupleType([tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_nthb") => predType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer")])).
  escapeType("_get_file") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*string")).
  escapeType("_put_file") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")])).
  escapeType("_cwd") => funType(tupleType([]),tipe("lo.core*string")).
  escapeType("_cd") => predType(tupleType([tipe("lo.core*string")])).
  escapeType("_rm") => predType(tupleType([tipe("lo.core*string")])).
  escapeType("_mv") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")])).
  escapeType("_mkdir") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")])).
  escapeType("_rmdir") => predType(tupleType([tipe("lo.core*string")])).
  escapeType("_chmod") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")])).
  escapeType("_ls") => funType(tupleType([tipe("lo.core*string")]),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*string")])).
  escapeType("_file_mode") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*integer")).
  escapeType("_file_present") => predType(tupleType([tipe("lo.core*string")])).
  escapeType("_file_type") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*integer")).
  escapeType("_file_size") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*integer")).
  escapeType("_file_modified") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*float")).
  escapeType("_file_date") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer")])).
  escapeType("_openInFile") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")]),tipe("lo.io#file")).
  escapeType("_openOutFile") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")]),tipe("lo.io#file")).
  escapeType("_openAppendFile") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")]),tipe("lo.io#file")).
  escapeType("_openAppendIOFile") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")]),tipe("lo.io#file")).
  escapeType("_close") => predType(tupleType([tipe("lo.io#file")])).
  escapeType("_end_of_file") => predType(tupleType([tipe("lo.io#file")])).
  escapeType("_ready") => predType(tupleType([tipe("lo.io#file")])).
  escapeType("_inchars") => funType(tupleType([tipe("lo.io#file"),tipe("lo.core*integer")]),tipe("lo.core*string")).
  escapeType("_inbytes") => funType(tupleType([tipe("lo.io#file"),tipe("lo.core*integer")]),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])).
  escapeType("_inchar") => funType(tupleType([tipe("lo.io#file")]),tipe("lo.core*integer")).
  escapeType("_inbyte") => funType(tupleType([tipe("lo.io#file")]),tipe("lo.core*integer")).
  escapeType("_inline") => funType(tupleType([tipe("lo.io#file"),tipe("lo.core*string")]),tipe("lo.core*string")).
  escapeType("_intext") => funType(tupleType([tipe("lo.io#file"),tipe("lo.core*string")]),tipe("lo.core*string")).
  escapeType("_outch") => predType(tupleType([tipe("lo.io#file"),tipe("lo.core*integer")])).
  escapeType("_outbyte") => predType(tupleType([tipe("lo.io#file"),tipe("lo.core*integer")])).
  escapeType("_outtext") => predType(tupleType([tipe("lo.io#file"),tipe("lo.core*string")])).
  escapeType("_stdfile") => funType(tupleType([tipe("lo.core*integer")]),tipe("lo.io#file")).
  escapeType("_fposition") => funType(tupleType([tipe("lo.io#file")]),tipe("lo.core*integer")).
  escapeType("_fseek") => predType(tupleType([tipe("lo.io#file"),tipe("lo.core*integer")])).
  escapeType("_flush") => predType(tupleType([tipe("lo.io#file")])).
  escapeType("_flushall") => predType(tupleType([])).
  escapeType("_setfileencoding") => predType(tupleType([tipe("lo.io#file"),tipe("lo.core*integer")])).
  escapeType("_ensure_loaded") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")])).
  escapeType("_logmsg") => predType(tupleType([tipe("lo.core*string")])).
  escapeType("delay") => predType(tupleType([tipe("lo.core*float")])).
  escapeType("sleep") => predType(tupleType([tipe("lo.core*float")])).
  escapeType("now") => funType(tupleType([]),tipe("lo.core*float")).
  escapeType("today") => funType(tupleType([]),tipe("lo.core*integer")).
  escapeType("ticks") => funType(tupleType([]),tipe("lo.core*float")).
  escapeType("_isCcChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isCfChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isCnChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isCoChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isCsChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isLlChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isLmChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isLoChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isLtChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isLuChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isMcChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isMeChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isMnChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isNdChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isNlChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isNoChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPcChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPdChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPeChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPfChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPiChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPoChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isPsChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isScChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isSkChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isSmChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isSoChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isZlChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isZpChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isZsChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_isLetterChar") => predType(tupleType([tipe("lo.core*integer")])).
  escapeType("_digitCode") => funType(tupleType([tipe("lo.core*integer")]),tipe("lo.core*integer")).
  escapeType("_int2str") => funType(tupleType([tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*string")).
  escapeType("_flt2str") => funType(tupleType([tipe("lo.core*float"),tipe("lo.core*integer"),tipe("lo.core*integer"),tipe("lo.core*logical"),tipe("lo.core*logical")]),tipe("lo.core*string")).
  escapeType("_str2flt") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*float")).
  escapeType("_str_lt") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")])).
  escapeType("_str_ge") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")])).
  escapeType("_str_hash") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*integer")).
  escapeType("_str_len") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*integer")).
  escapeType("_str_gen") => funType(tupleType([tipe("lo.core*string")]),tipe("lo.core*string")).
  escapeType("_stringOf") => univType(kVar("t"),funType(tupleType([kVar("t"),tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*string"))).
  escapeType("_trim") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer")]),tipe("lo.core*string")).
  escapeType("explode") => funType(tupleType([tipe("lo.core*string")]),typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])).
  escapeType("implode") => funType(tupleType([typeExp(tpFun("lo.core*list",1),[tipe("lo.core*integer")])]),tipe("lo.core*string")).
  escapeType("_str_find") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer")])).
  escapeType("_sub_str") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*integer")]),tipe("lo.core*string")).
  escapeType("_str_split") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*integer"),tipe("lo.core*string"),tipe("lo.core*string")])).
  escapeType("_str_concat") => funType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")]),tipe("lo.core*string")).
  escapeType("_str_start") => predType(tupleType([tipe("lo.core*string"),tipe("lo.core*string")])).

  public isEscape:(string){}.
  isEscape("_exit").
  isEscape("_command_line").
  isEscape("_command_opts").
  isEscape("_unify").
  isEscape("_identical").
  isEscape("var").
  isEscape("ground").
  isEscape("_int_plus").
  isEscape("_int_minus").
  isEscape("_int_times").
  isEscape("_int_div").
  isEscape("_int_mod").
  isEscape("_flt_plus").
  isEscape("_flt_minus").
  isEscape("_flt_times").
  isEscape("_flt_div").
  isEscape("_flt_mod").
  isEscape("_int_abs").
  isEscape("_flt_abs").
  isEscape("_int_lt").
  isEscape("_int_ge").
  isEscape("_flt_lt").
  isEscape("_flt_ge").
  isEscape("_int2flt").
  isEscape("_flt2int").
  isEscape("_flt_hash").
  isEscape("_pwr").
  isEscape("sqrt").
  isEscape("exp").
  isEscape("log").
  isEscape("log10").
  isEscape("pi").
  isEscape("sin").
  isEscape("cos").
  isEscape("tan").
  isEscape("asin").
  isEscape("acos").
  isEscape("atan").
  isEscape("trunc").
  isEscape("floor").
  isEscape("ceil").
  isEscape("integral").
  isEscape("srand").
  isEscape("rand").
  isEscape("irand").
  isEscape("_ldexp").
  isEscape("_frexp").
  isEscape("_modf").
  isEscape("_band").
  isEscape("_bor").
  isEscape("_bxor").
  isEscape("_blsl").
  isEscape("_blsr").
  isEscape("_basr").
  isEscape("_bnot").
  isEscape("_nthb").
  isEscape("_get_file").
  isEscape("_put_file").
  isEscape("_cwd").
  isEscape("_cd").
  isEscape("_rm").
  isEscape("_mv").
  isEscape("_mkdir").
  isEscape("_rmdir").
  isEscape("_chmod").
  isEscape("_ls").
  isEscape("_file_mode").
  isEscape("_file_present").
  isEscape("_file_type").
  isEscape("_file_size").
  isEscape("_file_modified").
  isEscape("_file_date").
  isEscape("_openInFile").
  isEscape("_openOutFile").
  isEscape("_openAppendFile").
  isEscape("_openAppendIOFile").
  isEscape("_close").
  isEscape("_end_of_file").
  isEscape("_ready").
  isEscape("_inchars").
  isEscape("_inbytes").
  isEscape("_inchar").
  isEscape("_inbyte").
  isEscape("_inline").
  isEscape("_intext").
  isEscape("_outch").
  isEscape("_outbyte").
  isEscape("_outtext").
  isEscape("_stdfile").
  isEscape("_fposition").
  isEscape("_fseek").
  isEscape("_flush").
  isEscape("_flushall").
  isEscape("_setfileencoding").
  isEscape("_ensure_loaded").
  isEscape("_logmsg").
  isEscape("delay").
  isEscape("sleep").
  isEscape("now").
  isEscape("today").
  isEscape("ticks").
  isEscape("_isCcChar").
  isEscape("_isCfChar").
  isEscape("_isCnChar").
  isEscape("_isCoChar").
  isEscape("_isCsChar").
  isEscape("_isLlChar").
  isEscape("_isLmChar").
  isEscape("_isLoChar").
  isEscape("_isLtChar").
  isEscape("_isLuChar").
  isEscape("_isMcChar").
  isEscape("_isMeChar").
  isEscape("_isMnChar").
  isEscape("_isNdChar").
  isEscape("_isNlChar").
  isEscape("_isNoChar").
  isEscape("_isPcChar").
  isEscape("_isPdChar").
  isEscape("_isPeChar").
  isEscape("_isPfChar").
  isEscape("_isPiChar").
  isEscape("_isPoChar").
  isEscape("_isPsChar").
  isEscape("_isScChar").
  isEscape("_isSkChar").
  isEscape("_isSmChar").
  isEscape("_isSoChar").
  isEscape("_isZlChar").
  isEscape("_isZpChar").
  isEscape("_isZsChar").
  isEscape("_isLetterChar").
  isEscape("_digitCode").
  isEscape("_int2str").
  isEscape("_flt2str").
  isEscape("_str2flt").
  isEscape("_str_lt").
  isEscape("_str_ge").
  isEscape("_str_hash").
  isEscape("_str_len").
  isEscape("_str_gen").
  isEscape("_stringOf").
  isEscape("_trim").
  isEscape("explode").
  isEscape("implode").
  isEscape("_str_find").
  isEscape("_sub_str").
  isEscape("_str_split").
  isEscape("_str_concat").
  isEscape("_str_start").

  public escCode:(string)=>integer.
  escCode("_exit") => 0.
  escCode("_command_line") => 1.
  escCode("_command_opts") => 2.
  escCode("_unify") => 3.
  escCode("_identical") => 4.
  escCode("var") => 5.
  escCode("ground") => 6.
  escCode("_int_plus") => 7.
  escCode("_int_minus") => 8.
  escCode("_int_times") => 9.
  escCode("_int_div") => 10.
  escCode("_int_mod") => 11.
  escCode("_flt_plus") => 12.
  escCode("_flt_minus") => 13.
  escCode("_flt_times") => 14.
  escCode("_flt_div") => 15.
  escCode("_flt_mod") => 16.
  escCode("_int_abs") => 17.
  escCode("_flt_abs") => 18.
  escCode("_int_lt") => 19.
  escCode("_int_ge") => 20.
  escCode("_flt_lt") => 21.
  escCode("_flt_ge") => 22.
  escCode("_int2flt") => 23.
  escCode("_flt2int") => 24.
  escCode("_flt_hash") => 25.
  escCode("_pwr") => 26.
  escCode("sqrt") => 27.
  escCode("exp") => 28.
  escCode("log") => 29.
  escCode("log10") => 30.
  escCode("pi") => 31.
  escCode("sin") => 32.
  escCode("cos") => 33.
  escCode("tan") => 34.
  escCode("asin") => 35.
  escCode("acos") => 36.
  escCode("atan") => 37.
  escCode("trunc") => 38.
  escCode("floor") => 39.
  escCode("ceil") => 40.
  escCode("integral") => 41.
  escCode("srand") => 42.
  escCode("rand") => 43.
  escCode("irand") => 44.
  escCode("_ldexp") => 45.
  escCode("_frexp") => 46.
  escCode("_modf") => 47.
  escCode("_band") => 48.
  escCode("_bor") => 49.
  escCode("_bxor") => 50.
  escCode("_blsl") => 51.
  escCode("_blsr") => 52.
  escCode("_basr") => 53.
  escCode("_bnot") => 54.
  escCode("_nthb") => 55.
  escCode("_get_file") => 56.
  escCode("_put_file") => 57.
  escCode("_cwd") => 58.
  escCode("_cd") => 59.
  escCode("_rm") => 60.
  escCode("_mv") => 61.
  escCode("_mkdir") => 62.
  escCode("_rmdir") => 63.
  escCode("_chmod") => 64.
  escCode("_ls") => 65.
  escCode("_file_mode") => 66.
  escCode("_file_present") => 67.
  escCode("_file_type") => 68.
  escCode("_file_size") => 69.
  escCode("_file_modified") => 70.
  escCode("_file_date") => 71.
  escCode("_openInFile") => 72.
  escCode("_openOutFile") => 73.
  escCode("_openAppendFile") => 74.
  escCode("_openAppendIOFile") => 75.
  escCode("_close") => 76.
  escCode("_end_of_file") => 77.
  escCode("_ready") => 78.
  escCode("_inchars") => 79.
  escCode("_inbytes") => 80.
  escCode("_inchar") => 81.
  escCode("_inbyte") => 82.
  escCode("_inline") => 83.
  escCode("_intext") => 84.
  escCode("_outch") => 85.
  escCode("_outbyte") => 86.
  escCode("_outtext") => 87.
  escCode("_stdfile") => 88.
  escCode("_fposition") => 89.
  escCode("_fseek") => 90.
  escCode("_flush") => 91.
  escCode("_flushall") => 92.
  escCode("_setfileencoding") => 93.
  escCode("_ensure_loaded") => 94.
  escCode("_logmsg") => 95.
  escCode("delay") => 96.
  escCode("sleep") => 97.
  escCode("now") => 98.
  escCode("today") => 99.
  escCode("ticks") => 100.
  escCode("_isCcChar") => 101.
  escCode("_isCfChar") => 102.
  escCode("_isCnChar") => 103.
  escCode("_isCoChar") => 104.
  escCode("_isCsChar") => 105.
  escCode("_isLlChar") => 106.
  escCode("_isLmChar") => 107.
  escCode("_isLoChar") => 108.
  escCode("_isLtChar") => 109.
  escCode("_isLuChar") => 110.
  escCode("_isMcChar") => 111.
  escCode("_isMeChar") => 112.
  escCode("_isMnChar") => 113.
  escCode("_isNdChar") => 114.
  escCode("_isNlChar") => 115.
  escCode("_isNoChar") => 116.
  escCode("_isPcChar") => 117.
  escCode("_isPdChar") => 118.
  escCode("_isPeChar") => 119.
  escCode("_isPfChar") => 120.
  escCode("_isPiChar") => 121.
  escCode("_isPoChar") => 122.
  escCode("_isPsChar") => 123.
  escCode("_isScChar") => 124.
  escCode("_isSkChar") => 125.
  escCode("_isSmChar") => 126.
  escCode("_isSoChar") => 127.
  escCode("_isZlChar") => 128.
  escCode("_isZpChar") => 129.
  escCode("_isZsChar") => 130.
  escCode("_isLetterChar") => 131.
  escCode("_digitCode") => 132.
  escCode("_int2str") => 133.
  escCode("_flt2str") => 134.
  escCode("_str2flt") => 135.
  escCode("_str_lt") => 136.
  escCode("_str_ge") => 137.
  escCode("_str_hash") => 138.
  escCode("_str_len") => 139.
  escCode("_str_gen") => 140.
  escCode("_stringOf") => 141.
  escCode("_trim") => 142.
  escCode("explode") => 143.
  escCode("implode") => 144.
  escCode("_str_find") => 145.
  escCode("_sub_str") => 146.
  escCode("_str_split") => 147.
  escCode("_str_concat") => 148.
  escCode("_str_start") => 149.

}.

lo.comp.resolve{
  import lo.
  import lo.comp.location.
  import lo.comp.package.
  import lo.comp.misc.
  import lo.comp.errors.
  import lo.comp.types.
  import lo.comp.freshen.
  import lo.comp.canon.
  import lo.comp.unify.

  public overload:(list[canonDef],list[implEntry],list[implEntry],list[canonDef],report,report){}.
  overload(Defs,Dict,RDict,overloadDefs(Defs,RDict,Rp,Rpx),Rp,Rpx) :-
    declareImplementations(Defs,Dict,RDict).

  overloadDefs:(list[canonDef],list[implEntry],report,report) => list[canonDef].
  overloadDefs([],_,Rp,Rp) => [].
  overloadDefs([Df,..L],Dc,Rp,Rpx) => [overloadDef(Df,Dc,Rp,Rp0),..overloadDefs(L,Dc,Rp0,Rpx)].

  overloadDef:(canonDef,list[implEntry],report,report) => canonDef.
  overloadDef(funDef(Lc,Nm,Tp,Cx,Eqns),Dict,Rp,Rpx) => overloadFunction(Lc,Nm,Tp,Cx,Eqns,Dict,Rp,Rpx).
  overloadDef(relDef(Lc,Nm,Tp,Cx,Cls),Dict,Rp,Rpx) => overloadPredicate(Lc,Nm,Tp,Cx,Cls,Dict,Rp,Rpx).
  overloadDef(varDef(Lc,Nm,Tp,Cx,Value,Cond),Dict,Rp,Rpx) => overloadDefn(Lc,Nm,Tp,Cx,Value,Cond,Dict,Rp,Rpx).
  overloadDef(classDef(Lc,Nm,Tp,Cx,Rules,Face),Dict,Rp,Rpx) => overloadClass(Lc,Nm,Tp,Cx,Rules,Face,Dict,Rp,Rpx).
  overloadDef(grammDef(Lc,Nm,Tp,Cx,Rules),Dict,Rp,Rpx) => overloadGrammar(Lc,Nm,Tp,Cx,Rules,Dict,Rp,Rpx).
  overloadDef(T,_,Rp,Rp) => T :-
    T = typeDef(_,_,_,_).
  overloadDef(C,_,Rp,Rp) => C :-
    C = cnDefn(_,_,_).
  overloadDef(implDef(Lc,INm,ImplName,Spec,Cx,Hd,Th,Face),Dict,Rp,Rpx) =>
      overloadImplementation(Lc,INm,ImplName,Spec,Cx,Hd,Th,Face,Dict,Rp,Rpx).

  private overloadFunction:(location,string,tipe,list[constraint],list[canonRule],list[implEntry],report,report)=>canonDef.
  overloadFunction(Lc,Nm,Tp,[],Eqns,Dict,Rp,Rpx) => funDef(Lc,Nm,Tp,[],overloadRules(Eqns,Dict,[],Rp,Rpx)).
  overloadFunction(Lc,Nm,Tp,Cx,Eqns,Dict,Rp,Rpx) => funDef(Lc,Nm,Tp,[],overloadRules(Eqns,FDict,CVars,Rp,Rpx)) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict).

  private overloadPredicate:(location,string,tipe,list[constraint],list[canonRule],list[implEntry],report,report)=>canonDef.
  overloadPredicate(Lc,Nm,Tp,[],Cls,Dict,Rp,Rpx) => relDef(Lc,Nm,Tp,[],overloadRules(Cls,Dict,[],Rp,Rpx)).
  overloadPredicate(Lc,Nm,Tp,Cx,Cls,Dict,Rp,Rpx) => relDef(Lc,Nm,Tp,[],overloadRules(Cls,FDict,CVars,Rp,Rpx)) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict).

  private overloadDefn:(location,string,tipe,list[constraint],canonTerm,canonCond,list[implEntry],report,report) => canonDef.
  overloadDefn(Lc,Nm,Tp,[],Exp,Cond,Dict,Rp,Rpx) => varDef(Lc,Nm,Tp,[],RExp,RCond) :-
    RCond = resolveCond(Cond,Dict,Rp,Rp0),
    RExp = resolveTerm(Exp,Dict,Rp0,Rpx).
  overloadDefn(Lc,Nm,Tp,Cx,Exp,Cond,Dict,Rp,Rpx) => varDef(Lc,Nm,Tp,[],lambda(equation(Lc,Nm,tpl(CVars),RExp,trueCond)),RCond) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict),
    RCond = resolveCond(Cond,FDict,Rp,Rp0),
    RExp = resolveTerm(Exp,FDict,Rp0,Rpx).

  private overloadGrammar:(location,string,tipe,list[constraint],list[canonRule],list[implEntry],report,report) => canonDef.
  overloadGrammar(Lc,Nm,Tp,[],Rules,Dict,Rp,Rpx) => grammDef(Lc,Nm,Tp,[],overloadRules(Rules,Dict,[],Rp,Rpx)).
  overloadGrammar(Lc,Nm,Tp,Cx,Rules,Dict,Rp,Rpx) => grammDef(Lc,Nm,Tp,[],overloadRules(Rules,FDict,CVars,Rp,Rpx)) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict).

  private overloadClass:(location,string,tipe,list[constraint],list[canonRule],tipe,list[implEntry],report,report) => canonDef.
  overloadClass(Lc,Nm,Tp,Cx,Rules,Face,Dict,Rp,Rpx) => classDef(Lc,Nm,Tp,[],overloadRules(Rules,FDict,CVars,Rp,Rpx),Face) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict).

  private overloadImplementation:(location,string,string,constraint,list[constraint],canonTerm,canonTerm,tipe,list[implEntry],report,report) => canonDef.
  overloadImplementation(Lc,INm,ImplName,Spec,Cx,Hd,Th,Face,Dict,Rp,Rpx) =>
      implDef(Lc,INm,ImplName,Spec,[],addExtra(CVars,resolveTerm(Hd,Dict,Rp,Rp0)),resolveTerm(Th,FDict,Rp0,Rpx),Face) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict).

  defineCVars:(location,list[constraint],list[implEntry],list[canonTerm],list[implEntry]){}.
  defineCVars(_,[],Dict,[],Dict).
  defineCVars(Lc,[implementsFace(_,_),..Cx],Dict,CVars,FDict) :-
    defineCVars(Lc,Cx,Dict,CVars,FDict).
  defineCVars(Lc,[Con,..Cx],Dict,[NV,..CVars],FDict) :-
    Con = conTract(_,_,_),
    ImplNm = implementationName(Con),
    NV = genVar(Lc,contractName(Con)),
    defineCVars(Lc,Cx,[implVar(ImplNm,NV),..Dict],CVars,FDict).

  private overloadRules:(list[canonRule],list[implEntry],list[canonTerm],report,report) => list[canonRule].
  overloadRules([],_,_,Rp,Rp) => [].
  overloadRules([Rl,..L],Dict,Ex,Rp,Rpx) => [overloadRule(Rl,Dict,Ex,Rp,Rp0),..overloadRules(L,Dict,Ex,Rp0,Rpx)].

  private overloadRule:(canonRule,list[implEntry],list[canonTerm],report,report) => canonRule.
  overloadRule(equation(Lc,Nm,Args,Rep,Cond),Dict,Ex,Rp,Rpx) =>
      equation(Lc,Nm,addExtra(Ex,resolveTerm(Args,Dict,Rp,Rp0)),resolveTerm(Rep,Dict,Rp0,Rp1),resolveCond(Cond,Dict,Rp1,Rpx)).
  overloadRule(clause(Lc,Nm,Args,Cond),Dict,Ex,Rp,Rpx) =>
      clause(Lc,Nm,addExtra(Ex,resolveTerm(Args,Dict,Rp,Rp0)),resolveCond(Cond,Dict,Rp0,Rpx)).
  overloadRule(grRule(Lc,Nm,Args,Hed,Body),Dict,Ex,Rp,Rpx) =>
      grRule(Lc,Nm,addExtra(Ex,resolveTerm(Args,Dict,Rp,Rp0)),resolveGr(Hed,Dict,Rp0,Rp1),resolveGr(Body,Dict,Rp1,Rpx)).
  overloadRule(clRule(Lc,Nm,Args,Repl,Cond,Tp),Dict,Ex,Rp,Rpx) =>
      clRule(Lc,Nm,addExtra(Ex,resolveTerm(Args,Dict,Rp,Rp0)),resolveTerm(Repl,Dict,Rp0,Rp1),resolveCond(Cond,Dict,Rp1,Rpx),Tp).

  addExtra:(list[canonTerm],canonTerm) => canonTerm.
  addExtra([],T) => T.
  addExtra(Ex,tpl(A)) => tpl(Ex<>A).
  addExtra(Ex,apply(Lc,Op,tpl(A))) => apply(Lc,Op,tpl(Ex<>A)).

  private resolveTerm:(canonTerm,list[implEntry],report,report) => canonTerm.
  resolveTerm(v(Lc,Nm),_,Rp,Rp) => v(Lc,Nm).
  resolveTerm(int(Ix),_,Rp,Rp) => int(Ix).
  resolveTerm(flt(Dx),_,Rp,Rp) => flt(Dx).
  resolveTerm(str(Sx),_,Rp,Rp) => str(Sx).
  resolveTerm(dot(Rc,Fld),Dict,Rp,Rpx) => dot(resolveTerm(Rc,Dict,Rp,Rpx),Fld).
  resolveTerm(tpl(Args),Dict,Rp,Rpx) => tpl(resolveTerms(Args,Dict,Rp,Rpx)).
  resolveTerm(whre(Trm,Cond),Dict,Rp,Rpx) => whre(resolveTerm(Trm,Dict,Rp,Rp0),resolveCond(Cond,Dict,Rp0,Rpx)).
  resolveTerm(condExp(Cond,Then,Else),Dict,Rp,Rpx) =>
      condExp(resolveCond(Cond,Dict,Rp,Rp0),resolveTerm(Then,Dict,Rp0,Rp1),resolveTerm(Else,Dict,Rp1,Rpx)).
  resolveTerm(apply(Lc,over(_,T,Cx),tpl(Args)),Dict,Rp,Rpx) => apply(Lc,OverOp,tpl(RArgs)) :-
    resolveContracts(Lc,Cx,Dict,DTerms,Rp,Rp0),
    overloadRef(T,DTerms,resolveTerms(Args,Dict,Rp0,Rpx),OverOp,RArgs).
  resolveTerm(apply(Lc,Op,Args),Dict,Rp,Rpx) => apply(Lc,resolveTerm(Op,Dict,Rp,Rp0),resolveTerm(Args,Dict,Rp0,Rpx)).
  resolveTerm(over(Lc,T,Cx),Dict,Rp,Rpx) => Over :-
    ( resolveContracts(Lc,Cx,Dict,DTerms,Rp,Rp0) ?
        overloadRef(T,DTerms,[],OverOp,NArgs),
        (NArgs=[] ? Over = OverOp | Over = apply(Lc,OverOp,tpl(NArgs))),
        Rp0=Rpx |
        reportError("cannot find implementation for contracts \(Cx)",Lc,Rp0,Rpx),
        Over = T).
  resolveTerm(mtd(Lc,Nm),_,Rp,Rpx) => v(Lc,Nm):-
    reportError("cannot find implementation for naked method \(Nm)",Lc,Rp,Rpx).
  resolveTerm(lambda(Rl),Dict,Rp,Rpx) => lambda(overloadRule(Rl,Dict,[],Rp,Rpx)).
  resolveTerm(theta(D,O),Dict,Rp,Rpx) => theta(overloadDefs(D,Dict,Rp,Rp0),overloadOthers(O,Dict,Rp0,Rpx)).

  resolveTerms:(list[canonTerm],list[implEntry],report,report) => list[canonTerm].
  resolveTerms([],_,Rp,Rp) => [].
  resolveTerms([t,..l],D,Rp,Rpx) => [resolveTerm(t,D,Rp,Rp0),..resolveTerms(l,D,Rp0,Rpx)].

  resolveCond:(canonCond,list[implEntry],report,report) => canonCond.
  resolveCond(trueCond,_,Rp,Rp) => trueCond.
  resolveCond(falseCond,_,Rp,Rp) => falseCond.
  resolveCond(conjCond(L,R),Dict,Rp,Rpx) => conjCond(resolveCond(L,Dict,Rp,Rp0),resolveCond(R,Dict,Rp0,Rpx)).
  resolveCond(disjCond(L,R),Dict,Rp,Rpx) => disjCond(resolveCond(L,Dict,Rp,Rp0),resolveCond(R,Dict,Rp0,Rpx)).
  resolveCond(forallCond(L,R),Dict,Rp,Rpx) => forallCond(resolveCond(L,Dict,Rp,Rp0),resolveCond(R,Dict,Rp0,Rpx)).
  resolveCond(condCond(T,L,R),Dict,Rp,Rpx) => condCond(resolveCond(T,Dict,Rp,Rp0),resolveCond(L,Dict,Rp0,Rp1),resolveCond(R,Dict,Rp1,Rpx)).
  resolveCond(oneCond(T),Dict,Rp,Rpx) => oneCond(resolveCond(T,Dict,Rp,Rpx)).
  resolveCond(negCond(T),Dict,Rp,Rpx) => negCond(resolveCond(T,Dict,Rp,Rpx)).
  resolveCond(unifyCond(Lc,L,R),Dict,Rp,Rpx) => unifyCond(Lc,resolveTerm(L,Dict,Rp,Rp0),resolveTerm(R,Dict,Rp0,Rpx)).
  resolveCond(phraseCond(Lc,T,S,R),Dict,Rp,Rpx) =>
      phraseCond(Lc,resolveGr(T,Dict,Rp,Rp0),resolveTerm(S,Dict,Rp0,Rp1),resolveTerm(R,Dict,Rp1,Rpx)).
  resolveCond(callCond(Lc,over(_,T,Cx),tpl(Args)),Dict,Rp,Rpx) => callCond(Lc,OverOp,tpl(RArgs)) :-
    resolveContracts(Lc,Cx,Dict,DTerms,Rp,Rp0),
    overloadRef(T,DTerms,resolveTerms(Args,Dict,Rp0,Rpx),OverOp,RArgs).
  resolveCond(callCond(Lc,P,A),Dict,Rp,Rpx) => callCond(Lc,resolveTerm(P,Dict,Rp,Rp0),resolveTerm(A,Dict,Rp0,Rpx)).
  resolveCond(isTrue(C),Dict,Rp,Rpx) => isTrue(resolveTerm(C,Dict,Rp,Rpx)).

  resolveGr:(canonNT,list[implEntry],report,report) => canonNT.
  resolveGr(grTerms(Terms),Dict,Rp,Rpx) => grTerms(resolveTerminals(Terms,Dict,Rp,Rpx)).
  resolveGr(grConj(L,R),Dict,Rp,Rpx) => grConj(resolveGr(L,Dict,Rp,Rp0),resolveGr(R,Dict,Rp0,Rpx)).
  resolveGr(grDisj(L,R),Dict,Rp,Rpx) => grDisj(resolveGr(L,Dict,Rp,Rp0),resolveGr(R,Dict,Rp0,Rpx)).
  resolveGr(grCond(T,L,R),Dict,Rp,Rpx) => grCond(resolveGr(T,Dict,Rp,Rp0),resolveGr(L,Dict,Rp0,Rp1),resolveGr(R,Dict,Rp1,Rpx)).
  resolveGr(grOne(T),Dict,Rp,Rpx) => grOne(resolveGr(T,Dict,Rp,Rpx)).
  resolveGr(grNeg(T),Dict,Rp,Rpx) => grNeg(resolveGr(T,Dict,Rp,Rpx)).
  resolveGr(grAhed(T),Dict,Rp,Rpx) => grAhed(resolveGr(T,Dict,Rp,Rpx)).
  resolveGr(grDip(T,C),Dict,Rp,Rpx) => grDip(resolveTerm(T,Dict,Rp,Rp0),resolveCond(C,Dict,Rp0,Rpx)).
  resolveGr(grTest(C),Dict,Rp,Rpx) => grTest(resolveCond(C,Dict,Rp,Rpx)).
  resolveGr(grCall(Lc0,over(Lc,T,Cx),tpl(Args)),Dict,Rp,Rpx) => grCall(Lc0,OverOp,tpl(NArgs)) :-
    resolveContracts(Lc,Cx,Dict,Dterms,Rp,Rp0),
    overloadRef(T,Dterms,RArgs,OverOp,NArgs),
    RArgs = resolveTerms(Args,Dict,Rp0,Rpx).
  resolveGr(grCall(Lc,Op,Args),Dict,Rp,Rpx) => grCall(Lc,resolveTerm(Op,Dict,Rp,Rp0),resolveTerm(Args,Dict,Rp,Rpx)).

  resolveTerminals:(list[(location,canonTerm,canonTerm)],list[implEntry],report,report) => list[(location,canonTerm,canonTerm)].
  resolveTerminals([],_,Rp,Rp) => [].
  resolveTerminals([(Lc,Op,T),..L],Dict,Rp,Rpx) => [(Lc,resolveTerm(Op,Dict,Rp,Rp0),resolveTerm(T,Dict,Rp0,Rp1)),..resolveTerminals(L,Dict,Rp1,Rpx)].

  overloadRef:(canonTerm,list[canonTerm],list[canonTerm],canonTerm,list[canonTerm]){}.
  overloadRef(mtd(_,Nm),[DT],RArgs,dot(DT,Nm),RArgs).
  overloadRef(v(Lc,Nm),DT,RArgs,v(Lc,Nm),DT<>RArgs).
  overloadRef(mtd(Lc,Nm),_,RArgs,v(Lc,Nm),RArgs). -- actually an error recovery step

  resolveContracts:(location,list[constraint],list[implEntry],list[canonTerm],report,report){}.
  resolveContracts(_,[],_,[],Rp,Rp).
  resolveContracts(Lc,[Con,..C],Dict,CV,Rp,Rpx) :-
    resolveContract(Lc,Con,Dict,CV,Vs,Rp,Rp0),
    resolveContracts(Lc,C,Dict,Vs,Rp0,Rpx).

  resolveContract:(location,constraint,list[implEntry],list[canonTerm],list[canonTerm],report,report){}.
  resolveContract(Lc,C,Dict,[Over,..Vs],Vs,Rp,Rpx) :-
    C = conTract(_,_,_),
    findImplementation(implementationName(C),Dict,Impl)!,
    resolve(Impl,C,Lc,Dict,Over,Rp,Rpx)!.
  resolveContract(Lc,implementsFace(_,_),Dict,Vs,Vs,Rp,Rp).
  resolveContract(Lc,C,_,Vs,Vs,Rp,Rpx) :-
    reportError("no implementation known for \(C)",Lc,Rp,Rpx).

  resolve:(implEntry,constraint,location,list[implEntry],canonTerm,report,report){}.
  resolve(implVar(_,v(Lc,Nm)),_,_,_,v(Lc,Nm),Rp,Rp).
  resolve(implEntry(ImpNm,IC),C,Lc,Dict,formOver(v(Lc,ImpNm),Lc,Args),Rp,Rpx) :-
    (_,ImpCon) = freshen(IC,[]),
    moveConConstraints(ImpCon,Cx,CT),
    sameContract(CT,C,[]),
    resolveDependents(Cx,Lc,Dict,Args,[],Rp,Rpx).
  resolve(I,C,Lc,_,v(Lc,_str_gen("void")),Rp,Rpx) :-
    reportError("cannot resolve contract \(C)",Lc,Rp,Rpx).

  resolveDependents:(list[constraint],location,list[implEntry],list[canonTerm],list[canonTerm],report,report){}.
  resolveDependents([],_,_,Args,Args,Rp,Rp).
  resolveDependents([C,..L],Lc,Dict,A,Args,Rp,Rpx) :-
    resolveContract(Lc,C,Dict,A,As,Rp,Rp0),
    resolveDependents(L,Lc,Dict,As,Args,Rp0,Rpx).

  formOver:(canonTerm,location,list[canonTerm]) => canonTerm.
  formOver(V,_,[]) => V.
  formOver(V,_,Args) => apply(Lc,V,tpl(Args)).

  genVar:(location,string) => canonTerm.
  genVar(Lc,Nm) => v(Lc,_str_gen(Nm)).

  declareImplementations:(list[canonDef],list[implEntry],list[implEntry]){}.
  declareImplementations([],Dict,Dict).
  declareImplementations([implDef(_,_,ImplName,Spec,_,_,_,_),..Defs],Dict,RDict) :-
    declareImplementations(Defs,[implEntry(ImplName,Spec),..Dict],RDict).
  declareImplementations([_,..Defs],Dict,RDict) :-
    declareImplementations(Defs,Dict,RDict).

  findImplementation:(string,list[implEntry],implEntry){}.
  findImplementation(ImplName,[I,.._],I) :- I.name=ImplName.
  findImplementation(ImplName,[_,..D],Spec) :- findImplementation(ImplName,D,Spec).

  public overloadOthers:(list[canonOther],list[implEntry],report,report) => list[canonOther].
  overloadOthers([],_,Rp,Rp) => [].
  overloadOthers([o,..l],Dict,Rp,Rpx) => [overloadOther(o,Dict,Rp,Rp0),..overloadOthers(l,Dict,Rp0,Rpx)].

  overloadOther:(canonOther,list[implEntry],report,report) => canonOther.
  overloadOther(expShow(Lc,Show),Dict,Rp,Rpx) => expShow(Lc,resolveTerm(Show,Dict,Rp,Rpx)).
  overloadOther(integrity(Lc,Cond),Dict,Rp,Rpx) => integrity(Lc,resolveCond(Cond,Dict,Rp,Rpx)).
}

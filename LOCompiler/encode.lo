lo.comp.encode{
  import lo.
  import lo.comp.term.
  import lo.comp.base64.
  import lo.comp.package.
  import lo.comp.types.
  import lo.comp.parseutils.
  import lo.comp.code.asm.

  public encodeProg:(prProg) => list[integer].
  encodeProg(prProg(Spec,Code)) => encTerm(packageSig(Spec),encodeProgMap(values(Code),[])).

  encodeProgMap:(list[rel],list[integer]) => list[integer].
  encodeProgMap([],L) => L.
  encodeProgMap([T,..R],L) => encodeRel(T,encodeProgMap(R,L)).

  encodeRel:(rel,list[integer]) => list[integer].
  encodeRel(rel(Pred,TLc,Clses),L) => [0cR,..encTerm(Pred,encodeTLoc(TLc,encodeClses(Clses,L)))].

  encodeClses:(list[clse],list[integer]) => list[integer].
  encodeClses(Clses,L) => encSequence(encClause,Clses,L).

  encClause:(clse,list[integer]) => list[integer].
  encClause(clse(Q,Nm,Args,Body),L) => [0cC,..encTerm(Nm,encSequence(encTerm,Q,encSequence(encTerm,Args,encSequence(encPred,Body,L))))].
  encClause(eqn(Q,Nm,Args,Rep,Body),L) => [0c>,..encTerm(Nm,encSequence(encTerm,Q,encSequence(encTerm,Args,encTerm(Rep,encSequence(encPred,Body,L)))))].

  encPred:(pred,list[integer]) => list[integer].
  encPred(call(TLc,Op,Args),L) => [0cP,..encodeTLoc(TLc,encTerm(Op,encSequence(encTerm,Args,L)))].
  encPred(ecall(TLc,Op,Args),L) => [0cE,..encodeTLoc(TLc,encodeText(Op,encSequence(encTerm,Args,L)))].
  encPred(ocall(TLc,O,S,I),L) => [0cO,..encodeTLoc(TLc,encTerm(O,encTerm(S,encTerm(I,L))))].
  encPred(unfy(TLc,Lf,Rg),L) => [0c=,..encodeTLoc(TLc,encTerm(Lf,encTerm(Rg,L)))].
  encPred(neck,L) => [0c!,..L].
  encPred(fail,L) => [0c#,..L].
  encPred(except(TLc,E),L) => [0c^,..encodeTLoc(TLc,encTerm(E,L))].

  encSequence:all t ~~ ((t,list[integer])=>list[integer],list[t],list[integer])=>list[integer].
  encSequence(F,S,L) => [0cL,..encInt(size(S),encSeq(F,S,L))].

  encSeq:all t ~~ ((t,list[integer])=>list[integer],list[t],list[integer])=>list[integer].
  encSeq(_,[],L) => L.
  encSeq(F,[E,..R],L) => F(E,encSeq(F,R,L)).

  encodeTLoc:(option[tloc],list[integer]) => list[integer].
  encodeTLoc(TLc,L) => encodeOptional((tloc(Line,Off,Col,Len),Lx)=>[0cT,..encInt(Line,encInt(Off,encInt(Col,encInt(Len,Lx))))],TLc,L).

  public encodeOptional:all t ~~ ((t,list[integer])=>list[integer],option[t],list[integer]) => list[integer].
  encodeOptional(F,none,L) => [0cN,..L].
  encodeOptional(F,some(O),L) => [0c@,..F(O,L)].

  public encodeTerm:(term) => list[integer].
  encodeTerm(T) => encTerm(T,[]).

  private encTerm:(term,list[integer]) => list[integer].
  encTerm(anon,L) => [0ca,..L].
  encTerm(varbl(Nm),L) => [0cv,..encodeText(Nm,L)].
  encTerm(intgr(Ix),L) => [0cx,..encInt(Ix,L)].
  encTerm(flot(Dx),L) => [0cd,..encFlot(Dx,L)].
  encTerm(enum(Nm),L) => [0ce,..encodeText(Nm,L)].
  encTerm(strng(Sx),L) => [0cs,..encodeText(Sx,L)].
  encTerm(strct(Nm,Ar),L) => [0co,..encInt(Ar,encodeText(Nm,L))].
  encTerm(prg(Nm,Ar),L) => [0cp,..encInt(Ar,encodeText(Nm,L))].
  encTerm(cons(Op,Els),L) => [0cn,..encInt(length(Els),encTerm(Op,encEls(Els,L)))].
  encTerm(invoke(Lc,Op,Args),L) => [0cV,..encodeTLoc(TLc,encTerm(Op,encSequence(encTerm,Args,L)))].
  encTerm(escvoke(Lc,Op,Args),L) => [0cE,..encodeTLoc(TLc,encodeText(Op,encSequence(encTerm,Args,L)))].
  encTerm(ovoke(TLc,O,S,I),L) => [0cO,..encodeTLoc(TLc,encTerm(O,encTerm(S,encTerm(I,L))))].

  private encInt:(integer,list[integer]) => list[integer].
  encInt(N,L) => [0c-,..encInt(-N,L)] :- N<0.
  encInt(N,L) => [D,..L] :- digitVal(D,N), N>=0, N=<9.
  encInt(N,L) => encInt(N / 10,[D,..L]) :- N>=10, digitVal(D,N%10).

  private encEls:(list[term],list[integer]) => list[integer].
  encEls([],L) => L.
  encEls([E,..M],L) => encTerm(E,encEls(M,L)).

  -- Temporary version
  private encFlot:(float,list[integer]) => list[integer].
  encFlot(Dx,L) => encodeText(Dx::string,L).

  private encodeText:(string,list[integer]) => list[integer].
  encodeText(Nm,L) => encodeChars(Chrs,Delim,L) :- Chrs = explode(Nm), findDelim(Chrs,Delim)!.

  private findDelim:(list[integer],integer){}.
  findDelim(Chrs,Delim) :-
    Delim in [0c', 0c", 0c|, 0c/, 0c%],
    \+ Delim in Chrs.
  findDelim(_,0c").

  private encodeChars:(list[integer],integer,list[integer]) => list[integer].
  encodeChars(Chars,Delim,L) => [Delim,..encodeQuoted(Chars,Delim,L)].

  private encodeQuoted:(list[integer],integer,list[integer]) => list[integer].
  encodeQuoted([],Delim,L) => [Delim,..L].
  encodeQuoted([0c\\,..M],Delim,L) => [0c\\, 0c\\,..encodeQuoted(M,Delim,L)].
  encodeQuoted([Delim,..M],Delim,L) => [0c\\, Delim,.. encodeQuoted(M,Delim,L)].
  encodeQuoted([Ch,..M],Delim,L) => [Ch,..encodeQuoted(M,Delim,L)].

  public encodeType:(tipe) => list[integer].
  encodeType(Tp) => encType(Tp,[]).

  private encType:(tipe,list[integer]) => list[integer].
  encType(T,L) => encTp(deRef(T),L).

  private encTp:(tipe,list[integer]) => list[integer].
  encTp(anonType,L) => [0c_,..L].
  encTp(voidType,L) => [0cv,..L].
  encTp(thisType,L) => [0ch,..L].
  encTp(tipe("lo.core*logical"),L) => [0cl,..L].
  encTp(tipe("lo.core*integer"),L) => [0ci,..L].
  encTp(tipe("lo.core*float"),L) => [0cf,..L].
  encTp(tipe("lo.core*string"),L) => [0cS,..L].
  encTp(tpFun(Nm,Ar),L) => [0cz,..encInt(Ar,encodeText(Nm,L))].
  encTp(typeExp(Op,[E]),L) => [0cL,..encType(E,L)] :- deRef(Op)=tpFun("lo.core*list",1).
  encTp(kVar(Nm),L) => [0ck,..encodeText(Nm,L)].
  encTp(kFun(Nm,Ar),L) => [0cK,..encInt(Ar,encodeText(Nm,L))].
  encTp(tipe(Nm),L) => [0ct,..encodeText(Nm,L)].
  encTp(typeExp(Op,Els),L) => [0cU,..encType(Op,encTypes(Els,L))].
  encTp(tupleType(Els),L) => [0cT,..encTypes(Els,L)].
  encTp(funType(A,R),L) => [0cF,..encType(A,encType(R,L))].
  encTp(classType(A,R),L) => [0cC,..encType(A,encType(R,L))].
  encTp(predType(A),L) => [0cP,..encType(A,L)].
  encTp(grammarType(A,R),L) => [0cG,..encType(A,encType(R,L))].
  encTp(typeRule(A,R),L) => [0cY,..encType(A,encType(R,L))].
  encTp(tpLambda(A,R),L) => [0cZ,..encType(A,encType(R,L))].
  encTp(faceType(Els),L) => [0cI,..encFieldTypes(Els,L)].
  encTp(constrained(T,C),L) => [0c|,..encTp(T,encConstraint(C,L))].
  encTp(univType(V,T),L) => [0c:,..encType(V,encType(T,L))].

  private encTypes:(list[tipe],list[integer]) => list[integer].
  encTypes(Els,L) => encInt(length(Els),encTps(Els,L)).

  private encTps:(list[tipe],list[integer]) => list[integer].
  encTps([],L) => L.
  encTps([T,..M],L) => encType(T,encTps(M,L)).

  private encFieldTypes:(list[(string,tipe)],list[integer]) => list[integer].
  encFieldTypes(F,L) => encInt(length(F),encFieldTps(F,L)).

  private encFieldTps:(list[(string,tipe)],list[integer]) => list[integer].
  encFieldTps([],L) => L.
  encFieldTps([(Fld,Tp),..M],L) => encodeText(Fld,encType(Tp,encFieldTps(M,L))).

  public encodeConstraint:(constraint) => list[integer].
  encodeConstraint(Con) => encConstraint(Con,[]).

  private encConstraint:(constraint,list[integer]) => list[integer].
  encConstraint(univCon(V,C),L) => [0c:,..encType(V,encConstraint(C,L))].
  encConstraint(conTract(Nm,Args,Deps),L) => [0cc,..encodeText(Nm,encType(tupleType(Args),encType(tupleType(Deps),L)))].
  encConstraint(implementsFace(Tp,Flds),L) => [0ca,..encType(Tp,encType(faceType(Flds),L))].
  encConstraint(conCon(C,E),L) => [0c|,..encConstraint(C,encConstraint(E,L))].

  public packageSig:(pkgSpec) => term.
  packageSig(pkgSpec(Pkg,Fields,Types,Enums,Contracts,Impls,Imports)) =>
    strng(implode(encodeTerm(
      mkTpl([fmtPkg(Pkg),fmtImports(Imports),
        fmtTypes(Fields),fmtTypes(Types),fmtEnums(Enums),fmtContracts(Contracts),fmtImpls(Impls)])))).

  fmtPkg:(pkg) => term.
  fmtPkg(pkg(Nm,Vers)) => cons(strct("pkg",2),[strng(Nm),fmtVer(Vers)]).

  fmtVer:(version) => term.
  fmtVer(defltVersion) => enum("*").
  fmtVer(vers(V)) => strng(V).

  fmtImports:(list[(visibility,pkg)]) => term.
  fmtImports(Imports) => mkTpl(Imports//fmtImport).

  fmtImport:((visibility,pkg)) => term.
  fmtImport((Viz,Pkg)) => cons(strct("import",2),[fmtViz(Viz),fmtPkg(Pkg)]).

  fmtViz:(visibility) => term.
  fmtViz(priVate) => enum("private").
  fmtViz(pUblic) => enum("public").

  fmtTypes:(list[(string,tipe)]) => term.
  fmtTypes(Fields) => fmtType(faceType(Fields)).

  fmtEnums:(list[string]) => term.
  fmtEnums(Enums) => mkTpl(Enums//fmtEnum).

  fmtEnum:(string) => term.
  fmtEnum(E) => strng(E).

  fmtContracts:(list[conEntry]) => term.
  fmtContracts(L) => mkTpl(L//fmtContract).

  fmtContract:(conEntry) => term.
  fmtContract(conEntry(Nm,ConNm,Con,Face)) => mkTpl([strng(Nm),strng(ConNm),fmtConstraint(Con),fmtType(Face)]).

  fmtImpls:(list[implEntry]) => term.
  fmtImpls(L) => mkTpl(L//fmtImpl).

  fmtImpl:(implEntry) => term.
  fmtImpl(implEntry(Nm,Con)) => mkTpl([strng(Nm),fmtConstraint(Con)]).

  fmtType:(tipe) => term.
  fmtType(T) => strng(implode(encodeType(T))).

  fmtConstraint:(constraint) => term.
  fmtConstraint(Con) => strng(implode(encodeConstraint(Con))).

  -- Prepare instructions for base64 encoding
  fmtIns:(list[integer]) => list[integer].
  fmtIns([]) => [].
  fmtIns([I,..L]) => [(I.>>.24).&.255,(I.>>.16).&.255,(I.>>.8).&.255,I.&.255,..fmtIns(L)].

  LOSig:integer.
  LOSig = 0x01030507.

  -- Encode a code segment
  encCodeSeg:(codeSeg,list[integer]) => list[integer].
  encCodeSeg(codeSeg(Nm,Code,Lits,SrcMap),L) =>
    [0cn,..encInt(4,encTerm(strct("#code",4),encTerm(Nm,[0cs,..encodeChars(encode64(fmtIns([LOSig,..Code])),0c',encTerm(mkTpl(Lits),encTerm(mkTpl(SrcMap),L)))])))].

  encSegs:(list[codeSeg],list[integer]) => list[integer].
  encSegs([],L) => L.
  encSegs([S,..R],L) => encCodeSeg(S,encSegs(R,L)).

  -- encode a complete code package
  public encMdl:(codeMdl) => list[integer].
  encMdl(codeMdl(Spec,Segs)) =>
    encTerm(packageSig(Spec),encSegs(Segs,[])).
}

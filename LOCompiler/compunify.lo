lo.comp.code.unify{
  import lo.

  import lo.comp.errors.
  import lo.comp.code.instructions.
  import lo.comp.code.registers.
  import lo.comp.term.

  public unifyArgs:(list[term],map[string,varDesc],list[litrl],varSet,logical,varSet,map[string,varDesc],list[litrl],list[instruction]){}.
  unifyArgs(Args,D0,Refs,Used,Last,Usx,Dx,Rfx,Inx) :-
    unifyEls(Args,true,D0,Dx,Used,Usx,Refs,Rfx,Last) = Inx.

  public unifyTerm:(term,logical,addr,map[string,varDesc],map[string,varDesc],
        varSet,varSet,list[litrl],list[litrl],logical) => list[instruction].
  unifyTerm(anon,_,Src,D,D,VS,VS,Lts,Lts,_) => skipOver(Src).
  unifyTerm(T,Top,Src,D,D,VS,VSx,Lt,Ltx,_) => unifyLit(Lb,Top,Src,VS,VSx) :- isGroundTerm(T), accessLiteral(T,Lb,Lt,Ltx).
  unifyTerm(varbl(Nm),_,Src,D,Dx,VS,Vx,Lt,Lt,last) => unifyVar(Entry,Src,D,Dx,VS,Vx,last) :- present(D,Nm,Entry).
  unifyTerm(cons(Op,Els),Top,Src,D,Dx,V,Vx,Lt,Ltx,Last) => unifyOp(Lb,Src,Top,V,V0) <> unifyEls(Els,D,Dx,V,Vx,Lt0,Ltx) :-
      accessLiteral(Op,Lb,Lt,Lt0).

  unifyEls:(list[term],logical,map[string,varDesc],map[string,varDesc],varSet,varSet,list[litrl],list[litrl]) => list[instruction].
  unifyEls([],_,D,D,V,V,Lt,Lt) => [].
  unifyEls([e],Top,D,Dx,V,Vx,Lt,Ltx) => unifyTerm(e,Top,sReg,D,Dx,V,Vx,Lt,Ltx,true).
  unifyEls([e,..l],Top,D,Dx,V,Vx,Lt,Ltx) => unifyTerm(e,Top,sReg,D,D0,V,V0,Lt,Lt0,false)<>unifyEls(l,D0,Dx,V0,Vx,Lt0,Ltx).

  unifyVar:(varDesc,addr,map[string,varDesc],map[string,varDesc],varSet,varSet,logical) => list[instruction].
  unifyVar(varDesc(_,_,_,voidAddr,_),sReg,D,D,V,V,_) => [iClS].
  unifyVar(varDesc(_,_,_,voidAddr,_),_,D,D,V,V,_) => [].
  unifyVar(varDesc(_,initialized,_,Src,_),Dst,D,D,V,Vx,Last) => Ins :- unifyVr(Src,Dst,V,Ins,Vx).
  unifyVar(varDesc(Nm,notInited,Def,Src,Wh),Dst,D,D[Nm->varDesc(Nm,initialized,Def,Src,Wh)],V,Vx,Last) => Ins :- moveVr(Src,Dst,V,Last,Ins,Vx).

  skipOver:(addr) => list[instruction].
  skipOver(voidAddr) => [].
  skipOver(aReg(_)) => [].
  skipOver(yReg(_,_)) => [].
  skipOver(sReg) => [iClS].

  unifyLit:(string,logical,addr,varSet,varSet) => list[instruction].
  unifyLit(_,_,voidAddr,Vs,Vs) => [].
  unifyLit(Lb,true,aReg(Rg),VS,freeAReg(VS,Rg)) => [iUAlit(Rg,Lb)].
  unifyLit(Lb,false,aReg(Rg),VS,VS) => [iUAlit(Rg,Lb)].
  unifyLit(Lb,_,yReg(Lc,_),VS,VS) => [iMAY(0,Lc),iUAlit(0,Lb)].
  unifyLit(Lb,_,sReg,VS,VS) => [iUSlit(Lcb)].

  accessLiteral:(term,string,list[litrl],list[litrl]){}.
  accessLiteral(T,Lb,Lt,Lt) :- litrl(Lb,T) in Lt.
  accessLiteral(T,Lb,Lts,[litrl(Lb,T)]) :- Lb = _str_gen("L").

  unifyOp:(string,addr,logical,varSet,varSet) => list[instruction].
  unifyOp(Lb,aReg(1),true,V,freeAReg(V,1)) => [iUAcns1(Lb)].
  unifyOp(Lb,aReg(1),false,V,V) =>  [iUAcns1(Lb)].
  unifyOp(Lb,aReg(2),true,V,freeAReg(V,2)) => [iUAcns2(Lb)].
  unifyOp(Lb,aReg(2),false,V,V) =>  [iUAcns2(Lb)].
  unifyOp(Lb,aReg(3),true,V,freeAReg(V,3)) => [iUAcns3(Lb)].
  unifyOp(Lb,aReg(3),false,V,V) =>  [iUAcns3(Lb)].
  unifyOp(Lb,aReg(4),true,V,freeAReg(V,4)) => [iUAcns4(Lb)].
  unifyOp(Lb,aReg(4),false,V,V) =>  [iUAcns4(Lb)].
  unifyOp(Lb,aReg(Rg),true,V,freeAReg(V,Rg)) => [iUAcns(Rg,Lb)].
  unifyOp(Lb,aReg(Rg),false,V,V) =>  [iUAcns(Rg,Lb)].
  unifyOp(Lb,yReg(Lc,_),_,V,V) =>  [iMAY(0,Lc),iUAcns0(Lb)].
  unifyOp(Lb,sReg,_,V,V) =>  [iUScns(Lb)].

  public matchTerm:(term,logical,addr,map[string,varDesc],map[string,varDesc],
      varSet,varSet,list[litrl],list[litrl],logical) => list[instruction].
  matchTerm(anon,_,Src,D,D,VS,VS,Lts,Lts,_) => skipOver(Src).
  matchTerm(T,Top,Src,D,Dx,VS,VSx,Lt,Ltx,_) => matchLit(Lb,Top,Src,VS,VSx) :- isGroundTerm(T), accessLiteral(T,Lb,Lt,Ltx).
  matchTerm(varbl(Nm),_,Src,D,Dx,VS,Vx,Lt,Lt,last) => matchVar(Entry,Src,D,Dx,VS,Vx,last) :- present(D,Nm,Entry).
  matchTerm(cons(Op,Els),Top,Src,D,Dx,V,Vx,Lt,Ltx,Last) => matchOp(Lb,Src,Top,V,V0) <> matchEls(Els,D,Dx,V,Vx,Lt0,Ltx) :-
      accessLiteral(Op,Lb,Lt,Lt0).

  matchEls:(list[term],map[string,varDesc],map[string,varDesc],varSet,varSet,list[litrl],list[litrl]) => list[instruction].
  matchEls([],D,D,V,V,Lt,Lt) => [].
  matchEls([e],D,Dx,V,Vx,Lt,Ltx) => matchTerm(e,false,sReg,D,Dx,V,Vx,Lt,Ltx,true).
  matchEls([e,..l],D,Dx,V,Vx,Lt,Ltx) => matchTerm(e,false,sReg,D,D0,V,V0,Lt,Lt0,false)<>matchEls(l,D0,Dx,V0,Vx,Lt0,Ltx).

  matchVar:(varDesc,addr,map[string,varDesc],map[string,varDesc],varSet,varSet,logical) => list[instruction].
  matchVar(varDesc(_,_,_,voidAddr,_),sReg,D,D,V,V,_) => [iClS].
  matchVar(varDesc(_,_,_,voidAddr,_),_,D,D,V,V,_) => [].
  matchVar(varDesc(_,initialized,_,Src,_),Dst,D,D,V,Vx,_) => Ins :- matchVr(Src,Dst,V,Ins,Vx).
  matchVar(varDesc(Nm,notInited,Def,Src,Lst),Dst,D,D[Nm->varDesc(Nm,initialized,Def,Src,Lst)],V,Vx,Last) => Ins :- moveVr(Src,Dst,V,Last,Ins,Vx).

  matchLit:(string,logical,addr,varSet,varSet) => list[instruction].
  matchLit(_,_,voidAddr,Vs,Vs) => [].
  matchLit(Lb,true,aReg(Rg),VS,freeAReg(VS,Rg)) => [iCAlit(Rg,Lb)].
  matchLit(Lb,false,aReg(Rg),VS,VS) => [iCAlit(Rg,Lb)].
  matchLit(Lb,_,yReg(Lc,_),VS,VS) => [iMAY(0,Lc),iCAlit(0,Lb)].
  matchLit(Lb,_,sReg,VS,VS) => [iCSlit(Lcb)].

  matchOp:(string,addr,logical,varSet,varSet) => list[instruction].
  matchOp(Lb,aReg(1),true,V,freeAReg(V,1)) => [iCAcns1(Lb)].
  matchOp(Lb,aReg(1),false,V,V) =>  [iCAcns1(Lb)].
  matchOp(Lb,aReg(2),true,V,freeAReg(V,2)) => [iCAcns2(Lb)].
  matchOp(Lb,aReg(2),false,V,V) =>  [iCAcns2(Lb)].
  matchOp(Lb,aReg(3),true,V,freeAReg(V,3)) => [iCAcns3(Lb)].
  matchOp(Lb,aReg(3),false,V,V) =>  [iCAcns3(Lb)].
  matchOp(Lb,aReg(4),true,V,freeAReg(V,4)) => [iCAcns4(Lb)].
  matchOp(Lb,aReg(4),false,V,V) =>  [iCAcns4(Lb)].
  matchOp(Lb,aReg(Rg),true,V,freeAReg(V,Rg)) => [iCAcns(Rg,Lb)].
  matchOp(Lb,aReg(Rg),false,V,V) =>  [iCAcns(Rg,Lb)].
  matchOp(Lb,yReg(Lc,_),_,V,V) =>  [iMAY(0,Lc),iCAcns0(Lb)].
  matchOp(Lb,sReg,_,V,V) =>  [iCScns(Lb)].

  public buildTerm:(term,logical,addr,map[string,varDesc],map[string,varDesc],
        varSet,varSet,list[litrl],list[litrl],logical) => list[instruction].
  buildTerm(anon,_,Src,D,D,V,Vx,Lts,Lts,_) => clearTrm(Src,V,Vx).
  buildTerm(T,Top,Src,D,D,VS,VSx,Lt,Ltx,_) => buildLit(Lb,Top,Src,VS,VSx) :- isGroundTerm(T), accessLiteral(T,Lb,Lt,Ltx).
  buildTerm(varbl(Nm),_,Src,D,Dx,VS,Vx,Lt,Lt,last) => buildVar(Entry,Src,D,Dx,VS,Vx,last) :- present(D,Nm,Entry).
  buildTerm(cons(Op,Els),Top,Src,D,Dx,V,Vx,Lt,Ltx,Last) => buildOp(Lb,Src,Top,V,V0) <> buildEls(Els,D,Dx,V,Vx,Lt0,Ltx) :-
      accessLiteral(Op,Lb,Lt,Lt0).

  public clearTrm:(addr,varSet,varSet) => list[instruction].
  clearTrm(voidAddr,V,V)=>[].
  clearTrm(aReg(Rg),V,regUsed(V,Rg))=>[iClA(Rg)].
  clearTrm(yReg(Lc,_),V,locUsed(V,Lc))=>[iClY(Lc)].
  clearTrm(sReg,V,V) => [iCLS].

  buildEls:(list[term],map[string,varDesc],map[string,varDesc],varSet,varSet,list[litrl],list[litrl]) => list[instruction].
  buildEls([],D,D,V,V,Lt,Lt) => [].
  buildEls([e],D,Dx,V,Vx,Lt,Ltx) => buildTerm(e,false,sReg,D,Dx,V,Vx,Lt,Ltx,true).
  buildEls([e,..l],D,Dx,V,Vx,Lt,Ltx) => buildTerm(e,false,sReg,D,D0,V,V0,Lt,Lt0,false)<>buildEls(l,D0,Dx,V0,Vx,Lt0,Ltx).

  buildVar:(varDesc,addr,map[string,varDesc],map[string,varDesc],varSet,varSet,logical) => list[instruction].
  buildVar(varDesc(_,_,_,voidAddr,_),sReg,D,D,V,V,_) => [iClS].
  buildVar(varDesc(_,_,_,voidAddr,_),_,D,D,V,V,_) => [].
  buildVar(varDesc(_,initialized,_,Src,_),Dst,D,D,V,Vx,Last) => Ins :- moveVr(Src,Dst,V,Last,Ins,Vx).
  buildVar(varDesc(Nm,notInited,Def,Src,Lst),Dst,D,D[Nm->varDesc(Nm,initialized,Def,Src,Lst)],V,Vx,Last) => Ins :- clearVr(Src,Dst,V,Ins,Vx).

  buildLit:(string,logical,addr,varSet,varSet) => list[instruction].
  buildLit(_,_,voidAddr,Vs,Vs) => [].
  buildLit(Lb,true,aReg(Rg),VS,freeAReg(VS,Rg)) => [iCAlit(Rg,Lb)].
  buildLit(Lb,false,aReg(Rg),VS,VS) => [iCAlit(Rg,Lb)].
  buildLit(Lb,_,yReg(Lc,_),VS,VS) => [iMAY(0,Lc),iCAlit(0,Lb)].
  buildLit(Lb,_,sReg,VS,VS) => [iCSlit(Lcb)].

  buildOp:(string,addr,logical,varSet,varSet) => list[instruction].
  buildOp(Lb,aReg(1),true,V,freeAReg(V,1)) => [iCAcns1(Lb)].
  buildOp(Lb,aReg(1),false,V,V) =>  [iCAcns1(Lb)].
  buildOp(Lb,aReg(2),true,V,freeAReg(V,2)) => [iCAcns2(Lb)].
  buildOp(Lb,aReg(2),false,V,V) =>  [iCAcns2(Lb)].
  buildOp(Lb,aReg(3),true,V,freeAReg(V,3)) => [iCAcns3(Lb)].
  buildOp(Lb,aReg(3),false,V,V) =>  [iCAcns3(Lb)].
  buildOp(Lb,aReg(4),true,V,freeAReg(V,4)) => [iCAcns4(Lb)].
  buildOp(Lb,aReg(4),false,V,V) =>  [iCAcns4(Lb)].
  buildOp(Lb,aReg(Rg),true,V,freeAReg(V,Rg)) => [iCAcns(Rg,Lb)].
  buildOp(Lb,aReg(Rg),false,V,V) =>  [iCAcns(Rg,Lb)].
  buildOp(Lb,yReg(Lc,_),_,V,V) =>  [iMAY(0,Lc),iCAcns0(Lb)].
  buildOp(Lb,sReg,_,V,V) =>  [iCScns(Lb)].

  public unifyVr:(addr,addr,varSet,list[instruction],varSet){}.
  unifyVr(voidAddr,_,Used,[],Used).
  unifyVr(_,voidAddr,Used, [],Used).
  unifyVr(aReg(Reg),aReg(Reg),Used, [],Used).
  unifyVr(aReg(Reg),aReg(Rg),Used, [iUAA(Reg,Rg)],Used) :- Reg\=Rg.
  unifyVr(aReg(Reg),yReg(Lc,_),Used, [iUAY(Reg,Lc)],Used).
  unifyVr(aReg(Reg),sReg,Used, [iUAS(Reg)],Used).
  unifyVr(yReg(Lc,_),aReg(Reg),Used, [iUAY(Reg,Lc)],Used).
  unifyVr(yReg(Lc,_),yReg(Lc,_),Used, [],Used).
  unifyVr(yReg(Lc,_),yReg(Loc,_),Used, [iUYY(Lc,Loc)],Used) :- Lc<255, Loc<255.
  unifyVr(yReg(Lc,_),yReg(Loc,_),Used, [iMAY(0,Lc),iUAY(0,Loc)],Used).
  unifyVr(yReg(Lc,_),sReg,Used, [iUYS(Lc)],Used).
  unifyVr(sReg,aReg(Rg),Used,[iUAS(Rg)],Used).
  unifyVr(sReg,yReg(Lc,_),Used,[iUYS(Lc)],Used).

  public moveVr:(addr,addr,varSet,logical,list[instruction],varSet){}.
  moveVr(voidAddr,_,Used,_,[],Used).
  moveVr(aReg(Rg),aReg(Rg),Used,_,[],Used).
  moveVr(aReg(Rg),aReg(Reg),Used,_,[iMAA(Rg,Reg)],regUsed(Used,Rg)).
  moveVr(aReg(Rg),yReg(Lc,Safe),Used,Last,[iMAY(Rg,Lc)],regUsed(Used,Rg)) :- (Safe | Last).
  moveVr(aReg(Rg),yReg(Lc,_),Used,_,[iMuAY(Rg,Lc)],regUsed(lclGc(Used,varSlotSz),Rg)).
  moveVr(aReg(Rg),sReg,Used,_,[iMAS(Rg)],regUsed(Used,Rg)).
  moveVr(yReg(Lc,_),aReg(Rg),Used,_,[iMYA(Lc,Rg)],locUsed(Used,Lc)).
  moveVr(yReg(Lc,_),yReg(Lc,_),Used,_,[],Used).
  moveVr(yReg(Lc,_),yReg(Loc,_),Used,_,[iMYY(Lc,Loc)],locUsed(Used,Lc)) :- Lc<255, Loc<255.
  moveVr(yReg(Lc,_),yReg(Loc,_),Used,_,[iMAY(0,Loc),iMYA(Lc,0)],locUsed(Used,Lc)).
  moveVr(yReg(Lc,_),sReg,Used,_,[iMYS(Lc)],locUsed(Used,Lc)).
  moveVr(sReg,aReg(Rg),Used,_,[iMSA(Rg)],Used).
  moveVr(sReg,yReg(Lc,_),Used,_,[iMSY(Lc)],Used).

  public overVr:(addr,addr,varSet,logical,list[instruction],varSet){}.
  overVr(voidAddr,_,Used,_,[],Used).
  overVr(aReg(Rg),aReg(Rg),Used,_,[],Used).
  overVr(aReg(Rg),aReg(Reg),Used,_,[iMAA(Rg,Reg)],regUsed(Used,Rg)).
  overVr(aReg(Rg),yReg(Lc,Safe),Used,Last,[iMAY(Rg,Lc)],regUsed(Used,Rg)) :- (Safe | Last).
  overVr(aReg(Rg),yReg(Lc,_),Used,_,[iMuAY(Rg,Lc)],regUsed(lclGc(Used,varSlotSz),Rg)).
  overVr(aReg(Rg),sReg,Used,_,[iMAS(Rg)],regUsed(Used,Rg)).
  overVr(yReg(Lc,_),aReg(Rg),Used,_,[iOYA(Lc,Rg)],locUsed(Used,Lc)).
  overVr(yReg(Lc,_),yReg(Lc,_),Used,_,[],Used).
  overVr(yReg(Lc,_),yReg(Loc,_),Used,_,[iMAY(0,Lc),iOYA(Loc,0)],locUsed(Used,Lc)).
  overVr(yReg(Lc,_),sReg,Used,_,[iMYS(Lc)],locUsed(Used,Lc)).

  public matchVr:(addr,addr,varSet,list[instruction],varSet){}.
  matchVr(voidAddr,_,Used,[],Used).
  matchVr(aReg(Rg),aReg(Rg),Used,[],Used).
  matchVr(aReg(Rg),aReg(Reg),Used,[iNvrA(Rg),iCAA(Rg,Reg)],Used).
  matchVr(aReg(Rg),yReg(Lc,Safe),Used,[iNvrA(Rg),iCAY(Rg,Lc)],Used).
  matchVr(aReg(Rg),sReg,Used,[iNvrA(Rg),iCAS(Rg)],Used).
  matchVr(yReg(Lc,_),aReg(Rg),Used,[iNvrY(Lc),iCYA(Lc,Rg)],Used).
  matchVr(yReg(Lc,_),yReg(Lc,_),Used,[],Used).
  matchVr(yReg(Lc,_),yReg(Loc,_),Used,[iNvrY(Lc),iMAY(0,Loc),iCAY(0,Lc)],Used).
  matchVr(yReg(Lc,_),sReg,Used,[iNvrY(Lc),iCYS(Lc)],Used).
  matchVr(sReg,aReg(Rg),Used,[iCSA(Rg)],Used).
  matchVr(sReg,yReg(Lc,_),Used,[iCSY(Lc)],Used).

  public clearVr:(addr,addr,varSet,list[instruction],varSet){}.
  clearVr(voidAddr,Src,V,clearTrm(Src,V,Vx),Vx).
  clearVr(Dst,voidAddr,V,clearTrm(Dst,V,Vx),Vx).
  clearVr(aReg(Rg),aReg(Rg),V,[iClA(Rg)],regUsed(lclGc(V,varSlotSz),Rg)).
  clearVr(aReg(Rg),aReg(Reg),V,[iClAA(Rg,Reg)],regUsed(regUsed(lclGc(V,varSlotSz),Reg),Rg)).
  clearVr(aReg(Rg),yReg(Lc,Safe),V,[iClAY(Rg,Lc)],locUsed(regUsed(V,Rg),Loc)).
  clearVr(yReg(Lc,_),aReg(Rg),V,[iClAY(Rg,Lc)],locUsed(regUsed(V,Rg),Lc)).
  clearVr(yReg(Lc,_),yReg(Lc,_),V,[iClY(Lc)],locUsed(V,Lc)).
  clearVr(yReg(Lc,_),yReg(Loc,_),V,[iClY(Lc),iMAY(0,Lc),iMYA(Loc,0)],locUsed(locUsed(V,Loc),Lc)).
  clearVr(sReg,aReg(Rg),V,[iClSA(Rg)],regUsed(V,Rg)).
  clearVr(sReg,yReg(Lc,_),V,[iClSY(Lc)],locUsed(V,Lc)).
}

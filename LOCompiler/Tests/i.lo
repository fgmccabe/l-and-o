comp.test.i{
  import lo.

  import lo.comp.term.
  import lo.comp.inline.


  five:clse.
  five = clse([varbl("IntPlus"),varbl("X")],prg("five",0),[],
      [ocall(none,cons(strct("+",1),[varbl("IntPlus")]),enum("int"),enum("int")),
       ocall(none,cons(strct("call",3),[intgr(2),intgr(3),varbl("X")]),varbl("IntPlus"),varbl("IntPlus"))]).

  int:clse.
  int = clse([varbl("Lb"),varbl("Th")],prg("int",3),
       [cons(strct("+",1),[cons(strct("int^+",2),[varbl("Lb"),varbl("Th")])]),varbl("Lb"),varbl("Th")],
       []).

  intHat:clse.
  intHat = clse([varbl("X"),varbl("Y"),varbl("Z"),varbl("Lb"),varbl("Th")],
      prg("int^+",3),
      [cons(strct("call",3),[varbl("X"),varbl("Y"),varbl("Z")]),varbl("Lb"),varbl("Th")],
      [call(none,prg("int+",5),[varbl("X"),varbl("Y"),varbl("Z"),varbl("Lb"),varbl("Th")])]).

  intEsc:clse.
  intEsc = clse([varbl("X"),varbl("Y"),varbl("Z"),varbl("Lb"),varbl("Th")],
      prg("int+",5),
      [varbl("X"),varbl("Y"),varbl("Z"),varbl("Lb"),varbl("Th")],
      [ecall(none,"int_plus",[varbl("X"),varbl("Y"),varbl("Z")])]).


  t1:clse.
  t1=C :- resolve(five,0,int,C).

  -- show "resolve \(five) against \(int) to get \(t1)".

  t2:clse.
  t2=C :- resolve(t1,0,intHat,C).

  show "resolve \(t1) against \(intHat) to get \(t2)".

  test:clse.
  test=C :- resolve(t2,0,intEsc,C).

  show "resolve \(t2) against \(intEsc) to get \(test)".

  t1:clse.
  t1=C :- resolve(five,0,int,C).


}

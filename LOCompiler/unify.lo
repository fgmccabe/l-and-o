lo.comp.unify{
  import lo.
  import lo.comp.types.
  import lo.comp.dict.
  import lo.comp.freshen.
  import lo.comp.canon.

  public sameType:(tipe,tipe,list[env]){}.
  sameType(T1,T2,Env) :-
    sm(deRef(T1),deRef(T2),Env)!.

  sm:(tipe,tipe,list[env]){}.
  sm(_,anonType,_).
  sm(anonType,_,_).
  sm(voidType,voidType,_).
  sm(thisType,thisType,_).
  sm(thisType,T2,Env) :-
    isVar("this",Env,vr(_,T)),
    sameType(T,T2,Env).
  sm(T1,thisType,Env) :-
    isVar("this",Env,vr(_,T)),
    sameType(T,T2,Env).
  sm(kVar(Nm),kVar(Nm),_).
  sm(kFun(Nm,Ar),kFun(Nm,Ar),_).
  sm(V1,V2,Env) :- isUnbound(V1), isUnbound(V2), varBinding(V1,V2,Env).
  sm(V1,T2,Env) :- isUnbound(V1), checkBinding(V1,T2,Env).
  sm(T1,V2,Env) :- isUnbound(V2), checkBinding(V2,T1,Env).
  sm(tipe(Nm),tipe(Nm),_).
  sm(tpFun(Nm,Ar),tpFun(Nm,Ar),_).
  sm(typeExp(O1,A1),typeExp(O2,A2),Env) :- sm(deRef(O1),deRef(O2),Env), smList(A1,A2,Env).
  sm(funType(A1,R1),funType(A2,R2),Env) :- sameType(A1,A2,Env), sameType(R1,R2,Env).
  sm(grammarType(A1,R1),grammarType(A2,R2),Env) :- sameType(A1,A2,Env), sameType(R1,R2,Env).
  sm(predType(A1),predType(A2),Env) :- sameType(A1,A2,Env).
  sm(tupleType(A1),tupleType(A2),Env) :- smList(A1,A2,Env).
  sm(classType(A1,C1),classType(A2,C2),Env) :- sameType(A1,A2,Env), sameType(C1,C2,Env).
  sm(faceType(F1),faceType(F2),Env) :- length(F1)=length(F2), smFields(F1,F2,Env).

  smList:(list[tipe],list[tipe],list[env]){}.
  smList([],[],_).
  smList([E1,..L1],[E2,..L2],Env) :- sameType(E1,E2,Env), smList(L1,L2,Env).

  smFields:(list[(string,tipe)],list[(string,tipe)],list[env]){}.
  smFields([],_,_).
  smFields([(F,E1),..L1],L2,Env) :- (F,E2) in L2, sameType(E1,E2,Env), smFields(L1,L2,Env).

  varBinding:(tipe,tipe,list[env]){}.
  varBinding(T1,T2,_) :- isIdenticalVar(T1,T2).
  varBinding(V1,V2,Env) :- \+ isIdenticalVar(T1,T2),
    bind(V1,V2).

  checkBinding:(tipe,tipe,list[env]){}.
  checkBinding(V,Tp,_) :-
    bind(V,Tp).

  surfaceBound:(list[tipe]){}.
  surfaceBound([]).
  surfaceBound([E,..M]) :- \+isUnbound(deRef(E)), surfaceBound(M).

  checkForImpl:(constraint,list[env]){}.
  checkForImpl(Con,Env) :-
    isImplemented(Con,Env,implEntry(_,ITp)),
    (_,OCon) = freshen(ITp,[]),
    sameContract(OCon,Con,Env).

  public sameContract:(constraint,constraint,list[env]){}.
  sameContract(conTract(Nm,A1,D1),conTract(Nm,A2,D2),Env) :-
    smList(A1,A2,Env),
    smList(D1,D2,Env).

  checkFace:(list[(string,tipe)],list[(string,tipe)],list[env]){}.
  checkFace([],_,_).
  checkFace([(Nm,ElTp),..R],TpFace,Env) :-
    (Nm,XTp) in TpFace,
    sameType(ElTp,XTp,Env),
    checkFace(R,TpFace,Env).

  public
  faceOfType:(tipe,list[env],tipe){}.
  faceOfType(Tp,Env,FT) :-
    faceOfTp(deRef(Tp),Env,FT).

  faceOfTp:(tipe,list[env],tipe){}.
  faceOfTp(faceType(F),_,faceType(F)).
  faceOfTp(tipe(Nm),Env,F) :-
    typeInDict(Nm,Env,_,_,_,FR),
    moveQuants(FR,_,FQR),
    moveConstraints(FQR,_,typeRule(_,F)).
  faceOfTp(typeExp(Op,Args),Env,Face) :-
    deRef(Op) = tpFun(Nm,Ar),
    Ar=length(Args),
    typeInDict(Nm,Env,_,_,_,FR),
    moveQuants(FR,_,FQR),
    moveConstraints(FQR,_,typeRule(typeExp(_,AT),F)),
    (_,Face) = freshen(F,bindAT(AT,Args,[])).
  faceOfTp(T,Env,faceType(allImpCons(Env,Env,T,[]))) :- isTypeVar(T).

  private allImpCons:(list[env],list[env],tipe,list[(string,tipe)]) => list[(string,tipe)].
  allImpCons([],_,_,So) => So.
  allImpCons([scope(_,_,Cons,_,_),..E],Env,Tp,So) => allImpCons(E,Env,Tp,mergeCons(Cons,Env,Tp,So)).

  private mergeCons:(list[constraint],list[env],tipe,list[(string,tipe)]) => list[(string,tipe)].
  mergeCons([],_,_,So) => So.
  mergeCons([implementsFace(V,F),..C],Env,Tp,So) => mergeCons(C,Env,Tp,mergeFields(F,Env,So)) :- isIdenticalType(V,Tp).
  mergeCons([_,..C],Env,Tp,So) => mergeCons(C,Env,Tp,So).

  mergeFields:(list[(string,tipe)],list[env],list[(string,tipe)]) => list[(string,tipe)].
  mergeFields([],_,SoFar) => SoFar.
  mergeFields([(Nm,F),..Els],Env,SoFar) => mergeFields(Els,Env,SoFar) :- ((Nm,V) in SoFar,sameType(F,V,Env)).
  mergeFields([(Nm,F),..Els],Env,SoFar) => mergeFields(Els,Env,[(Nm,F),..SoFar]).
}

lo.comp.errors{
  import lo.
  import lo.array.

  import lo.comp.location.

  public type reportMsg ::= sourcedMsg(reportMsg,string) | errorMsg(location,string) | warnMsg(location,string) | othMsg(location,string).

  public type report <~ {
    msgs:list[reportMsg].
  }.

  private report: (list[reportMsg]) <=> report.
  report(Lst) <= {
    msgs = Lst.
  }.

  public implementation display[report] <= {
    disp(R) => showReport(R).
  }

  private showReport:(report) => ss.
  showReport(M) => ssSeq([/*ssSeq(showMsgs(M.msgs)),*/disp(countErrors(M)),ss(" errors, "),disp(countWarnings(M)),ss(" warnings\n")]).

  implementation display[reportMsg] <= {
    disp(M) => showMsg(M).
  }

  showMsg:(reportMsg) => ss.
  showMsg(errorMsg(std,M)) => ssSeq([ss("Error "),ss(M),ss("\n")]).
  showMsg(errorMsg(Lc,M)) => ssSeq([ss("Error @"),disp(Lc),ss("\n"),ss(M),ss("\n")]).
  showMsg(warnMsg(std,M)) => ssSeq([ss("Warning "),ss(M),ss("\n")]).
  showMsg(warnMsg(Lc,M)) => ssSeq([ss("Warning @"),disp(Lc),ss("\n"),ss(M),ss("\n")]).
  showMsg(othMsg(std,M)) => ssSeq([ss(M),ss("\n")]).
  showMsg(othMsg(Lc,M)) => ssSeq([ss("Info @"),disp(Lc),ss("\n"),ss(M),ss("\n")]).
  showMsg(sourcedMsg(M,Line)) => ssSeq([showMsg(M),locationContext(Lc,Line)]) :- hasLocation(M,Lc).
  showMsg(sourcedMsg(M,_)) => showMsg(M).

  public countErrors:(report) => integer.
  countErrors(report(L)) => cntErrors(L,0).

  public errorFree:(report){}.
  errorFree(R) :- countErrors(R) == 0.

  private cntErrors:(list[reportMsg],integer) => integer.
  cntErrors([],C) => C.
  cntErrors([errorMsg(_,_),..L],C) => cntErrors(L,C+1).
  cntErrors([_,..L],C) => cntErrors(L,C).

  public countWarnings:(report) => integer.
  countWarnings(report(L)) => cntWarninngs(L,0).

  private cntWarninngs:(list[reportMsg],integer) => integer.
  cntWarninngs([],C) => C.
  cntWarninngs([warnMsg(_,_),..L],C) => cntWarninngs(L,C+1).
  cntWarninngs([_,..L],C) => cntWarninngs(L,C).
  
  public reportBase : report.
  reportBase = report([]).

  public
  reportError:(string,location,report,report){}.
  reportError(Msg,Lc,report(L),report([errorMsg(Lc,Msg),..L])).

  public
  reportWarn:(string,location,report,report){}.
  reportWarn(Msg,Lc,report(L),report([warnMsg(Lc,Msg),..L])).

  public
  reportMsg:(string,location,report,report){}.
  reportMsg(Msg,Lc,report(L),report([othMsg(Lc,Msg),..L])).

  public
  logMsg:(string){}.
  logMsg(Msg) :- _logmsg(Msg).

  public populateContext:(report,string,array[string]) => report.
  populateContext(report(Msgs),Pth,Lines) => report(sourceMsgs(Msgs,Pth,Lines)).

  sourceMsgs:(list[reportMsg],string,array[string]) => list[reportMsg].
  sourceMsgs([],_,_) => [].
  sourceMsgs([errorMsg(Lc,Msg),..L],Pth,Lines) => [sourcedMsg(errorMsg(Lc,Msg),Line),..sourceMsgs(L,Pth,Lines)] :-
    findSourceLine(Lc,Pth,Lines,Line).
  sourceMsgs([warnMsg(Lc,Msg),..L],Pth,Lines) => [sourcedMsg(warnMsg(Lc,Msg),Line),..sourceMsgs(L,Pth,Lines)] :-
    findSourceLine(Lc,Pth,Lines,Line).
  sourceMsgs([M,..L],Pth,Lines) => [M,..sourceMsgs(L,Pth,Lines)].

  findSourceLine:(location,string,array[string],string){}.
  findSourceLine(loc(Ln,_,_,_,Pth),Pth,Lines,Line) :- present(Lines,Ln,Line).

  public fullReport:(report) => ss.
  fullReport(report(Msgs)) => ssSeq([ssSeq(Msgs//showMsg),showReport(report(Msgs))]).

  hasLocation:(reportMsg,location){}.
  hasLocation(errorMsg(Lc,_),Lc) :- Lc\=std.
  hasLocation(warnMsg(Lc,_),Lc) :- Lc\=std.
  hasLocation(othMsg(Lc,_),Lc) :- Lc\=std.
}
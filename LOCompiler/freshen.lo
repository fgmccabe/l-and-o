lo.comp.freshen{
  import lo.
  import lo.comp.misc.
  import lo.comp.types.

  public contract all s ~~ freshen[s] <~ {
    freshen:(s,map[string,tipe]) => s.
  }.

  public
  implementation freshen[tipe] .. {
    freshen(T,M) => freshenType(T,M).
  }

  freshenType:(tipe,map[string,tipe]) => tipe.
  freshenType(univType(kVar(Nm),T),B) => freshenType(T,B+{Nm->newVar(Nm)}).
  freshenType(T,B) => frshnType(T,B).

  public forEvidence:(tipe,map[string,tipe],map[string,tipe],tipe){}.
  forEvidence(Tp,B,Q,freshen(SkTp,Q)) :-
    skolemize(Tp,B,Q,SkTp).

  private skolemize:(tipe,map[string,tipe],map[string,tipe],tipe){}.
  skolemize(univType(kVar(V),Tp),B,BV,FTp) :- 
    skolemize(Tp,B+{V->skolem(V)},BV,FTp).
  skolemize(Tp,B,B,Tp).

  frshnType:(tipe,map[string,tipe]) => tipe.
  frshnType(anonType,_) => anonType.
  frshnType(voidType,_) => voidType.
  frshnType(thisType,{"this"->Tp}) => Tp.
  frshnType(thisType,_) => thisType.
  frshnType(kVar(Nm),{Nm->Tp}) => Tp.
  frshnType(kVar(Nm),_) => kVar(Nm).
  frshnType(V,B) => (var(Curr) ? V | frshnType(Curr,B)) :-  V=tVar(Curr,_,_,_,_).
  frshnType(tipe(Nm),_) => tipe(Nm).
  frshnType(typeExp(Nm,A),B) => typeExp(Nm,frshnTypes(A,B)).
  frshnType(funType(A,R),B) => funType(frshnType(A,B),frshnType(R,B)).
  frshnType(predType(A),B) => predType(frshnType(A,B)).
  frshnType(grammarType(A,R),B) => grammarType(frshnType(A,B),frshnType(R,B)).
  frshnType(classType(A,R),B) => classType(frshnType(A,B),frshnType(R,B)).
  frshnType(tupleType(A),B) => tupleType(frshnTypes(A,B)).
  frshnType(faceType(F),B) => faceType(frshnFields(F,B)).
  frshnType(univType(kVar(Nm),T),B) => univType(NV,frshnType(T,B-{Nm->_})).
  frshnType(constrained(T,C),B) => constrained(frshnType(T,B),frshnConstraint(C,B)).
  frshnType(typeRule(S,T),B) => typeRule(frshnType(S,B),frshnType(T,B)).

  private
  frshnTypes:(list[tipe],map[string,tipe]) => list[tipe].
  frshnTypes([],_) => [].
  frshnTypes([E,..R],B) => [frshnType(E,B),..frshnTypes(R,B)].

  private
  frshnFields:(list[(string,tipe)],map[string,tipe]) => list[(string,tipe)].
  frshnFields([],_) => [].
  frshnFields([(F,E),..R],B) => [(F,frshnType(E,B)),..frshnFields(R,B)].

  public
  implementation freshen[constraint] .. {
    freshen(C,B) => freshenConstraint(C,B).
  }

  freshenConstraint:(constraint,map[string,tipe]) => constraint.
  freshenConstraint(univCon(kVar(Nm),C),B) => freshenConstraint(C,B+{Nm->newVar(Nm)}).
  freshenConstraint(C,B) => frshnConstraint(C,B).

  frshnConstraint:(constraint,map[string,tipe]) => constraint.
  frshnConstraint(conTract(Nm,Args,Deps),B) => conTract(Nm,frshnTypes(Args,B),frshnTypes(Deps,B)).
  frshnConstraint(implementsFace(Tp,Els),B) => implementsFace(frshnType(Tp,B),frshnFields(Els,B)).
  frshnConstraint(conRule(Args,C),B) => conRule(frshnConstraints(Args,B),frshnConstraint(C,B)).
  frshnConstraint(univCon(kVar(Nm),C),B) => frshnConstraint(C,B-{Nm->_}).

  private
  frshnConstraints:(list[constraint],map[string,tipe]) => list[constraint].
  frshnConstraints([],_) => [].
  frshnConstraints([C,..R],B) => [frshnConstraint(C,B),..frshnConstraints(R,B)].
}
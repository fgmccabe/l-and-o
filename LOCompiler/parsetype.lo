lo.comp.parseType{
  import lo.
  import lo.comp.types.
  import lo.comp.ast.
  import lo.comp.abstract.
  import lo.comp.dict.
  import lo.comp.unify.
  import lo.comp.errors.
  import lo.comp.location.
  import lo.comp.freshen.
  import lo.comp.canon.
  import lo.comp.misc.

  public
  parseType:(ast,list[env],tipe,report,report){}.
  parseType(T,Env,Type,Rp,Rpx) :-
    prsType(T,simpleType,Env,[],[],Cons,Tp,Rp,Rpx),
    moveConstraints(Type,Cons,Tp).

  public parseTypeDefinition:(string,location,ast,list[canonDef],list[canonDef],list[env],string,report,report){}.
  parseTypeDefinition(N,Lc,St,[typeDef(Lc,N,Type,FaceRule),..Defs],Defs,Env,Path,Rp,Rpx) :-
    parseTpRule(St,[],Env,Type,FaceRule,Path,Rp,Rpx).

  parseTpRule:(ast,map[string,tipe],list[env],tipe,tipe,string,report,report){}.
  parseTpRule(St,M,Env,Type,Rule,Path,Rp,Rpx) :-
    hasQuant(St,M,M1,Body,Rule,Rl),
    hasQuant(St,M,_,_,Type,Tp),  -- we do it twice!
    parseTpRule(Body,M1,Env,Tp,Rl,Path,Rp,Rpx).
  parseTpRule(St,B,Env,Type,Rule,Path,Rp,Rpx) :-
    isBinary(St,"|:",_,L,R),
    parseConstraint(L,Env,B,[],Cx,Rp,Rp0),
    parseTpRule(R,B,Env,Tp,Inner,Path,Rp0,Rpx),
    wrapConstraints(Cx,Inner,Rule),
    wrapConstraints(Cx,Tp,Type).
  parseTpRule(St,B,Env,Lhs,typeRule(Lhs,Rhs),Path,Rp,Rpx) :-
    isBinary(St,"<~",_,L,R),
    parseTypeHead(L,B,Lhs,Path,Rp,Rp0),
    prsType(R,simpleType,Env,B,C0,Cx,Tp,Rp0,Rpx),
    faceOfType(Tp,Env,Rhs).
  parseTpRule(St,B,Env,Lhs,tpLambda(Args,Rhs),Path,Rp,Rpx) :-
    isBinary(St,"~>",_,L,R),
    checkTuple(L,LArgs,Rp,Rp0),
    parseHeadArgs(LArgs,B,Args,Rp0,Rp1),
    prsType(R,simpleType,Env,B,C,Cx,Rhs,Rp1,Rpx).

  private prsType:(ast,typeKind,list[env],map[string,tipe],list[constraint],list[constraint],tipe,report,report){}.
  prsType(T,K,Env,Q,Cx,Cx,PT,Rp,Rpx) :-
    isQuantified(T,V,BT),
    parseTypeBound(V,Q,B0,Env,PT,Inner),
    prsType(BT,K,Env,B0,[],C0,BTp,Rp,Rpx),
    moveConstraints(Inner,C0,BTp). -- no constraints migrate out of quantified type
  prsType(T,K,Env,Q,C,C,Type,Rp,Rpx) :-
    isBinary(T,"|:",_,L,R),
    parseConstraint(L,Env,Q,[],C0,Rp,Rp0),
    prsType(R,K,Env,Q,[],_,Inner,Rp0,Rpx),
    moveConstraints(Type,C0,Inner).
  prsType(T,K,Env,Q,C,C,Tp,Rp,Rpx) :-
    isIden(T,Lc,Nm),
    prsTypeName(Lc,Nm,K,Env,Q,Tp,Rp,Rpx).
  prsType(Sq,K,Env,Q,C,Cx,Type,Rp,Rpx) :-
    isSquareTerm(Sq,Lc,Op,Args),
    isIden(Op,_,Nm),
    checkKind(K,typeExpForm(Args),Lc,Rp,Rp0),
    prsTypes(Args,Env,Q,C,Cx,ArgTps,Rp0,Rp1),
    (some(CTp) = findCurryDollar(ArgTps) ?
      parseTypeExp(Nm,Lc,Q,Env,ArgTps,TpResult,Rp1,Rpx),
      Type = univType(CTp,tpLambda([CTp],TpResult))
    | parseTypeExp(Nm,Lc,Q,Env,ArgTps,Type,Rp1,Rpx)).
  prsType(F,K,Env,Q,C,Cx,funType(AT,RT),Rp,Rpx) :-
    isBinary(F,"=>",Lc,L,R),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    checkTuple(L,A,Rp0,Rp1),
    prsTypes(A,Env,Q,C,C1,AT,Rp1,Rp2),
    prsType(R,simpleType,Env,Q,C1,Cx,RT,Rp2,Rpx).
  prsType(F,K,Env,Q,C,Cx,grammarType(AT,RT),Rp,Rpx) :-
    isBinary(F,"-->",Lc,L,R),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    checkTuple(L,A,Rp0,Rp1),
    prsTypes(A,Env,Q,C,C1,AT,Rp1,Rp2),
    prsType(R,simpleType,Env,Q,C1,Cx,RT,Rp2,Rpx).
  prsType(F,K,Env,Q,C,Cx,classType(AT,RT),Rp,Rpx) :-
    isBinary(F,"<=>",Lc,L,R),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    checkTuple(L,A,Rp0,Rp1),
    prsTypes(A,Env,Q,C,Cx,AT,Rp1,Rp2),
    prsType(R,simpleType,Env,Q,C1,Cx,RT,Rp2,Rpx).
  prsType(T,K,Env,Q,C,Cx,predType(AT),Rp,Rpx) :-
    isBraceTerm(T,Lc,L,[]),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    checkTuple(L,A,Rp0,Rp1),
    prsTypes(A,Env,Q,C,Cx,AT,Rp1,Rpx).
  prsType(T,K,Env,Q,C,Cx,tupleType(AT),Rp,Rpx) :-
    isRoundTuple(T,Lc,[A]),
    isRoundTuple(A,_,Inner),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    prsTypes(Inner,Env,Q,C,Cx,AT,Rp0,Rpx).
  prsType(T,K,Env,Q,C,Cx,AT,Rp,Rpx) :-
    isRoundTuple(T,_,[A]),
    prsType(A,K,Env,Q,C,Cx,AT,Rp,Rpx).
  prsType(T,K,Env,Q,C,Cx,tupleType(AT),Rp,Rpx) :-
    isRoundTuple(T,Lc,A),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    prsTypes(A,Env,Q,C,Cx,AT,Rp0,Rpx).
  prsType(T,K,Env,Q,C,Cx,faceType(AT),Rp,Rpx) :-
    isBraceTuple(T,Lc,L),
    checkKind(K,simpleType,Lc,Rp,Rp0),
    prsTypeFields(L,Env,Q,C,Cx,AT,Rp0,Rpx).
  prsType(T,K,_,_,Cx,Cx,anonType,Rp,Rpx) :-
    reportError("cannot understand type \(T), expecting a \(K)",T.loc,Rp,Rpx).

  prsTypeName:(location,string,typeKind,list[env],map[string,tipe],tipe,report,report){}.
  prsTypeName(_,"_",simpleType,_,_,anonType,Rp,Rp).
  prsTypeName(_,"_",typeFun(Ar),_,_,newTFun("_",Ar),Rp,Rp).
  prsTypeName(Lc,"void",K,_,_,voidType,Rp,Rpx) :- checkKind(K,simpleType,Lc,Rp,Rpx).
  prsTypeName(Lc,"this",K,_,_,thisType,Rp,Rpx) :- checkKind(K,simpleType,Lc,Rp,Rpx).
  prsTypeName(_,"$",simpleType,_,_,kVar("$"),Rp,Rp).
  prsTypeName(_,"$",typeFun(Ar),_,_,kFun("$",Ar),Rp,Rp).
  prsTypeName(Lc,Id,K,Env,B,Tp,Rp,Rpx) :-
    ( present(B,Id,Tp) ?
        checkKind(K,typeKind(Tp),Lc,Rp,Rpx)
    | typeInDict(Id,Env,_,_,TpK,Tp0) ?
        checkKind(K,TpK,Lc,Rp,Rpx),
        (_,FrTp) = freshen(Tp0,[]),
        (FrTp = tpLambda(_,Type) ? true |
        FrTp = typeRule(Lhs,_) ? Tp = typeOp(Lhs) |
        typeOp(FrTp) = Tp)
    | reportError("type \(Id) not declared",Lc,Rp,Rpx),
      Tp = anonType).

  private checkTuple:(ast,list[ast],report,report){}.
  checkTuple(T,A,Rp,Rp) :-
    isRoundTuple(T,_,A).
  checkTuple(T,[],Rp,Rpx) :-
    reportError("expecting a tuple, not \(T)",T.loc,Rp,Rpx).

  private checkCurrying:(list[ast]) => integer.
  checkCurrying([]) => 0.
  checkCurrying([A,..L]) => checkCurrying(L)+1 :- isCurryDollar(A).
  checkCurrying([_,..L]) => checkCurrying(L).

  private typeExpForm:(list[ast]) => typeKind.
  typeExpForm(L) => typeFun(Ar) :-
    Ar = checkCurrying(L),
    Ar>0.
  typeExpForm(_) => simpleType.

  private findCurryDollar:(list[tipe]) => option[tipe].
  findCurryDollar([]) => none.
  findCurryDollar([V,.._]) => some(V) :- isDollarVar(deRef(V)).
  findCurryDollar([_,..L]) => findCurryDollar(L).

  private parseTypeExp:(string,location,map[string,tipe],list[env],list[tipe],tipe,report,report){}.
  parseTypeExp(Nm,Lc,Q,_,Args,Type,Rp,Rpx) :-
    present(Q,Nm,Tp),
    checkKind(typeFun(size(Args)),typeKind(Tp),Lc,Rp,Rp0),
    (_,FrTp) = freshen(Tp,[]),
    applyTypeExp(FrTp,Args,Env,Type,Lc,Rp0,Rpx).
  parseTypeExp(Nm,Lc,_,Env,Args,Type,Rp,Rpx) :-
    typeInDict(Nm,Env,_,_,K,Tp),
    (_,FrTp) = freshen(Tp,[]),
    checkKind(typeFun(size(Args)),typeKind(typeOp(typeCore(FrTp))),Lc,Rp,Rp0),
    applyTypeExp(FrTp,Args,Env,Type,Lc,Rp0,Rpx).

  private applyTypeExp:(tipe,list[tipe],list[env],tipe,location,report,report){}.
  applyTypeExp(tpLambda(Ax,Reslt),Args,Env,Reslt,Lc,Rp,Rpx) :-
    (sameType(tupleType(Ax),tupleType(Args),Env) ?
        Rp=Rpx |
        reportError("could not apply type \(Ax) to \(Args)",Lc,Rp,Rpx)).
  applyTypeExp(typeRule(Ax,Reslt),Args,Env,Ax,Lc,Rp,Rpx) :-
    (sameType(Ax,typeExp(newTFun("_",size(Args)),Args),Env) ?
        Rp=Rpx |
        reportError("could not apply type \(Ax) to \(Args)",Lc,Rp,Rpx)).
  applyTypeExp(Tp,Args,_,typeExp(Tp,Args),_,Rp,Rp).

  validTypeOp:(tipe,integer){}.
  validTypeOp(tpFun(_,Ar),Ar).
  validTypeOp(kFun(_,Ar),Ar).

  private prsTypes:(list[ast],list[env],map[string,tipe],list[constraint],list[constraint],list[tipe],report,report){}.
  prsTypes([],_,_,C,C,[],Rp,Rp).
  prsTypes([T,..R],Env,Q,C,Cx,[PT,..M],Rp,Rpx) :-
    prsType(T,_,Env,Q,C,C0,PT,Rp,Rp0),
    prsTypes(R,Env,Q,C0,Cx,M,Rp0,Rpx).

  private prsTypeFields:(list[ast],list[env],map[string,tipe],list[constraint],list[constraint],list[(string,tipe)],report,report){}.
  prsTypeFields([],_,_,Cx,Cx,[],Rp,Rp).
  prsTypeFields([A,..AT],Env,Q,C,Cx,[(Fld,FldTp),..ArgTypes],Rp,Rp) :-
    isBinary(A,":",_,L,R),
    isIden(L,_,Fld),
    prsType(R,simpleType,Env,Q,C,C0,FldTp,Rp,Rp0),
    prsTypeFields(AT,Env,Q,C0,Cx,ArgTypes,Rp0,Rpx).
  prsTypeFields([A,..AT],Env,Q,C,Cx,ArgTypes,Rp,Rp) :-
    isBinary(A,"@",_,_,_),
    prsTypeFields(AT,Env,Q,C0,Cx,ArgTypes,Rp,Rpx).
  prsTypeFields([A,..AT],Env,Q,C,Cx,ArgTypes,Rp,Rpx) :-
    reportError("\(A) is not a valid field designator",A.loc,Rp,Rp0),
    prsTypeFields(AT,Env,Q,C,Cx,ArgTypes,Rp0,Rpx).

  parseTypeBound:(ast,map[string,tipe],map[string,tipe],list[env],tipe,tipe){}.
  parseTypeBound(P,BV,Bound,Env,QT,Inner) :-
    isBinary(P,",",_,L,R),
    parseTypeBound(L,BV,B0,Env,QT,Q0),
    parseTypeBound(R,B0,Bound,Env,Q0,Inner).
  parseTypeBound(V,B,B1,Env,univType(kFun(Nm,Ar),Inner),Inner) :-
    isBinary(V,"/",_,L,R),
    isInteger(R,_,Ar),
    isIden(L,_,Nm),
    B1 = B[Nm->kFun(Nm,Ar)].
  parseTypeBound(V,B,B1,Env,univType(kVar(Nm),Inner),Inner) :-
    isIden(V,_,Nm),
    B1 = B[Nm->kVar(Nm)].

  public parseContract:(ast,list[env],string,conEntry,report,report){}.
  parseContract(T,Env,Path,conEntry(Nm,ConNm,Spec,Face),Rp,Rpx) :-
    isUnary(T,"contract",_,TI),
    parseContractSpec(TI,F,[],Q,[],C0,Env,Spc,Nm,ConNm,Path,Rp,Rp0),
    isBraceTuple(F,_,TLs),
    prsTypeFields(TLs,Env,Q,C0,_,Fc,Rp0,Rpx),
    PQ = pairs(Q),
    reQuant(PQ,faceType(Fc),Face),
    reConQuant(PQ,Spc,Spec),
    wrapConConstraints(C0,Spc,SpcC),
    reConQuant(PQ,SpcC,FullSpec).

  private parseContractSpec:(ast,ast,map[string,tipe],map[string,tipe],list[constraint],list[constraint],list[env],constraint,string,string,string,report,report){}.
  parseContractSpec(T,R,Q,Qx,C0,Cx,Env,Spec,Nm,ConNm,Path,Rp,Rpx) :-
    isQuantified(T,V,B),
    parseConBound(V,Q,Q0,Env,_,_),
    parseContractSpec(B,R,Q0,Qx,C0,Cx,Env,Spec,Nm,ConNm,Path,Rp,Rpx).
  parseContractSpec(T,F,Q,Qx,C0,Cx,Env,Spec,Nm,ConNm,Path,Rp,Rpx) :-
    isBinary(T,"|:",_,L,R),
    reportError("constrained contract \(T) not supported",Lc,Rp,Rp0),
    parseContractSpec(R,F,Q,Qx,C1,Cx,Env,Spec,Nm,ConNm,Path,Rp0,Rpx).
  parseContractSpec(T,F,Q,Q,C,Cx,Env,Spec,Nm,ConNm,Path,Rp,Rpx) :-
    isBinary(T,"<~",Lc,L,F),
    parseContractHead(L,Q,C,Cx,Env,Spec,Nm,ConNm,Path,Rp,Rpx).

  private parseContractHead:(ast,map[string,tipe],list[constraint],list[constraint],list[env],constraint,string,string,string,report,report){}.
  parseContractHead(T,Q,C,Cx,Env,conTract(ConNm,ArgTps,DepTps),Nm,ConNm,Path,Rp,Rpx) :-
    isSquareTerm(T,Lc,Op,A),
    isIden(Op,_,Nm),
    ConNm = subPath(Path,marker(con),Nm),
    parseContractArgs(A,Env,Q,C,Cx,ArgTps,DepTps,Rp,Rpx).

  public parseConstraint:(ast,list[env],map[string,tipe],list[constraint],list[constraint],report,report){}.
  parseConstraint(T,Env,B,C0,Cx,Rp,Rpx) :-
    isBinary(T,",",_,L,R),
    parseConstraint(R,Env,B,C0,C1,Rp,Rp0),
    parseConstraint(L,Env,B,C1,Cx,Rp0,Rpx).
  parseConstraint(T,Env,B,C0,Cx,Rp,Rpx) :-
    isBinary(T,"<~",_,L,R),
    prsType(L,simpleType,Env,B,C0,C1,TV,Rp,Rp0),
    isBraceTuple(R,_,E),
    prsTypeFields(E,Env,B,C1,C2,AT,Rp0,Rpx),
    addConstraint(implementsFace(TV,AT),C2,Cx).
  parseConstraint(Sq,Env,B,C0,Cx,Rp,Rpx) :-
    isSquareTerm(Sq,Lc,Op,Args),
    isIden(Op,Lc0,Nm),
    parseContractName(Lc0,Nm,Env,conTract(ConNm,_ATs,_Dps),Rp,Rp0),
    parseContractArgs(Args,Env,B,C0,C1,ArgTps,DepTps,Rp0,Rpx),
    addConstraint(conTract(ConNm,ArgTps,DepTps),C1,Cx).
  parseConstraint(T,_,B,C,C,Rp,Rpx) :-
    reportError("invalid type constraint \(T)",T.loc,Rp,Rpx).

  mergeConstraints:(list[constraint],list[constraint],list[constraint]){}.
  mergeConstraints([],C,C).
  mergeConstraints([C0,..L],C,Cx) :-
    addConstraint(C0,C,C1),
    mergeConstraints(L,C1,Cx).

  addConstraint:(constraint,list[constraint],list[constraint]){}.
  addConstraint(Con,C0,C0) :- Con in C0!.
  addConstraint(Con,C0,[Con,..C0]) :- \+Con in C0.

  parseContractName:(location,string,list[env],constraint,report,report){}.
  parseContractName(_,Id,Env,Con,Rp,Rp) :-
    isContract(Id,Env,conEntry(_,_,Spec,_)),
    (_,Con) = freshen(Spec,[]).
  parseContractName(Lc,Id,_,conTract(Id,[],[]),Rp,Rpx) :-
    reportError("contract \(Id) not declared",Lc,Rp,Rpx).

  parseContractArgs:(list[ast],list[env],map[string,tipe],list[constraint],list[constraint],list[tipe],list[tipe],report,report){}.
  parseContractArgs([A],Env,B,C0,Cx,Args,DepTps,Rp,Rpx) :-
    isBinary(A,"->>",_,L,R),
    prsTypes(deComma(L),Env,B,C0,C1,Args,Rp,Rp0),
    prsTypes(deComma(R),Env,B,C1,Cx,DepTps,Rp0,Rpx).
  parseContractArgs(A,Env,B,C0,Cx,Args,[],Rp,Rpx) :-
    prsTypes(A,Env,B,C0,Cx,Args,Rp,Rpx).

  public parseContractConstraint:(ast,list[env],string,constraint,report,report){}.
  parseContractConstraint(T,Env,N,Con,Rp,Rpx) :-
    parseContractCon(T,Env,[],[],Cons,N,Tp,Rp,Rpx)!,
    wrapConConstraints(Cons,Tp,Con).

  private parseContractCon:(ast,list[env],map[string,tipe],list[constraint],list[constraint],string,constraint,report,report){}.
  parseContractCon(Tp,Env,B,C,C,N,PT,Rp,Rpx) :-
    isQuantified(Tp,V,BT),
    parseConBound(V,B,B0,Env,PT,Inner),
    parseContractCon(BT,Env,B0,[],C0,N,BTp,Rp,Rpx),
    wrapConConstraints(C0,BTp,Inner).
  parseContractCon(Tp,Env,B,C0,Cx,N,Cn,Rp,Rpx) :-
    isBinary(Tp,"|:",_,L,R),
    parseConstraint(L,Env,B,C0,C1,Rp,Rp0),
    parseContractCon(R,Env,B,C1,Cx,N,Cn,Rp0,Rpx).
  parseContractCon(Sq,Env,Q,C0,Cx,N,conTract(Op,ArgTps,DepTps),Rp,Rpx) :-
    isSquareTerm(Sq,Lc,Nm,Args),
    isIden(Nm,_,N),
    parseContractArgs(Args,Env,Q,C0,Cx,ArgTps,DepTps,Rp,Rp0),
    ( parseContractName(Lc,N,Env,conTract(Op,ATs,Dps),Rp0,Rpx) ?
        sameType(tupleType(ATs),tupleType(ArgTps),Env),
        sameType(tupleType(Dps),tupleType(DepTps),Env)
      | reportError("contract \(N) not declared",Lc,Rp0,Rpx), Op = N).

  public parseConBound:(ast,map[string,tipe],map[string,tipe],list[env],constraint,constraint){}.
  parseConBound(P,BV,Bound,Env,QT,Inner) :-
    isBinary(P,",",_,L,R),
    parseConBound(L,BV,B0,Env,QT,Q0),
    parseConBound(R,B0,Bound,Env,Q0,Inner).
  parseConBound(V,B,B[Nm->kFun(Nm,Ar)],Env,univCon(kFun(Nm,Ar),Inner),Inner) :-
    isBinary(V,"/",_,L,R),
    isInteger(R,_,Ar),
    isIden(L,_,Nm).
  parseConBound(V,B,B[Nm->kVar(Nm)],Env,univCon(kVar(Nm),Inner),Inner) :-
    isIden(V,_,Nm).

  public parseTypeCore:(ast,tipe,string){}.
  parseTypeCore(St,Type,Path) :-
    isQuantified(St,_,Body),
    parseTypeCore(Body,Type,Path).
  parseTypeCore(St,Type,Path) :-
    isBinary(St,"|:",_,_,R),
    parseTypeCore(R,Type,Path).
  parseTypeCore(St,Type,Path) :-
    isBinary(St,"<~",_,L,_),
    parseTypeCore(L,Type,Path).
  parseTypeCore(St,Type,Path) :-
    isBinary(St,"~>",_,L,_),
    parseTypeCore(L,Type,Path).
  parseTypeCore(N,tipe(subPath(Path,marker(tpe),Nm)),Path) :-
    isIden(N,_,Nm).
  parseTypeCore(T,tpFun(subPath(Path,marker(tpe),Nm),length(A)),Path) :-
    isSquareTerm(T,_,N,A),
    isIden(N,_,Nm).

  parseTypeHead:(ast,map[string,tipe],tipe,string,report,report){}.
  parseTypeHead(N,_,tipe(subPath(Path,marker(tpe),Nm)),Path,Rp,Rp) :-
    isIden(N,_,Nm).
  parseTypeHead(N,B,typeExp(tpFun(subPath(Path,marker(tpe),TpNm),length(Args)),Args),Path,Rp,Rpx) :-
    isSquareTerm(N,_,Nm,A),
    isIden(Nm,_,TpNm),
    parseHeadArgs(A,B,Args,Rp,Rpx).

  parseHeadArgs:(list[ast],map[string,tipe],list[tipe],report,report){}.
  parseHeadArgs([],_,[],Rp,Rp).
  parseHeadArgs([H,..L],B,[V,..Args],Rp,Rpx) :-
    isIden(H,Lc,Nm),
    (present(B,Nm,V) ? Rp=Rpx | reportError("type argument \(H) not quantified ",Lc,Rp,Rp0)),
    parseHeadArgs(L,B,Args,Rp0,Rpx).

  hasQuant:(ast,map[string,tipe],map[string,tipe],ast,tipe,tipe){}.
  hasQuant(T,M,M1,B,univType(K,In),In) :-
    isBinary(T,"~~",Lc1,L,BB),
    isUnary(L,"all",Lc2,Vs),
    (isBinary(Vs,",",_,Lh,Rh) ?
      getQuant(Lh,M,M1,K),
      B = binary(Lc1,"~~",unary(Lc2,"all",Rh),BB) |
      getQuant(Vs,M,M1,K),
      B = BB).
  hasQuant(T,M,M1,B,existType(K,In),In) :-
    isBinary(T,"~~",Lc1,L,BB),
    isUnary(L,"exists",Lc2,Vs),
    (isBinary(Vs,",",_,Lh,Rh) ?
      getQuant(Lh,M,M1,K),
      B = binary(Lc1,"~~",unary(Lc2,"exists",Rh),BB) |
      getQuant(Vs,M,M1,K),
      B = BB).

  getQuant:(ast,map[string,tipe],map[string,tipe],tipe){}.
  getQuant(X,M,M[Nm->kVar(Nm)],kVar(Nm)) :- isIden(X,_,Nm).
  getQuant(X,M,M[Nm->kFun(Nm,Ar)],kFun(Nm,Ar)) :-
    isBinary(X,"/",_,L,R),
    isInteger(R,_,Ar),
    isIden(L,_,Nm).

  -- reapply quantifiers to a type to get full form
  reQuant:(list[(string,tipe)],tipe,tipe){}.
  reQuant([],Tp,Tp).
  reQuant([(Nm,_),..M],Tp,QTp) :-
    reQuant(M,univType(kVar(Nm),Tp),QTp).

  wrapConstraints:(list[constraint],tipe,tipe){}.
  wrapConstraints([],Tp,Tp).
  wrapConstraints([Con,..C],Tp,WTp) :-
    wrapConstraints(C,constrained(Tp,Con),WTp).

  public wrapConConstraints:(list[constraint],constraint,constraint){}.
  wrapConConstraints([],C,C).
  wrapConConstraints([Con,..L],C,WrCon) :- wrapConConstraints(L,conCon(C,Con),WrCon).

  public rewriteConstraints:(list[constraint],map[string,tipe],list[constraint],list[constraint]){}.
  rewriteConstraints([],_,Cx,Cx).
  rewriteConstraints([Con,..Cons],Q,C0,Cx) :-
    (_,FCon) = freshen(Con,Q),
    addConstraint(FCon,C0,C1),
    rewriteConstraints(Cons,Q,C1,Cx).

    -- reapply quantifiers to a constraint to get full form
  reConQuant:(list[(string,tipe)],constraint,constraint){}.
  reConQuant([],Tp,Tp).
  reConQuant([(Nm,V),..M],Tp,QTp) :-
    reConQuant(M,univCon(V,Tp),QTp).

  checkKind:(typeKind,typeKind,location,report,report){}.
  checkKind(K,K,_,Rp,Rp).
  checkKind(simpleType,K,Lc,Rp,Rpx) :-
    reportError("expecting a simple type, not a \(K)",Lc,Rp,Rpx).
  checkKind(K,simpleType,Lc,Rp,Rpx) :-
    reportError("expecting a \(K) type, not a simple type",Lc,Rp,Rpx).
  checkKind(K1,K2,Lc,Rp,Rpx) :-
    reportError("expecting a \(K1), not a \(K2)",Lc,Rp,Rpx).
}

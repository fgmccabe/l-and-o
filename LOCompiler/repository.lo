lo.comp.repository{
  import lo.
  import lo.uri.
  import lo.resources.
  import lo.comp.misc.
  import lo.comp.parseutils.
  import lo.comp.package.
  import lo.comp.manifest.

  public type repository ::= repo(uri,manifest) | nullRepo.

  public openRepository:(uri) => repository.
  openRepository(Root) => repo(Root,readManifest(resolveUri(Root,parseUri("manifest")))).
  openRepository(Root) => repo(Root,manifest([])).

  public locatePackage:(repository,string,version,version,list[integer]){}.
  locatePackage(Repo,Pkg,V,ActV,Text) :-
    findPkg(Repo,Pkg,V,ActV,Text)!.

  findPkg:(repository,string,version,version,list[integer]){}.
  findPkg(repo(Root,Man),Pkg,V,ActV,getResource(resolveFile(Root,Fn))) :-
    locateVersion(Man,Pkg,V,ActV,Fn).

  resolveFile:(uri,string) => uri.
  resolveFile(Root,Fl) => resolveUri(Root,parseUri(Fl)).

  locateVersion:(manifest,string,version,version,string){}.
  locateVersion(manifest(Entries),Pkg,Vers,Act,Fn) :-
    manifestEntry(Pkg,V) in Entries,
    getVersion(Vers,Act,V,_,Fn).

  getVersion:(version,version,list[(version,uri,string)],uri,string){}.
  getVersion(Vers,Vers,V,U,Fn) :- (Vers,U,Fn) in V!.
  getVersion(defltVersion,Act,V,U,Fn) :- (Act,U,Fn) in V!.

  public addPackage:(repository,uri,string,version,list[integer]) => repository.
  addPackage(repo(Root,Man),U,Pkg,Vers,Text) => repo(Root,NM) :-
    putResource(resolveFile(Root,Pkg+(packageHash(Pkg,Vers)::string)),Text),
    NM = addToManifest(Man,U,Pkg,Vers,Fn),
    flushManifest(Root,NM).

  packageHash:(string,version) => integer.
  packageHash(Pkg,defltVersion) => hash(Pkg).
  packageHash(Pkg,vers(V)) => ((37*hash(Pkg))+hash(V)).

  public packagePresent:(repository,string,version){}.
  packagePresent(repo(Root,manifest(Entries)),Pkg,Vers) :-
    manifestEntry(Pkg,V) in Entries,
    (Vers,_,FN) in V,
    resourcePresent(resolveFile(Root,FN),readMode).
}
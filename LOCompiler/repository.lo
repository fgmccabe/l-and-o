lo.comp.repository{
  import lo.
  import lo.uri.
  import lo.resources.
  import lo.comp.misc.
  import lo.comp.parseutils.
  import lo.comp.package.
  import lo.comp.manifest.

  public type repository ::= repo(uri,manifest) | nullRepo.

  public openRepository:(uri) => repository.
  openRepository(Root) => repo(Root,readManifest(RepoUri)) :-
    RepoUri = resolveUri(Root,parseUri("manifest")),
    resourcePresent(RepoUri).
  openRepository(Root) => repo(Root,manifest([])).

  public locatePackage:(repository,string,version,version,list[integer]){}.
  locatePackage(repo(Root,Man),Pkg,V,ActV,getResource(resolveUri(Root,parseUri(U)))) :-
    locateVersion(Man,Pkg,V,ActV,_,U).

  public locatePrologPackage:(repository,string,version,version,list[integer]){}.
  locatePrologPackage(repo(Root,Man),Pkg,V,ActV,getResource(resolveUri(Root,parseUri(U+".pl")))) :-
    locateVersion(Man,Pkg,V,ActV,_,U).

  public pkgSrcUri:(repository,string,version,version,uri){}.
  pkgSrcUri(repo(Root,Man),Pkg,V,ActV,resolveUri(Root,U)) :-
    locateVersion(Man,Pkg,V,ActV,U,_).

  public resolveFile:(uri,string) => uri.
  resolveFile(Root,Fl) => resolveUri(Root,parseUri(Fl)).

  public addPackage:(repository,uri,pkg,list[integer]) => repository.
  addPackage(repo(Root,Man),U,pkg(Pkg,Vers),Text) => repo(Root,NM) :-
    Fn = Pkg+(packageHash(Pkg,Vers)::string),
    putResource(resolveUri(Root,parseUri(Fn)),Text),
    NM = addToManifest(Man,U,Pkg,Vers,Fn),
    RepoUri = resolveUri(Root,parseUri("manifest")),
    flushManifest(RepoUri,NM).

  public addPrologPackage:(repository,uri,pkg,list[integer]) => repository.
  addPrologPackage(repo(Root,Man),U,pkg(Pkg,Vers),Text) => repo(Root,NM) :-
    Fn = Pkg+(packageHash(Pkg,Vers)::string),
    putResource(resolveUri(Root,parseUri(Fn+".pl")),Text),
    NM = addToManifest(Man,U,Pkg,Vers,Fn),
    RepoUri = resolveUri(Root,parseUri("manifest")),
    flushManifest(RepoUri,NM).

  packageHash:(string,version) => integer.
  packageHash(Pkg,defltVersion) => hash(Pkg).
  packageHash(Pkg,vers(V)) => ((37*hash(Pkg))+hash(V)).

  public packagePresent:(repository,pkg){}.
  packagePresent(repo(Root,Man),pkg(Pkg,Vers)) :-
    locateVersion(Man,Pkg,Vers,_,S,U),
    CodeFile = resolveUri(Root,parseUri(U)),
    SrcFile = resolveUri(Root,S),
    resourcePresent(CodeFile),
    (resourcePresent(SrcFile) ?
        newerFile(CodeFile,SrcFile) | true).

  public prologPackagePresent:(repository,pkg){}.
  prologPackagePresent(repo(Root,Man),pkg(Pkg,Vers)) :-
    locateVersion(Man,Pkg,Vers,_,S,U),
    CodeFile = resolveUri(Root,parseUri(U+".pl")),
    SrcFile = resolveUri(Root,S),
    resourcePresent(CodeFile),
    (resourcePresent(SrcFile) ?
        newerFile(CodeFile,SrcFile) | true).
}

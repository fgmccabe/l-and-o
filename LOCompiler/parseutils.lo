lo.comp.parseutils{
  import lo.

  public iden:(list[integer]) --> list[integer].
  iden([F,..Rest]) --> alpha(F), alphaNumStar(Rest,[]).

  alphaNumStar:(list[integer],list[integer]) --> list[integer].
  alphaNumStar([C,..More],End) --> alphanum(C), alphaNumStar(More,End).
  alphaNumStar(End,End) --> [], \+ alphanum(_).

  public pkgIden:(string) --> list[integer].
  pkgIden(implode([F,..Rest])) --> alpha(F), alphaNumStar(Rest,R0), restPkgIden(R0).

  private restPkgIden:(list[integer]) --> list[integer].
  restPkgIden([0c.,..Rest]) --> ".", alphaNumStar(Rest,R0), restPkgIden(R0).
  restPkgIden([]) --> \+ ".".

  public alpha:(integer)-->list[integer].
  alpha(C) --> (lowAlpha(C) | upAlpha(C)).

  lowAlpha:(integer) --> list[integer].
  lowAlpha(C) --> [C], { isLowAlpha(C) }.

  upAlpha:(integer) --> list[integer].
  upAlpha(C) --> [C], { isUpAlpha(C) }.

  public natural:(list[integer]) --> list[integer].
  natural([F,..R]) --> digit(F), digitStar(R).

  public digit:(integer) --> list[integer].
  digit(C) --> [C], { isDigit(C) }.

  digitStar:(list[integer]) --> list[integer].
  digitStar([X,..M]) --> digit(X), digitStar(M).
  digitStar([]) --> \+ digit(_).

  public alphanum:(integer) --> list[integer].
  alphanum(C) --> (alpha(C) | digit(C)).

  public hex:(integer) --> list[integer].
  hex(C) --> [C], { hexDigitVal(C,_)! }.

  public spaces:()-->list[integer].
  spaces() --> space(), spaces().
  spaces() --> \+ space().

  space:()-->list[integer].
  space() --> ([0c ] | [0c\t] | [0c\n])!.
  space() --> "--", ([0c ] | [0c\t] | [0c\n]), eol(). -- universal comment syntax
  space() --> "/*", block_comment().

  eol:()-->list[integer].
  eol() --> "\n".
  eol() --> [C], { C \= 0c\n}, eol().
  eol() --> eof.

  block_comment:()-->list[integer].
  block_comment() --> "*/".
  block_comment() --> "*", \+ "/", block_comment().
  block_comment() --> [_], block_comment().

  isLowAlpha:(integer){}.
  isLowAlpha(0ca).
  isLowAlpha(0cb).
  isLowAlpha(0cc).
  isLowAlpha(0cd).
  isLowAlpha(0ce).
  isLowAlpha(0cf).
  isLowAlpha(0cg).
  isLowAlpha(0ch).
  isLowAlpha(0ci).
  isLowAlpha(0cj).
  isLowAlpha(0ck).
  isLowAlpha(0cl).
  isLowAlpha(0cm).
  isLowAlpha(0cn).
  isLowAlpha(0co).
  isLowAlpha(0cp).
  isLowAlpha(0cq).
  isLowAlpha(0cr).
  isLowAlpha(0cs).
  isLowAlpha(0ct).
  isLowAlpha(0cu).
  isLowAlpha(0cv).
  isLowAlpha(0cw).
  isLowAlpha(0cx).
  isLowAlpha(0cy).
  isLowAlpha(0cz).

  isUpAlpha:(integer){}.
  isUpAlpha(0cA).
  isUpAlpha(0cB).
  isUpAlpha(0cC).
  isUpAlpha(0cD).
  isUpAlpha(0cE).
  isUpAlpha(0cF).
  isUpAlpha(0cG).
  isUpAlpha(0cH).
  isUpAlpha(0cI).
  isUpAlpha(0cJ).
  isUpAlpha(0cK).
  isUpAlpha(0cL).
  isUpAlpha(0cM).
  isUpAlpha(0cN).
  isUpAlpha(0cO).
  isUpAlpha(0cP).
  isUpAlpha(0cQ).
  isUpAlpha(0cR).
  isUpAlpha(0cS).
  isUpAlpha(0cT).
  isUpAlpha(0cU).
  isUpAlpha(0cV).
  isUpAlpha(0cW).
  isUpAlpha(0cX).
  isUpAlpha(0cY).
  isUpAlpha(0cZ).

  isDigit:(integer){}.
  isDigit(0c0).
  isDigit(0c1).
  isDigit(0c2).
  isDigit(0c3).
  isDigit(0c4).
  isDigit(0c5).
  isDigit(0c6).
  isDigit(0c7).
  isDigit(0c8).
  isDigit(0c9).

  public digitVal:(integer,integer){}.
  digitVal(0c0,0).
  digitVal(0c1,1).
  digitVal(0c2,2).
  digitVal(0c3,3).
  digitVal(0c4,4).
  digitVal(0c5,5).
  digitVal(0c6,6).
  digitVal(0c7,7).
  digitVal(0c8,8).
  digitVal(0c9,9).

  public hexDigitVal:(integer,integer){}.
  hexDigitVal(X,D) :- digitVal(X,D).
  hexDigitVal(0ca,10).
  hexDigitVal(0cb,11).
  hexDigitVal(0cc,12).
  hexDigitVal(0cd,13).
  hexDigitVal(0ce,14).
  hexDigitVal(0cf,15).
  hexDigitVal(0cA,10).
  hexDigitVal(0cB,11).
  hexDigitVal(0cC,12).
  hexDigitVal(0cD,13).
  hexDigitVal(0cE,14).
  hexDigitVal(0cF,15).
}

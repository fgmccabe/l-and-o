lo.comp.location{
  import lo.
  
  public 
  type location <~ {
    merge:(location)=>location.
  }.

  public std:location.
  std{
    merge(Lc) => Lc.
  }

  public loc:(integer,integer,integer,integer,string)<=>location.
  loc(Line,Off,Col,Len,Pth){
    merge(loc(_,OO,C,L,_)) => loc(Line,Off,Col,OO-Off+L,Pth).
  }.

  public
  implementation display[location] .. {
    disp(L) => locDisp(L).
  }

  locDisp:(location)=>ss.
  locDisp(std) => ss("<standard>").
  locDisp(loc(Ln,Off,Col,Len,Pth)) => 
        ssSeq([ss(Pth),ss(":"),disp(Ln),ss("/"),disp(Col),ss("("),disp(Len),ss(")")]).

  public lineOf:(location) => integer.
  lineOf(loc(Line,Off,Col,Len,Pth)) => Line.

  public columnOf:(location) => integer.
  columnOf(loc(Line,Off,Col,Len,Pth)) => Col.

  public widthOf:(location) => integer.
  widthOf(loc(Line,Off,Col,Len,Pth)) => Len.

  public implementation sizeable[location] .. {
    size(loc(_,_,_,Len,_)) => Len.
    size(std) => 0.

    isEmpty(std).
  }

  public type hasLoc <~ { loc:location. }.
}
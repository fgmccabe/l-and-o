lo.comp.types{
  import lo.
  import lo.comp.wff.

  public
  type tipe ::= anonType 
        | voidType
        | thisType
        | kVar(string)
        | tVar(tipe,logical,list[constraint],string,string)
        | tipe(string)
        | typeExp(string,list[tipe])
        | tupleType(list[tipe])
        | funType(tipe,tipe)
        | predType(tipe)
        | grammarType(tipe,tipe)
        | classType(tipe,tipe)
        | typeRule(tipe,tipe)
        | faceType(list[(string,tipe)])
        | constrained(tipe,constraint)
        | univType(tipe,tipe).

  public
  type constraint ::= conTract(string,list[tipe],list[tipe])
        |  implementsFace(tipe,list[(string,tipe)])
        |  conCon(constraint,constraint)
        |  univCon(tipe,constraint).

  public
  implementation display[tipe] .. {
    disp(T) => dispType(T).
  }

  public 
  implementation display[constraint] .. {
    disp(C) => showConstraint(C).
  }

  private
  dispType:(tipe)=>ss.
  dispType(anonType) => ss("_").
  dispType(voidType) => ss("void").
  dispType(thisType) => ss("this").
  dispType(kVar(Nm)) => ss(Nm).
  dispType(tVar(Curr,false,_,_,_)) =>  dispType(Curr) :-  nonvar(Curr) .
  dispType(tVar(_,_,_,Nm,Id)) => ssSeq([ss(Nm),ss("_"),ss(Id)]).
  dispType(tipe(Nm)) =>ss(Nm).
  dispType(typeExp(Nm,A)) => ssSeq([ss(Nm), ss("["),ssSeq(dispTypeEls(A)),ss("]")]).
  dispType(tupleType(A)) => ssSeq([ss("("),ssSeq(dispTypeEls(A)),ss(")")]).
  dispType(funType(A,R)) => ssSeq([dispType(A),ss("=>"), dispType(R)]).
  dispType(grammarType(A,R)) => ssSeq([dispType(A),ss("-->"), dispType(R)]).
  dispType(classType(A,R)) => ssSeq([dispType(A),ss("<=>"), dispType(R)]).
  dispType(predType(A)) => ssSeq([dispType(A),ss("{}")]).
  dispType(univType(V,Tp)) => ssSeq([ss("all "), dispType(V),.. showMoreQuantified(Tp)]).
  dispType(faceType(Els)) => ssSeq([ss("{ "), ssSeq(dispTypeFields(Els)), ss("}")]).
  dispType(typeRule(Hd,Bd)) => ssSeq([dispType(Hd), ss("<~"),dispType(Bd)]).
  dispType(constrained(Tp,Con)) => ssSeq([showConstraint(Con),.. showMoreConstraints(Tp)]).

  showMoreQuantified:(tipe) => list[ss].
  showMoreQuantified(univType(V,Tp)) => [ss(","), dispType(V),.. showMoreQuantified(Tp)].
  showMoreQuantified(Tp) => [ss(" ~~ "),dispType(Tp)].

  showMoreConstraints:(tipe) => list[ss].
  showMoreConstraints(constrained(Tp,Con)) => [ss(","), showConstraint(Con) ,.. showMoreConstraints(Tp)].
  showMoreConstraints(Tp) => [ss("|:"),dispType(Tp)].

  showConstraint:(constraint) => ss.
  showConstraint(conTract(Nm,Args,[])) => ssSeq([ss(Nm),ss("["),ssSeq(dispTypeEls(Args)),ss("]")]).
  showConstraint(conTract(Nm,Args,Deps)) => ssSeq([ss(Nm),ss("["),ssSeq(dispTypeEls(Args)),ss("->>"),ssSeq(dispTypeEls(Deps)),ss("]")]).
  showConstraint(implementsFace(Tp,Els)) => ssSeq([dispType(Tp),ss("<~"),dispType(faceType(Els))]).
  showConstraint(conCon(Con,Extra)) => ssSeq([ssSeq(showMoreCons(Extra)),ss("|:"),showConstraint(Con)]).
  showConstraint(univCon(V,Con)) => ssSeq([ss("all "),dispType(V),..showMoreConQ(Con)]).

  -- This code is ugly. But, we dont have lambdas or higher-order programs at the moment.
  showMoreCons:(constraint) => list[ss].
  showMoreCons(conCon(A,B)) => [showConstraint(B),ss(", "),..showMoreCons(A)].

  showMoreConQ:(constraint) => list[ss].
  showMoreConQ(univCon(V,Con)) => [ss(", "),dispType(V),..showMoreConQ(Con)].
  showMoreConQ(Con) => [ss("~~"),showConstraint(Con)].

  dispTypeEls:(list[tipe]) => list[ss].
  dispTypeEls([]) => [].
  dispTypeEls([T,..M]) => [dispType(T),..showMoreTypes(M)].

  showMoreTypes:(list[tipe]) => list[ss].
  showMoreTypes([]) => [].
  showMoreTypes([T,..M]) => [ss(", "),dispType(T),..showMoreTypes(M)].

  dispTypeFields:(list[(string,tipe)]) => list[ss].
  dispTypeFields([]) => [].
  dispTypeFields([(K,T),..M]) => [ss(K),ss(":"),dispType(T),..showMoreTypeFields(M)].

  showMoreTypeFields:(list[(string,tipe)]) => list[ss].
  showMoreTypeFields([]) => [].
  showMoreTypeFields([(K,T),..M]) => [ss(". "),ss(K),ss(":"),dispType(T),..showMoreTypeFields(M)].

  public
  deRef:(tipe)=>tipe.
  deRef(tVar(Curr,false,_,_,_)) =>  deRef(Curr) :-  nonvar(Curr) .
  deRef(T) => T.

  public
  isUnbound:(tipe){}.
  isUnbound(T) :- deRef(T) = tVar(Curr,_,_,_,_), var(Curr).

  public isTypeVar:(tipe){}.
  isTypeVar(T) :- D=deRef(T), (D=tVar(_,_,_,_,_) | D=kVar(_)).

  public
  isIdenticalVar:(tipe,tipe){}.
  isIdenticalVar(tVar(_,_,_,_,Id),tVar(_,_,_,_,Id)).

  public isIdenticalType:(tipe,tipe){}.
  isIdenticalType(kVar(V),kVar(V)).
  isIdenticalType(T1,T2) :- isIdenticalVar(T1,T2).

  public
  constraints:(tipe)=>list[constraint].
  constraints(tVar(_,_,Con,_,_)) => Con.
  constraints(_) => [].

  private
  collectConstraints:(tipe,list[constraint]) => list[constraint].
  collectConstraints(constrained(T,C),Cx) => collectConstraints(T,[C,..Cx]).
  collectConstraints(T,Cx) => Cx.

  public
  moveConstraints:(tipe,list[constraint],tipe){}.
  moveConstraints(constrained(T,C),[C,..C0],Inner) :-
    moveConstraints(T,C0,Inner).
  moveConstraints(T,[],T).

  public moveQuants:(tipe,list[tipe],tipe){}.
  moveQuants(univType(B,Tp),[B,..Q],Tmpl) :-
    moveQuants(Tp,Q,Tmpl).
  moveQuants(Tp,[],Tp).

  public moveConConstraints:(constraint,list[constraint],constraint){}.
  moveConConstraints(conCon(A,B),[B,..M],I) :-
    moveConConstraints(A,M,I).
  moveConConstraints(C,[],C).

  public moveConQuants:(constraint,list[tipe],constraint){}.
  moveConQuants(univCon(V,C),[V,..Vx],Cx) :-
    moveConQuants(C,Vx,Cx).
  moveConQuants(C,[],C).

  public
  newVar:(string) => tipe.
  newVar(Nm) => tVar(_,false,_,Nm,_str_gen(Nm)).

  public
  bind:(tipe,tipe){}.
  bind(T,Tp) :- \+ occursIn(T,Tp), T=tVar(Tp,_,_,_,_).

  public
  occursIn:(tipe,tipe){}.
  occursIn(T,Tp) :- (T = tVar(Curr,_,_,_,Id) ? ( var(Curr) ? \+sameVar(Id,deRef(Tp)), idOccIn(Id,deRef(Tp)) | occursIn(Curr,Tp)) | false).

  private
  sameVar:(string,tipe){}.
  sameVar(Id,tVar(_,_,_,_,Id)).

  private
  idOccIn:(string,tipe){}.
  idOccIn(Id,tVar(Curr,_,_,_,_)) :- nonvar(Curr), idOccIn(Id,Curr).
  idOccIn(Id,tVar(Curr,_,_,_,Id)) :- var(Curr).
  idOccIn(Id,typeExp(_,A)) :- T in A, idOccIn(Id,T).
  idOccIn(Id,tupleType(A)) :- T in A, idOccIn(Id,T).
  idOccIn(Id,funType(A,_)) :- idOccIn(Id,A).
  idOccIn(Id,funType(_,R)) :- idOccIn(Id,R).
  idOccIn(Id,predType(A)) :- idOccIn(Id,A).
  idOccIn(Id,classType(A,C)) :- idOccIn(Id,A).
  idOccIn(Id,classType(_,C)) :- idOccIn(Id,C).
  idOccIn(Id,grammarType(A,_)) :- idOccIn(Id,A).
  idOccIn(Id,grammarType(_,R)) :- idOccIn(Id,R).
  idOccIn(Id,univType(_,B)) :- idOccIn(Id,B).
  idOccIn(Id,faceType(L)) :- (Fld,A) in L, idOccIn(Id,A).
  idOccIn(Id,constrained(T,_)) :- idOccIn(Id,T).

  public implementationName:(constraint)=>string.
  implementationName(conTract(Nm,Args,_)) =>
    formatSS(ssSeq([ss(Nm),..surfaceNames(Args,marker(con))])).

  surfaceNames:(list[tipe],string) => list[ss].
  surfaceNames([],_) => [].
  surfaceNames([T,..L],M) => [ss(M),ss(surfaceName(deRef(T))),..surfaceNames(L,M)].

  surfaceName:(tipe) => string.
  surfaceName(tipe(Nm)) => Nm.
  surfaceName(typeExp(Nm,_)) =>Nm.
  surfaceName(kVar(Nm)) => Nm.
  surfaceName(tupleType(Els)) => "()\(length(Els))".

  public bindAT:(list[tipe],list[tipe],map[string,tipe]) => map[string,tipe].
  bindAT([],_,Q) => Q.
  bindAT(_,[],Q) => Q.
  bindAT([kVar(N),..L1],[kVar(N),..L2],Q) => bindAT(L1,L2,Q).
  bindAT([kVar(V),..L],[Tp,..TL],Q) => bindAT(L,TL,Q[V->Tp]).

  public typeArity:(tipe) => integer.
  typeArity(funType(E,_)) => typeArity(E).
  typeArity(predType(E)) => typeArity(E).
  typeArity(grammarType(E,_)) => typeArity(E).
  typeArity(classType(E,_)) => typeArity(E).
  typeArity(univType(_,T)) => typeArity(T).
  typeArity(constrained(T,_)) => typeArity(T).
  typeArity(tupleType(L)) => length(L).
  typeArity(faceType(F)) => length(F).
}
lo.comp.singleton {
  import lo.
  import lo.comp.location.

  import lo.comp.canon.
  import lo.comp.errors.
  import lo.comp.escapes.
  import lo.comp.types.

  public checkThetaForSingletons:(list[canonDef],list[canonOther],map[string,(location,integer)],set[string],report,report){}.
  checkThetaForSingletons(Defs,Others,M,Excl,Rp,Rpx) :-
    Ex1 = excludeDefs(Defs,Excl),
    checkVarsInDefs(Defs,M,Ex1,Rp,Rp1),
    checkVarsInOthers(Others,M,Ex1,Rp1,Rpx).

  countVars:(canonTerm,map[string,(location,integer)],set[string],report,report) => map[string,(location,integer)].
  countVars(v(_,"_"),M,_,Rp,Rp) => M.
  countVars(v(_,Nm),M,Excl,Rp,Rp) => M :- (Nm in Excl | isEscape(Nm)).
  countVars(v(_,Nm),M,_,Rp,Rp) => M[Nm->(Lc,Cnt+1)] :- present(M,Nm,(Lc,Cnt)).
  countVars(v(Lc,Nm),M,Excl,Rp,Rp) => M[Nm->(Lc,1)] :- \+Nm in Excl, \+present(M,Nm,_).
  countVars(int(_),M,_,Rp,Rp) => M.
  countVars(flt(_),M,_,Rp,Rp) => M.
  countVars(str(_),M,_,Rp,Rp) => M.
  countVars(apply(_,Op,Arg),M,Excl,Rp,Rpx) => countVars(Arg,countVars(Op,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countVars(tpl(Els),M,Excl,Rp,Rpx) => countVarsInEls(Els,M,Excl,Rp,Rpx).
  countVars(whre(T,C),M,Excl,Rp,Rpx) => countCondVars(C,countVars(T,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countVars(dot(_,T,_),M,Excl,Rp,Rpx) => countVars(T,M,Excl,Rp,Rpx).
  countVars(over(_,T,_),M,Excl,Rp,Rpx) => countVars(T,M,Excl,Rp,Rpx).
  countVars(mtd(_,_),M,_,Rp,Rp) => M.
  countVars(lambda(Rl),M,Excl,Rp,Rpx) => countRlVars(Rl,M,Excl,Rp,Rpx).
  countVars(theta(Defs,Other),M,Excl,Rp,Rp) => M.

  countVarsInEls:(list[canonTerm],map[string,(location,integer)],set[string],report,report) => map[string,(location,integer)].
  countVarsInEls([],M,_,Rp,Rp) => M.
  countVarsInEls([T,..L],M,Excl,Rp,Rpx) => countVarsInEls(L,countVars(T,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).

  countCondVars:(canonCond,map[string,(location,integer)],set[string],report,report) => map[string,(location,integer)].
  countCondVars(trueCond,M,_,Rp,Rp) => M.
  countCondVars(falseCond,M,_,Rp,Rp) => M.
  countCondVars(conjCond(L,R),M,Excl,Rp,Rpx) => countCondVars(R,countCondVars(L,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countCondVars(disjCond(L,R),M,Excl,Rp,Rpx) => countCondVars(R,countCondVars(L,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countCondVars(condCond(T,L,R),M,Excl,Rp,Rpx) => countCondVars(T,countCondVars(R,countCondVars(L,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).
  countCondVars(unifyCond(_,L,R),M,Excl,Rp,Rpx) => countVars(R,countVars(L,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countCondVars(oneCond(R),M,Excl,Rp,Rpx) => countCondVars(R,M,Excl,Rp,Rpx).
  countCondVars(negCond(R),M,Excl,Rp,Rpx) => countCondVars(R,M,Excl,Rp,Rpx).
  countCondVars(forallCond(L,R),M,Excl,Rp,Rpx) => countCondVars(R,countCondVars(L,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countCondVars(callCond(_,O,A),M,Excl,Rp,Rpx) => countVars(A,countVars(O,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countCondVars(isTrue(A),M,Excl,Rp,Rpx) => countVars(A,M,Excl,Rp,Rpx).
  countCondVars(phraseCond(_,N,O,A),M,Excl,Rp,Rpx) => countNTVars(N,countVars(A,countVars(O,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).

  countNTVars:(canonNT,map[string,(location,integer)],set[string],report,report) => map[string,(location,integer)].
  countNTVars(grTerms(Ts),M,Excl,Rp,Rpx) => countVarsInTerms(Ts,M,Excl,Rp,Rpx).
  countNTVars(grCall(_,O,A),M,Excl,Rp,Rpx) => countVars(A,countVars(O,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countNTVars(grTest(C),M,Excl,Rp,Rpx) => countCondVars(C,M,Excl,Rp,Rpx).
  countNTVars(grOne(C),M,Excl,Rp,Rpx) => countNTVars(C,M,Excl,Rp,Rpx).
  countNTVars(grNeg(C),M,Excl,Rp,Rpx) => countNTVars(C,M,Excl,Rp,Rpx).
  countNTVars(grDisj(L,R),M,Excl,Rp,Rpx) => countNTVars(L,countNTVars(R,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countNTVars(grConj(L,R),M,Excl,Rp,Rpx) => countNTVars(L,countNTVars(R,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countNTVars(grCond(T,L,R),M,Excl,Rp,Rpx) => countNTVars(T,countNTVars(L,countNTVars(R,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).
  countNTVars(grDip(T,C),M,Excl,Rp,Rpx) => countVars(T,countCondVars(C,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).

  countVarsInTerms:(list[(location,canonTerm,canonTerm)],map[string,(location,integer)],set[string],report,report) => map[string,(location,integer)].
  countVarsInTerms([],M,_,Rp,Rp) => M.
  countVarsInTerms([(_,S,T),..L],M,Excl,Rp,Rpx) => countVarsInTerms(L,countVars(S,countVars(T,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).

  countRlVars:(canonRule,map[string,(location,integer)],set[string],report,report) => map[string,(location,integer)].
  countRlVars(clause(_,_,A,C),M,Excl,Rp,Rpx) => countCondVars(C,countVars(A,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countRlVars(equation(_,_,A,R,C),M,Excl,Rp,Rpx) => countCondVars(C,countVars(R,countVars(A,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).
  countRlVars(vrDef(_,_,T,C),M,Excl,Rp,Rpx) => countCondVars(C,countVars(T,M,Excl,Rp,Rp0),Excl,Rp0,Rpx).
  countRlVars(clRule(_,_,A,R,C,_),M,Excl,Rp,Rpx) => countCondVars(C,countVars(R,countVars(A,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).
  countRlVars(grRule(_,_,A,C,P),M,Excl,Rp,Rpx) => countNTVars(P,countNTVars(C,countVars(A,M,Excl,Rp,Rp0),Excl,Rp0,Rp1),Excl,Rp1,Rpx).
  countRlVars(tpRule(_,_),M,_,Rp,Rp) => M.

  public excludeDefs:(list[canonDef],set[string]) => set[string].
  excludeDefs([],Excl) => Excl.
  excludeDefs([D,..L],Excl) => excludeDefs(L,declareDef(D,Excl)).

  declareDef:(canonDef,set[string]) => set[string].
  declareDef(funDef(_,Nm,_,_,_),Excl) => addMem(Nm,Excl).
  declareDef(relDef(_,Nm,_,_,_),Excl) => addMem(Nm,Excl).
  declareDef(grammDef(_,Nm,_,_,_),Excl) => addMem(Nm,Excl).
  declareDef(classDef(_,Nm,_,_,_,_),Excl) => addMem(Nm,Excl).
  declareDef(varDef(_,Nm,_,_,_,_),Excl) => addMem(Nm,Excl).
  declareDef(cnDefn(_,_,conEntry(_,_,_,faceType(Fields))),Excl) => foldLeft(((Nm,_),XX) => addMem(Nm,XX),Excl,Fields).
  declareDef(implDef(_,_,Nm,_,_,_,_,_),Excl) => addMem(Nm,Excl).
  declareDef(_,Excl) => Excl.

  checkVarsInDefs:(list[canonDef],map[string,(location,integer)],set[string],report,report){}.
  checkVarsInDefs([],_,_,Rp,Rp).
  checkVarsInDefs([D,..L],M,Excl,Rp,Rpx) :-
    checkVarsInDef(D,M,Excl,Rp,Rp0),
    checkVarsInDefs(L,M,Excl,Rp0,Rpx).

  checkVarsInOthers:(list[canonOther],map[string,(location,integer)],set[string],report,report){}.
  checkVarsInOthers([],_,_,Rp,Rp).
  checkVarsInOthers([D,..L],M,Excl,Rp,Rpx) :-
    checkOtherSingleton(D,M,Excl,Rp,Rp0),
    checkVarsInOthers(L,M,Excl,Rp0,Rpx).

  checkVarsInDef:(canonDef,map[string,(location,integer)],set[string],report,report){}.
  checkVarsInDef(funDef(_,_,_,_,Rls),M,Excl,Rp,Rpx) :-
    checkRuleSingletons(Rls,M,Excl,Rp,Rpx).
  checkVarsInDef(relDef(_,_,_,_,Rls),M,Excl,Rp,Rpx) :-
    checkRuleSingletons(Rls,M,Excl,Rp,Rpx).
  checkVarsInDef(grammDef(_,_,_,_,Rls),M,Excl,Rp,Rpx) :-
    checkRuleSingletons(Rls,M,Excl,Rp,Rpx).
  checkVarsInDef(classDef(_,_,_,_,Rls,_),M,Excl,Rp,Rpx) :-
    checkRuleSingletons(Rls,M,Excl,Rp,Rpx).
  checkVarsInDef(varDef(_,_,_,_,T,_),M,Excl,Rp,Rpx) :-
    checkSingleton(T,M,Excl,Rp,Rpx).
  checkVarsInDef(otherDef(_,O),M,Excl,Rp,Rpx) :-
    checkOtherSingleton(O,M,Excl,Rp,Rpx).
  checkVarsInDef(cnDefn(_,_,_),_,_,Rp,Rp).
  checkVarsInDef(implDef(_,_,_,_,_,T,R,_),M,Excl,Rp,Rpx) :-
    checkSingleton(tpl([T,R]),M,Excl,Rp,Rpx).
  checkVarsInDef(typeDef(_,_,_,_),_,_,Rp,Rp).

  checkSingleton:(canonTerm,map[string,(location,integer)],set[string],report,report){}.
  checkSingleton(T,M,Excl,Rp,Rpx) :-
    reportSingletons(countVars(T,M,Excl,Rp,Rp0),Rp0,Rpx).

  checkOtherSingleton:(canonOther,map[string,(location,integer)],set[string],report,report){}.
  checkOtherSingleton(integrity(_,C),M,Excl,Rp,Rpx) :-
    reportSingletons(countCondVars(C,M,Excl,Rp,Rp0),Rp0,Rpx).
  checkOtherSingleton(expShow(_,T),M,Excl,Rp,Rpx) :-
    reportSingletons(countVars(T,M,Excl,Rp,Rp0),Rp0,Rpx).

  checkRuleSingletons:(list[canonRule],map[string,(location,integer)],set[string],report,report){}.
  checkRuleSingletons([],M,_,Rp,Rp).
  checkRuleSingletons([Rl,..L],M,Excl,Rp,Rpx) :-
    M1 = countRlVars(Rl,M,Excl,Rp,Rp0),
    reportSingletons(M1,Rp0,Rp1),
    checkRuleSingletons(L,M,Excl,Rp1,Rpx).

  reportSingletons:(map[string,(location,integer)],report,report){}.
  reportSingletons(M,Rp,foldMap(((Nm,(Lc,Cnt),Rpi) => Rpj :- reportWarn("singleton occ of \(Nm)",Lc,Rpi,Rpj)),Rp,M ^// ((Nm,(Lc,Cnt)) :- Cnt=<1))).
}

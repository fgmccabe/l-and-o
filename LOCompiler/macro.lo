lo.comp.macro{
  import lo.
  import lo.comp.location.
  import lo.comp.ast.
  import lo.comp.abstract.
  import lo.comp.errors.

  public macroRewrite:(list[ast],list[ast],report,report){}.
  macroRewrite([],[],Rp,Rp).
  macroRewrite([St,..More],Stmts,Rp,Rpx) :-
    isUnary(St,"public",_,Inner),
    isAlgebraicTypeDef(Inner,Lc,Quants,Constraints,Head,Body),
    convertAlgebraic(Lc,markPublic,Quants,Constraints,Head,Body,Stmts,S0,Rp,Rp0),
    macroRewrite(More,S0,Rp0,Rpx).
  macroRewrite([St,..More],Stmts,Rp,Rpx) :-
    isUnary(St,"private",_,Inner),
    isAlgebraicTypeDef(Inner,Lc,Quants,Constraints,Head,Body),
    convertAlgebraic(Lc,markPrivate,Quants,Constraints,Head,Body,Stmts,S0,Rp,Rp0),
    macroRewrite(More,S0,Rp0,Rpx).
  macroRewrite([St,..More],Stmts,Rp,Rpx) :-
    isAlgebraicTypeDef(St,Lc,Quants,Constraints,Head,Body),
    convertAlgebraic(Lc,noMark,Quants,Constraints,Head,Body,Stmts,S0,Rp,Rp0),
    macroRewrite(More,S0,Rp0,Rpx).
  macroRewrite([St,..More],[St,..Stmts],Rp,Rpx) :-
    isContractSpec(St,_,Quants,Constraints,Con,Els),
    generateAnnotations(Els,Quants,[Con,..Constraints],Stmts,S0),
    macroRewrite(More,S0,Rp,Rpx).
  macroRewrite([St,..More],[St,..Stmts],Rp,Rpx) :-
    macroRewrite(More,Stmts,Rp,Rpx).

  private
  type mark ::= markPublic | markPrivate | noMark.

  private mark:(mark,location,ast,ast){}.
  mark(markPublic,Lc,Stmt,unary(Lc,"public",Stmt)).
  mark(markPrivate,Lc,Stmt,unary(Lc,"private",Stmt)).
  mark(noMark,_,Stmt,Stmt).

  -- super simple conversion. Maybe later add support for auto generation of interfaces

  convertAlgebraic:(location,mark,list[ast],list[ast],ast,ast,list[ast],list[ast],report,report){}.
  convertAlgebraic(Lc,Mark,Quants,Constraints,Head,Body,[TypeRule,..Elements],Tail,Rp,Rpx) :-
    algebraicFace(Body,[],Els,Rp,Rpx),
    isBraceTuple(Face,Lc,Els),
    typeRule(Lc,Quants,Constraints,Head,Face,FaceRule),
    mark(Mark,Lc,FaceRule,TypeRule),
    convertConstructors(Body,Head,Mark,Quants,Constraints,Elements,Tail).

  convertConstructors:(ast,ast,mark,list[ast],list[ast],list[ast],list[ast]){}.
  convertConstructors(Pair,Head,Mark,Quants,Constraints,Elements,Tail) :-
    isBinary(Pair,"|",_,L,R),
    convertConstructors(L,Head,Mark,Quants,Constraints,Elements,L1),
    convertConstructors(R,Head,Mark,Quants,Constraints,L1,Tail).
  convertConstructors(Term,Head,Mark,Quants,Constraints,Elements,Tail) :-
    convertConstructor(Term,Head,Mark,Quants,Constraints,Elements,Tail).

  convertConstructor:(ast,ast,mark,list[ast],list[ast],list[ast],list[ast]){}.
  convertConstructor(Nm,Tp,Mark,Quants,Constraints,[TpRule,BodyRule,..Tail],Tail) :-
    isIden(Nm,Lc,_),
    wrapConstraints(Constraints,Lc,Tp,TpCon),
    wrapQuants(Quants,Lc,TpCon,QTp),
    mark(Mark,Lc,binary(Lc,":",Nm,QTp),TpRule),
    bodyRule(Lc,Nm,[],BodyRule).
  convertConstructor(Con,Tp,Mark,Quants,Constraints,[TpRule,BodyRule,..Tail],Tail) :-
    isRoundTerm(Con,Lc,Op,ArgTypes), /* Construct con:(T1,..,Tn)<=>Tp */
    classType(Lc,ArgTypes,Tp,ClassType),
    wrapConstraints(Constraints,Lc,ClassType,CTp),
    wrapQuants(Quants,Lc,CTp,QTp),
    mark(Mark,Lc,binary(Lc,":",Op,QTp),TpRule),
    genAnonArgs(ArgTypes,Args),       /* Construct con(_,..,_) <= thing */
    bodyRule(Lc,roundTerm(Lc,Op,Args),[],BodyRule).
  convertConstructor(Con,Tp,Mark,Quants,Constraints,[TpRule,BodyRule,..Tail],Tail) :-
    isBraceTerm(Con,_,Op,FldTps),
    wrapConstraints(Constraints,Lc,binary(Lc,"<=>",braceTuple(Lc,FldTps),Tp),CTp),
    wrapQuants(Quants,Lc,CTp,QTp),
    mark(Mark,Lc,binary(Lc,":",Op,QTp),TpRule),
    genFieldArgs(FldTps,Args,Defs),
    bodyRule(Lc,roundTerm(Lc,Op,Args),Defs,BodyRule).

  algebraicFace:(ast,list[ast],list[ast],report,report){}.
  algebraicFace(T,SoFar,Face,Rp,Rpx) :-
    isBinary(T,"|",_,L,R),
    algebraicFace(L,SoFar,SF,Rp,Rp0),
    algebraicFace(R,SF,Face,Rp0,Rpx).
  algebraicFace(T,SoFar,SoFar,Rp,Rp) :-
    isRoundTerm(T,_,_,_).
  algebraicFace(T,Face,Face,Rp,Rp) :-
    isIden(T,_,_).
  algebraicFace(T,SoFar,Face,Rp,Rpx) :-
    isBraceTerm(T,_,_,Args),
    pickupFields(Args,SoFar,Face,Rp,Rpx).

  pickupFields:(list[ast],list[ast],list[ast],report,report){}.
  pickupFields([],Face,Face,Rp,Rp).
  pickupFields([T,..M],SF,Face,Rp,Rpx) :-
    isBinary(T,":",Lc,L,R),
    isIden(L,_,Nm),
    checkSoFar(Nm,R,SF,SF0,Rp,Rp0),
    pickupFields(M,[T,..SF0],Face,Rp0,Rpx).
  pickupFields([T,..M],SF,Face,Rp,Rpx) :-
    reportError("invalid type field: \(T)",T.loc,Rp,Rp0),
    pickupFields(M,SF,Face,Rp0,Rpx).

  checkSoFar:(string,ast,list[ast],list[ast],report,report){}.
  checkSoFar(_,_,[],[],Rp,Rp).
  checkSoFar(Nm,T,[P,..L],L,Rp,Rpx) :-
    isBinary(P,":",Lc,NN,RR),
    isIden(NN,_,Nm),
    (sameTerm(RR,T) ? Rp=Rpx | reportError("field \(Nm) : \(T) must be identical to: \(RR)",Lc,Rp,Rpx)).
  checkSoFar(Nm,T,[P,..L],[P,..LL],Rp,Rpx) :-
    checkSoFar(Nm,T,L,LL,Rp,Rpx).

  typeRule:(location,list[ast],list[ast],ast,ast,ast){}.
  typeRule(Lc,Quants,Constraints,Hd,Body,unary(Lc,"type",Rule)) :-
    wrapConstraints(Constraints,Lc,binary(Lc,"<~",Hd,Body),ConRl),
    wrapQuants(Quants,Lc,ConRl,Rule).

  wrapQuants:(list[ast],location,ast,ast){}.
  wrapQuants([],_,Rule,Rule).
  wrapQuants(Q,Lc,Rl,binary(Lc,"~~",unary(Lc,"all",QV),Rl)) :-
    listComma(Q,Lc,QV).

  wrapConstraints:(list[ast],location,ast,ast){}.
  wrapConstraints([],_,Tp,Tp).
  wrapConstraints(Con,Lc,Tp,binary(Lc,"|:",CTp,Tp)) :-
    listComma(Con,Lc,CTp).

  listComma:(list[ast],location,ast){}.
  listComma([T],_,T).
  listComma([T,..R],Lc,binary(Lc,",",T,RR)) :-
    listComma(R,Lc,RR).

  genAnonArgs:(list[ast],list[ast]){}.
  genAnonArgs([],[]).
  genAnonArgs([T,..M],[iden(T.loc,"_"),..A]) :- genAnonArgs(M,A).

  genFieldArgs:(list[ast],list[ast],list[ast]){}.
  genFieldArgs([],[],[]).
  genFieldArgs([F,..M],[V,..R],[binary(Lc,"=",L,V),..AR]) :-
    isBinary(F,":",Lc,L,_),
    V = iden(Lc,_str_gen("_")),
    genFieldArgs(M,R,AR).

  hasType:(location,string,ast,ast){}.
  hasType(Lc,Nm,Tp,binary(Lc,":",iden(Lc,Nm),Tp)).

  classType:(location,list[ast],ast,ast){}.
  classType(Lc,Args,Res,binary(Lc,"<=>",A,Res)) :- isRoundTuple(A,Lc,Args).

  funType:(location,list[ast],ast,ast){}.
  funType(Lc,Args,Res,binary(Lc,"=>",A,Res)) :- isRoundTuple(A,Lc,Args).

  genericType:(location,ast,list[ast],ast){}.
  genericType(Lc,Nm,Args,squareTerm(Lc,Nm,Args)).

  bodyRule:(location,ast,list[ast],ast){}.
  bodyRule(Lc,Hd,Els,binary(Lc,"<=",Hd,braceTuple(Lc,Els))).

  generateAnnotations:(list[ast],list[ast],list[ast],list[ast],list[ast]){}.
  generateAnnotations([],_,_,Stmts,Stmts).
  generateAnnotations([Def,..Els],Quants,Constraints,[binary(Lc,":",N,MTp),..Stmts],S0) :-
    isBinary(Def,":",Lc,N,Tp),
    wrapConstraints(Constraints,Lc,Tp,CTp),
    wrapQuants(Quants,Lc,CTp,MTp),
    generateAnnotations(Els,Quants,Constraints,Stmts,S0).
  generateAnnotations([_,..Els],Quants,Constraints,Stmts,S0) :- -- ignore things like assertions
    generateAnnotations(Els,Quants,Constraints,Stmts,S0).
}

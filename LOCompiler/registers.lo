lo.comp.code.registers{
  import lo.

  import lo.comp.term.

  public type addr ::= voidAddr | aReg(integer) | yReg(integer,logical) | sReg | notAlloc.

  public type varSet ::= usdRegs(set[integer],set[integer],integer).

  public type initialized ::= notInited | inited.

  public type defined ::= notDefined | isDefined.

  public type varDesc ::= varDesc(string,initialized,defined,addr,option[(integer,integer)]).

  public locUsed:(varSet,integer) => varSet.
  locUsed(usdRegs(A,L,G),Lc) => usdRegs(A,addMem(L,Lc),G).

  public regUsed:(varSet,integer) => varSet.
  regUsed(usdRegs(A,L,G),Rg) => usdRegs(addMem(A,Rg),L,G).

  public freeAReg:(varSet,integer) => varSet.
  freeAReg(usdRegs(A,L,G),Rg) => usdRegs(delMem(A,Rg),L,G).

  public lclGc:(varSet,integer) => varSet.
  lclGc(usdRegs(A,L,G),Sz) => usdRegs(A,L,G+Sz).

  public varSlotSz:integer.
  varSlotSz = 2.

  public numRegisters:integer.
  numRegisters = 64.

  public type litrl ::= litrl(string,term).
}
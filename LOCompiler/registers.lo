lo.comp.code.registers{
  import lo.

  import lo.comp.term.

  public type source ::= voidVar | aReg(integer) | yReg(integer,logical) | sReg.

  public type varSet ::= usdRegs(set[integer],set[integer],set[integer],integer).

  public type initialized ::= notInited | inited.

  public type dictEntry ::= dictEntry(string,initialized,source).

  public locUsed:(varSet,integer) => varSet.
  locUsed(usdRegs(A,L,F,G),Lc) => usdRegs(A,addElement(L,Lc),F,G).

  public regUsed:(varSet,integer) => varSet.
  regUsed(usdRegs(A,L,F,G),Rg) => usdRegs(addElement(A,Rg),L,F,G).

  public freeAReg:(varSet,integer) => varSet.
  freeAReg(usdRegs(A,L,F,G),Rg) => usdRegs(removeElement(A,Rg),L,F,G).

  public freeUsed:(varSet,integer) => varSet.
  freeUsed(usdRegs(A,L,F,G),Lc) => usdRegs(A,L,addElement(F,Lc),G).

  public lclGc:(varSet,integer) => varSet.
  lclGc(usdRegs(A,L,F,G),Sz) => usdRegs(A,L,F,G+Sz).

  public varSlotSz:integer.
  varSlotSz = 2.

  public type literal ::= literal(string,term).
}
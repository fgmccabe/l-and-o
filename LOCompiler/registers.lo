lo.comp.code.registers{
  import lo.

  import lo.comp.code.instructions.
  import lo.comp.term.

  public addr ::= voidAddr | aReg(integer) | yReg(integer,logical) | sReg | notAlloc.

  public varSet ::= varSet(set[integer],set[integer],integer).

  public initialized ::= notInited | inited.

  public defined ::= notDefined | isDefined.

  public varDesc ::= varDesc(string,initialized,defined,addr,option[(integer,integer)]).

  public isInitialized:(varDesc){}.
  isInitialized(varDesc(_,inited,_,_,_)).

  public markInited:(varDesc,addr) => varDesc.
  markInited(varDesc(Nm,_,_,_,U),Addr) => varDesc(Nm,inited,isDefined,Addr,U).

  public varAddr:(varDesc)=>addr.
  varAddr(varDesc(_,_,_,A,_))=>A.

  public initVarSet:(integer) => varSet.
  initVarSet(Arity) => varSet(iota(1,Arity)::set[integer],nullSet,0).

  public locUsed:(varSet,integer) => varSet.
  locUsed(varSet(A,L,G),Lc) => varSet(A,addMem(Lc,L),G).

  public regUsed:(varSet,integer) => varSet.
  regUsed(varSet(A,L,G),Rg) => varSet(addMem(Rg,A),L,G).

  public usedRegs:(varSet) => set[integer].
  usedRegs(varSet(A,_,_)) => A.

  public resetUsed:(varSet) => varSet.
  resetUsed(varSet(_,L,G)) => varSet(set([]),L,G).

  public maxReg:(varSet) => integer.
  maxReg(varSet(A,_,_)) => foldRight((X,Y)=>max(X,Y),0,A).

  public freeAReg:(varSet,integer) => varSet.
  freeAReg(varSet(A,L,G),Rg) => varSet(delMem(Rg,A),L,G).

  public pickAreg:(varSet,varSet,addr){}.
  pickAreg(varSet(A,L,G),varSet(addMem(Rg,A),L,G),aReg(Rg)) :-
    (inRange(1,numRegisters,Rg), \+Rg in A)!.

  private inRange:(integer,integer,integer){}.
  inRange(Lo,Hi,Lo).
  inRange(Lo,Hi,El) :- inRange(Lo+1,Hi,El).

  public lclGc:(varSet,integer) => varSet.
  lclGc(varSet(A,L,G),Sz) => varSet(A,L,G+Sz).

  public gcPredict:(varSet) => integer.
  gcPredict(varSet(_,_,G)) => G.

  public resetGc:(varSet) => varSet.
  resetGc(varSet(A,L,_)) => varSet(A,L,0).

  public gcMap:(varSet,map[string,varDesc],integer,integer,list[instruction],instruction){}.
  gcMap(varSet(Rgs,Locs,_),D,Arity,Gp,clearYs(1,none,Esize,Locs)<>clearAs(1,Arity,Rgs),iGcmap(Arity,Esize)) :-
    Esize = foldMap((k,v,u)=>compLclVar(p,v,u),0,D).

  compLclVar:(integer,varDesc,integer) => integer.
  compLclVar(Gp,varDesc(_,_,isDefined,yReg(Lc,_),_),Mx) => Lc :- Lc>Mx.
  compLclVar(_,_,Mx) => Mx.

  clearYs:(integer,option[(integer,integer)],integer,set[integer]) => list[instruction].
  clearYs(Rg,Rnge,Mx,_) => emitClearYs(Rnge) :- Rg > Mx.
  clearYs(Rg,some((Fr,So)),Mx,Locs) => clearYs(Rg+1,some((Fr,So+1)),Mx,Locs) :- \+Rg in Locs, Rg=So+1.
  clearYs(Rg,Rnge,Mx,Locs) => emitClearYs(Rnge) <> clearYs(Rg+1,some((Rg,Rg)),Mx,Locs) :- \+Rg in Locs.
  clearYs(Rg,Rnge,Mx,Locs) => emitClearYs(Rnge) <> clearYs(Rg+1,none,Mx,Locs).

  emitClearYs:(option[(integer,integer)]) => list[instruction].
  emitClearYs(none) => [].
  emitClearYs(some((R,R))) => [iClY(R)].
  emitClearYs(some((F,T))) => [iClYY(F,T-F)] :- T-F<256.
  emitClearYs(some((F,T))) => [iClY(F),..emitClearYs(some((F+1,T)))].

  public clearAs:(integer,integer,set[integer]) => list[instruction].
  clearAs(Rg,Mx,_) => [] :- Rg>Mx.
  clearAs(Rg,Mx,Regs) => [iVdA(Rg),..clearAs(Rg+1,Mx,Regs)] :- \+ Rg in Regs.
  clearAs(Rg,Mx,Regs) => clearAs(Rg+1,Mx,Regs).

  public usedLocals:(varSet) => set[integer].
  usedLocals(varSet(_,L,_)) => L.

  public maxLocals:(varSet) => integer.
  maxLocals(varSet(_,L,_)) => foldRight((X,Y)=>max(X,Y),0,L).

  public varSlotSz:integer.
  varSlotSz = 2.

  public numRegisters:integer.
  numRegisters = 64.

  public implementation display[addr] <= {
    disp(A) => dispAdd(A).
  }

  dispAdd:(addr) => ss.
  dispAdd(voidAddr) => ss("void").
  dispAdd(aReg(R)) => ssSeq([ss("A["),disp(R),ss("]")]).
  dispAdd(yReg(Lc,Sf)) => ssSeq([ss("Y["),disp(Lc), ss((Sf?"/safe"|"/not safe")),ss("]")]).
  dispAdd(sReg) => ss("S").
  dispAdd(notAlloc) => ss("not allocated").

  public implementation display[varDesc] <= {
    disp(V) => dispVarDesc(V).
  }

  dispVarDesc:(varDesc) => ss.
  dispVarDesc(varDesc(Nm,I,D,A,_)) => ssSeq([ss(Nm),ss(" "),disp(I),ss(" "),disp(D),ss(" "),disp(A)]).

  public implementation display[initialized] <= {
    disp(notInited) => ss("not inited").
    disp(inited) => ss("inited").
  }

  public implementation display[defined] <= {
    disp(notDefined) => ss("not defined").
    disp(isDefined) => ss("defined").
  }
}

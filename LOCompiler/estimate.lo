lo.comp.code.estimate{
  import lo.

  import lo.comp.term.

  public estimateUnifySpace:(term,logical)=>integer.
  public estimateArgSpace:(list[term],logical) => integer.
  public estimateGoalSpace:(pred) => integer.

  estimateUnifySpace(anon,_) => 0.
  estimateUnifySpace(varbl(_),true) => 2.
  estimateUnifySpace(varbl(_),false) => 0.
  estimateUnifySpace(T,_) => 0 :- isGroundTerm(T).
  estimateUnifySpace(cons(Op,Els),_) => estimateEls(Els,false)+size(Els)+2.

  estimateEls:(list[term],logical) => integer.
  estimateEls([],_) => 0.
  estimateEls([t,..l],top) => estimateUnifySpace(t,top)+estimateEls(l,top).

  estimateArgSpace(Args,top) => estimateEls(Args,top).

  estimateGoalSpace(call(_,_,Args)) => estimateArgSpace(Args,true).
  estimateGoalSpace(ecall(_,_,Args)) => estimateArgSpace(Args,true).
  estimateGoalSpace(unfy(_,L,R)) => estimateUnifySpace(L,true)+estimateUnifySpace(R,true).
  estimateGoalSpace(dfne(_,L,R)) => estimateUnifySpace(L,true)+estimateUnifySpace(R,true).
  estimateGoalSpace(ocall(_,C,T,L)) => estimateUnifySpace(C,true)+estimateUnifySpace(T,true)+estimateUnifySpace(L,true).
  estimateGoalSpace(neck) => 0.
  estimateGoalSpace(fail) => 0.
  estimateGoalSpace(succ) => 0.
  estimateGoalSpace(cond(_,T,L,R)) => estimateGoalSpace(T)+estimateGoalSpace(L)+estimateGoalSpace(R).
  estimateGoalSpace(conj(_,L)) => foldLeft((g,s)=>s+estimateGoalSpace(g),0,L).
  estimateGoalSpace(except(_,T)) => estimateUnifySpace(T,true).
}

lo.comp.misc{
  import lo.

  public pathSuffix:(string,string) => string.
  pathSuffix(Src,Marker) => After :-  splitString(Src,Marker,Before,After).
  pathSuffix(Src,_) => Src.

  splitString:(string,string,string,string){}.
  splitString(Src,Mrk,Before,After) :-
    _str_find(Src,Mrk,0,Pt),
    _str_split(Src,Pt,Before,Second),
    _str_split(Second,_str_len(Mrk),_,After).

  public type all x,y ~~ pr[x,y] ::= pr(x,y).

  public implementation all x,y ~~ display[x], display[y] |: display[pr[x,y]] .. {
    disp(D) => dispDf(D).
  }

  dispDf: all x,y ~~ display[x], display[y] |: (pr[x,y]) => ss.
  dispDf(pr(X,Y)) => ssSeq([ss("("),disp(X),ss(","),disp(Y),ss(")")]).

  implementation all x,y ~~ equality[x], equality[y] |: equality[pr[x,y]] .. {
    X == Y :- prEq(X,Y).

    hash(D) => prHash(D).
  }

  prEq:all x,y ~~ equality[x], equality[y] |: (pr[x,y],pr[x,y]){}. 
  prEq(pr(X1,Y1),pr(X2,Y2)) :- X1==X2, Y1==Y2.

  prHash:all x,y ~~ equality[x], equality[y] |: (pr[x,y]) => integer.
  prHash(pr(X,Y)) => (37*hash(X))+hash(Y).

  public multiCat:all x ~~ (list[list[x]]) => list[x].
  multiCat([]) => [].
  multiCat([E,..L]) => cat(E,L).

  cat:all x ~~ (list[x], list[list[x]]) => list[x].
  cat([],M) => multiCat(M).
  cat([E,..L],M) => [E,..cat(L,M)].
}
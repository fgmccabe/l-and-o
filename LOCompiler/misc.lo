lo.comp.misc{
  import lo.

  public pathSuffix:(string,string) => string.
  pathSuffix(Src,Marker) => After :-  splitString(Src,Marker,Before,After).
  pathSuffix(Src,_) => Src.

  splitString:(string,string,string,string){}.
  splitString(Src,Mrk,Before,After) :-
    _str_find(Src,Mrk,0,Pt),
    _str_split(Src,Pt,Before,Second),
    _str_split(Second,_str_len(Mrk),_,After).

  public subPath:(string,string,string)=>string.
  subPath(Path,Marker,Suffix) => Path+"."+Suffix :-
    splitString(Path,Marker,_,_).
  subPath(Path,Marker,Suffix) => Path+Marker+Suffix.

  public starts_with:(string,string){}.
  starts_with(S,T) :- _sub_str(S,0,size(T)) == T.

  public type all x,y ~~ pr[x,y] ::= pr(x,y).

  public implementation all x,y ~~ display[x], display[y] |: display[pr[x,y]] <= {
    disp(D) => dispDf(D).
  }

  dispDf: all x,y ~~ display[x], display[y] |: (pr[x,y]) => ss.
  dispDf(pr(X,Y)) => ssSeq([ss("("),disp(X),ss(","),disp(Y),ss(")")]).

  implementation all x,y ~~ equality[x], equality[y] |: equality[pr[x,y]] <= {
    X == Y :- prEq(X,Y).

    hash(D) => prHash(D).
  }

  prEq:all x,y ~~ equality[x], equality[y] |: (pr[x,y],pr[x,y]){}. 
  prEq(pr(X1,Y1),pr(X2,Y2)) :- X1==X2, Y1==Y2.

  prHash:all x,y ~~ equality[x], equality[y] |: (pr[x,y]) => integer.
  prHash(pr(X,Y)) => (37*hash(X))+hash(Y).

  public replace:all x~~(list[x],x,x) => list[x].
  replace([],_,r) => [r].
  replace([e,..l],e,r) => [r,..l].
  replace([e,..l],t,r) => [e,..replace(l,t,r)] :- e\=t.

  public interleave:all x~~(list[x],x) => list[x].
  interleave([],_)=>[].
  interleave([F,..L],S)=>[F,..mixin(L,S)].
  
  private mixin:all x~~(list[x],x)=>list[x].
  mixin([],_)=>[].
  mixin([F,..L],S) =>[S,F,..mixin(L,S)].

  public collect:all x ~~ (list[x],(x){},list[x],list[x]){}.
  collect([],_,[],[]).
  collect([e,..l],p,[e,..m],o) :- p(e), collect(l,p,m,o).
  collect([e,..l],p,m,[e,..o]) :- \+ p(e), collect(l,p,m,o).
}
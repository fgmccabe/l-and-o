lo.comp.args {
  import lo.uri.
  import lo.
  import lo.comp.repository.

  type compOption ::= debugging | profiling | wd(uri) | repo(uri) | version(string).

  public parseFlags:(list[string]) => (list[compOption],list[string]).  
  parseFlags(args) => parseFlgs(args,[]).

  private parseFlgs:(list[string],list[compOption]) => (list[compOption],list[string]).
  parseFlgs([],Opts) => (Opts,[]).
  parseFlgs(["--",..Pkgs],Opts) => (Opts,Pkgs).
  parseFlgs(["-g",..args],Opts) => parseFlgs(args,)


  parseFlags([],CWD,CWD,[],[]).
parseFlags(['-g'|More],CWD,Cx,[debugging|Opts],Files) :- 
  parseFlags(More,CWD,Cx,Opts,Files).
parseFlags(['-p'|More],CWD,Cx,[profiling|Opts],Files) :- 
  parseFlags(More,CWD,Cx,Opts,Files).
parseFlags(['-w',W|M],CW,Cx,Opts,Files) :-
  atom_string(W,WN),
  parseURI(WN,WU),
  resolveURI(CW,WU,CWD),
  parseFlags(M,CWD,Cx,Opts,Files).
parseFlags(['-r', R|More],CWD,Cx,[repository(Repo)|Opts],Files) :- 
  atom_string(R,RN),
  parseURI(RN,RU),
  resolveURI(CWD,RU,Ruri),
  openRepository(Ruri,Repo),
  parseFlags(More,CWD,Cx,Opts,Files).
parseFlags(['-v', V|More],CWD,Cx,[version(Vers)|Opts],Files) :-
  atom_string(V,Vers),
  parseFlags(More,CWD,Cx,Opts,Files).
parseFlags(['--'|More], CWD,CWD, [], Files) :- stringify(More,Files).
parseFlags(More, CWD,CWD, [], Files) :- stringify(More,Files).

stringify([],[]).
stringify([Name|More],[Fn|Files]) :- 
  atom_string(Name,Fn),
  stringify(More,Files).

main(Args) :- 
  getCWDUri(CW),
  parseFlags(Args,CW,CWD,Opts,Pkgs),
  openRepo(Opts,Repo),
  locateCatalog(CWD,Cat),!,
  makeGraph(Repo,Cat,CWD,Pkgs,Groups),
  processGroups(Groups,[],Repo,CWD,Opts).
}
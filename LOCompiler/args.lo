lo.comp.args {
  import lo.uri.
  import lo.resources.
  import lo.
  import lo.either.
  import lo.options.

  import lo.comp.package.
  import lo.comp.errors.

  public compOption <~ {
    debugging : logical.
    profiling : logical.
    prologOnly : logical.
    inlining : logical.
    wDir : uri.
    repoDir : uri.
    version : version.
    pkgs : list[pkg].
    dependency : logical.
  }

  private comp:(logical,logical,logical,logical,uri,uri,version,list[pkg],logical)<=>compOption.
  comp(d,p,l,i,w,r,v,pk,dp) <= {
    debugging = d.
    profiling = p.
    prologOnly = l.
    inlining = i.
    wDir = w.
    repoDir = r.
    version = v.
    pkgs = pk.
    dependency = dp.
  }

  dbgOption:optionsProcessor[compOption].
  dbgOption <= {
    shortForm = "-g".
    alternatives = ["--debug"].
    usage = "-g -- enable symbolic debugging".
    validator = none.
    setOption(_,comp(_,p,l,i,w,r,v,pk,dp)) => comp(true,p,l,i,w,r,v,pk,dp).
  }

  prologOnlyOption:optionsProcessor[compOption].
  prologOnlyOption <= {
    shortForm = "-po".
    alternatives = ["--prolog"].
    usage = "--prolog -- generate prolog code".
    validator = none.
    setOption(_,comp(d,p,_,i,w,r,v,pk,dp)) => comp(d,p,true,i,w,r,v,pk,dp).
  }

  inlineOption:optionsProcessor[compOption].
  inlineOption <= {
    shortForm = "-i".
    alternatives = ["--inline"].
    usage = "--profile -- enable profiling".
    validator = none.
    setOption(_,comp(d,p,l,_,w,r,v,pk,dp)) => comp(d,p,l,true,w,r,v,pk,dp).

  }

  profileOption:optionsProcessor[compOption].
  profileOption <= {
    shortForm = "-p".
    alternatives = ["--profile"].
    usage = "--profile -- enable profiling".
    validator = none.
    setOption(_,comp(d,_,l,i,w,r,v,pk,dp)) => comp(d,true,l,i,w,r,v,pk,dp).

  }

  wdOption:optionsProcessor[compOption].
  wdOption <= {
    shortForm = "-w".
    alternatives = ["--wd"].
    usage = "-w dir -- source directory".
    validator = some(isDir).
    setOption(w,comp(d,p,l,i,_,r,v,pk,dp)) => comp(d,p,l,i,resolveUri(parseUri(cwd()),parseUri(w)),r,v,pk,dp).
  }

  repoOption:optionsProcessor[compOption].
  repoOption <= {
    shortForm = "-r".
    alternatives = ["--repo"].
    usage = "-r dir -- directory of code repository".
    validator = some(isDir).
    setOption(r,comp(d,p,l,i,w,_,v,pk,dp)) => comp(d,p,l,i,w,resolveUri(parseUri(cwd()),parseUri(r)),v,pk,dp).
  }

  dependencyOption:optionsProcessor[compOption].
  dependencyOption <= {
    shortForm = "-nd".
    alternatives = ["--no-dependencies"].
    usage = "--nd -- ignore dependencies".
    validator = none.
    setOption(_,comp(d,p,l,i,w,r,v,pk,_)) => comp(d,p,l,i,w,r,v,pk,false).
  }

  public parseFlags:(list[string]) => either[compOption,string].
  parseFlags(args) =>
    handleCmdLineOpts(processOptions(args,[dbgOption,prologOnlyOption,inlineOption,profileOption,wdOption,repoOption,dependencyOption],
    comp(false,false,false,false,W,W,defltVersion,[],true))) :-
      W=parseUri(cwd()).

  handleCmdLineOpts:(either[(compOption,list[string]),string]) => either[compOption,string].
  handleCmdLineOpts(either((Opts,PkgNms))) => either(updatePkgs(Opts,locatePkgs(Opts,PkgNms))).
  handleCmdLineOpts(alternate(M)) => alternate(M).

  locatePkgs:(compOption,list[string]) => list[pkg].
  locatePkgs(Opts,[]) => [].
  locatePkgs(Opts,[P,..L]) => [pkg(P,Opts.version),..locatePkgs(Opts,L)].

  updatePkgs:(compOption,list[pkg]) => compOption.
  updatePkgs(comp(d,p,l,i,w,r,v,_,dp),pk) => comp(d,p,l,i,w,r,v,pk,dp).
}

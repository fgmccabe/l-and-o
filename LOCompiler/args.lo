lo.comp.args {
  import lo.uri.
  import lo.resources.
  import lo.
  import lo.options.

  import lo.comp.package.
  import lo.comp.errors.

  public type compOption <~ {
    debugging : logical.
    profiling : logical.
    prologOnly : logical.
    wDir : uri.
    repoDir : uri.
    version : version.
    pkgs : list[pkg].
    dependency : logical.
  }

  private comp:(logical,logical,logical,uri,uri,version,list[pkg],logical)<=>compOption.
  comp(d,p,l,w,r,v,pk,dp) <= {
    debugging = d.
    profiling = p.
    prologOnly = l.
    wDir = w.
    repoDir = r.
    version = v.
    pkgs = pk.
    dependency = dp.
  }

  updateDbg:(string,compOption) => compOption.
  updateDbg(_,comp(_,p,l,w,r,v,pk,dp)) => comp(true,p,l,w,r,v,pk,dp).

  updateProlog:(string,compOption) => compOption.
  updateProlog(_,comp(d,p,_,w,r,v,pk,dp)) => comp(d,p,true,w,r,v,pk,dp).

  updateProf:(string,compOption) => compOption.
  updateProf(_,comp(d,_,l,w,r,v,pk,dp)) => comp(d,true,l,w,r,v,pk,dp).

  updateWd:(string,compOption) => compOption.
  updateWd(w,comp(d,p,l,_,r,v,pk,dp)) => comp(d,p,l,parseUri(w),r,v,pk,dp).

  updateRepoD:(string,compOption) => compOption.
  updateRepoD(r,comp(d,p,l,w,_,v,pk,dp)) => comp(d,p,l,w,parseUri(r),v,pk,dp).

  updatePk:(list[pkg],compOption) => compOption.
  updatePk(pk,comp(d,p,l,w,r,v,_,dp)) => comp(d,p,l,w,r,v,pk,dp).

  updateVers:(string,compOption) => compOption.
  updateVers(v,comp(d,p,l,w,r,_,pk,dp)) => comp(d,p,l,w,r,vers(v),pk,dp).

  updateDep:(string,compOption) => compOption.
  updateDep(_,comp(d,p,l,w,r,v,pk,_)) => comp(d,p,l,w,r,v,pk,false).

  dbgOption:optionsProcessor[compOption].
  dbgOption <= {
    shortForm = "-g".
    alternatives = ["--debug"].
    usage = "-g -- enable symbolic debugging".
    validator = none.
    setOption(updateDbg).
  }

  prologOnlyOption:optionsProcessor[compOption].
  prologOnlyOption <= {
    shortForm = "-po".
    alternatives = ["--prolog"].
    usage = "--prolog -- generate prolog code".
    validator = none.
    setOption(updateProlog).
  }

  profileOption:optionsProcessor[compOption].
  profileOption <= {
    shortForm = "-p".
    alternatives = ["--profile"].
    usage = "--profile -- enable profiling".
    validator = none.
    setOption(updateProf).
  }

  wdOption:optionsProcessor[compOption].
  wdOption <= {
    shortForm = "-w".
    alternatives = ["--wd"].
    usage = "-w dir -- source directory".
    validator = some(isDir).
    setOption(updateWd).
  }

  repoOption:optionsProcessor[compOption].
  repoOption <= {
    shortForm = "-r".
    alternatives = ["--repo"].
    usage = "-r dir -- directory of code repository".
    validator = some(isDir).
    setOption(updateRepoD).
  }

  dependencyOption:optionsProcessor[compOption].
  dependencyOption <= {
    shortForm = "-nd".
    alternatives = ["--no-dependencies"].
    usage = "--nd -- ignore dependencies".
    validator = none.
    setOption(updateDep).
  }

  isDir:(string){}.
  isDir(D) :- filePresent(D), fileType(D) = directory.

  public parseFlags:(list[string]) => compOption.
  parseFlags(args) =>

    handleCmdLineOpts(processOptions(args,[dbgOption,prologOnlyOption,profileOption,wdOption,repoOption,dependencyOption],
    comp(false,false,false,W,W,defltVersion,[],true))) :-
      W=parseUri(cwd()).

  handleCmdLineOpts:(either[(compOption,list[string]),string]){}.
  handleCmdLineOpts(either((Opts,PkgNms))) :-
    Repo = (openRepository(parseUri(Opts.repo)),coreRepo),
    importPkgs([parsePkgName(Top)],[],_,Repo),
    invokeMain(Top,Args)

    handleCmdLineOpts(_command_line(),[repoOption,wdOption],bootOptions(cwd(),cwd()))).


    parseFlgs(args,) :- .

  private parseFlgs:(list[string],compOption) => compOption.
  parseFlgs([],Opts) => Opts.
  parseFlgs(["--",..Pkgs],Opts) => updatePk(Opts,locatePkgs(Opts,Pkgs)).
  parseFlgs(["-g",..args],Opts) => parseFlgs(args,updateDbg(Opts,true)).
  parseFlgs(["-p",..args],Opts) => parseFlgs(args,updateProf(Opts,true)).
  parseFlgs(["-l",..args],Opts) => parseFlgs(args,updateProlog(Opts,true)).
  parseFlgs(["-w",W,..args],Opts) => parseFlgs(args,updateWd(Opts,resolveUri(Opts.wDir,WD))) :- uriParse(WD) %% explode(W).
  parseFlgs(["-r",W,..args],Opts) => parseFlgs(args,updateRepoD(Opts,resolveUri(Opts.wDir,D))) :- uriParse(D) %% explode(W).
  parseFlgs(["-v",V,..args],Opts) => parseFlgs(args,updateVers(Opts,vers(V))).
  parseFlgs(["-nd",..args],Opts) => parseFlgs(args,updateDep(Opts,false)).

  parseFlgs([A,..args],Opts) => parseFlgs(args,Opts) :-
    logMsg("unknown option: \(A)").

  locatePkgs:(compOption,list[string]) => list[pkg].
  locatePkgs(_,[]) => [].
  locatePkgs(Opts,[P,..L]) => [pkg(P,Opts.version),..locatePkgs(Opts,L)].
}

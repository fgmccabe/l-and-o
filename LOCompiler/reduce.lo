lo.comp.reduce{
  -- Eliminate some complex patterns by refactoring the match

  import lo.

  import lo.comp.misc.
  import lo.comp.term.

  public reduceClause:(clse) => clse.
  reduceClause(clse(Q,Nm,Args,Body)) => clse(NQ,Nm,NArgs,Guard<>NBody) :-
    reduceArgs(Args,Q,NArgs,Pre,Post,Q1)!,
    reduceBody(Body,Q1,NBody,NQ).

  reduceArgs:(list[term],list[term],list[term],list[pred],list[pred],list[term]){}.
  reduceArgs([],Q,[],[],[],Q).
  reduceArgs([A,..L],Q,[NA,..NL],Pr,Po,Qx) :-
    reduceArg(A,Q,NA,Pr,Pr0,Po,Po0,Q0),
    reduceArgs(L,Q0,NL,Pr0,Po0,Qx).

  reduceArg:(term,list[term],term,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceArg(anon,Q,anon,Pre,Pre,Post,Post,Q).
  reduceArg(varbl(Id),Q,varbl(Id),Pre,Pre,Post,Post,Q).
  reduceArg(intgr(Ix),Q,intgr(Ix),Pre,Pre,Post,Post,Q).
  reduceArg(flot(Dx),Q,flot(Dx),Pre,Pre,Post,Post,Q).
  reduceArg(enum(Id),Q,enum(Id),Pre,Pre,Post,Post,Q).
  reduceArg(strng(Sx),Q,strng(Sx),Pre,Pre,Post,Post,Q).
  reduceArg(cons(Op,Els),Q,cons(Op,NEls),Pre,Prx,Post,Psx,Qx) :-
    reduceTerms(Els,Q,NEls,Pre,Prx,Post,Psx,Qx).
  reduceArg(prg(Nm,Ar),Q,prg(Nm,Ar),Pre,Pre,Post,Post,Q).
  reduceArg(strct(Nm,Ar),Q,strct(Nm,Ar),Pre,Pre,Post,Post,Q).

  reduceTerms:(list[term],list[term],list[term],list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceTerms([],Q,[],Pre,Pre,Post,Post,Q).
  reduceTerms([A,..L],Q,[NA,..NL],Pr,Rpx,Po,Psx,Qx) :-
    reduceTerm(A,Q,NA,Pr,Pr0,Po,Po0,Q0),
    reduceTerms(L,Q0,NL,Pr0,Prx,Po0,Psx,Qx).

  reduceTerm:(term,list[term],term,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceTerm(anon,Q,anon,Pre,Pre,Post,Post,Q).
  reduceTerm(varbl(Id),Q,varbl(Id),Pre,Pre,Post,Post,Q).
  reduceTerm(intgr(Ix),Q,intgr(Ix),Pre,Pre,Post,Post,Q).
  reduceTerm(flot(Dx),Q,flot(Dx),Pre,Pre,Post,Post,Q).
  reduceTerm(enum(Id),Q,enum(Id),Pre,Pre,Post,Post,Q).
  reduceTerm(strng(Sx),Q,strng(Sx),Pre,Pre,Post,Post,Q).
  reduceTerm(cons(Op,Els),Q,VV,Pre,Prx,[unfy(VV,cons(Op,NEls)),..Post],Psx,Qx) :-
    VV = genVr("$%"),
    reduceTerms(Els,Q,NEls,Pre,Prx,Post,Psx,Qx).
  reduceTerm(prg(Nm,Ar),Q,prg(Nm,Ar),Pre,Pre,Post,Post,Q).
  reduceTerm(strct(Nm,Ar),Q,strct(Nm,Ar),Pre,Pre,Post,Post,Q).

  reduceBody:(list[pred],list[term],list[pred],list[term]){}.
  reduceBody([],Q,[],Q).
  reduceBody([P,..L],Q,Pre,NQ) :-
    reducePred(P,Q,NP,Pre,[NP,..Ps],Ps,Psx,Q1),
    reduceBody(L,Q1,Psx,NQ).

  reducePred:(pred,list[term],pred,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reducePred(call(Op,Args),Q,call(NOp,NArgs),Pre,Prx,Post,Psx,Qx) :-
    reduceBildArg(Op,Q,NOp,Pre,Pr0,Post,Ps0,Q0),
    reduceBildArgs(Args,Q0,NArgs,Pr0,Prx,Ps0,Psx,Qx).
  reducePred(ecall(Op,Args),Q,ecall(Op,NArgs),Pr,Prx,Ps,Psx,Qx) :-
    reduceBildArgs(Args,Q,NArgs,Pr,Prx,Ps,Psx,Qx).
  reducePred(ocall(Cl,Lb,Th),Q,ocall(NCl,NLb,NTh),Pre,Prx,Pos,Psx,Qx) :-
    reduceBildArg(Cl,Q,NCl,Pre,Pr0,Post,Ps0,Q0),
    reduceBildArg(Lb,Q0,NLb,Pr0,Pr1,Ps0,Ps1,Q1),
    reduceBildArg(Th,Q1,NTh,Pr1,Prx,Ps1,Psx,Qx).
  reducePred(unfy(L,R),Q,unfy(NL,NR),Pre,Prx,Pos,Psx,Qx) :-
    reduceBildArg(L,Q,NL,Pre,Pr0,Post,Ps0,Q0),
    reduceBildArg(R,Q0,NR,Pr0,Prx,Ps0,Psx,Qx).
  reducePred(neck,Q,neck,Pr,Pr,Ps,Ps,Q).
  reducePred(fail,Q,fail,Pr,Pr,Ps,Ps,Q).
  reducePred(except(E),Q,except(NE),Pre,Prx,Pos,Psx,Qx) :-
    reduceBildArg(E,Q,NE,Pre,Prx,Post,Psx,Qx).

  reduceBildArgs:(list[term],list[term],list[term],list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceBildArgs([],Q,[],Pre,Pre,Post,Post,Q).
  reduceBildArgs([A,..L],Q,[NA,..NL],Pr,Prx,Po,Pox,Qx) :-
    reduceBildArg(A,Q,NA,Pr,Pr0,Po,Po0,Q0),
    reduceBildArgs(L,Q0,NL,Pr0,Prx,Po0,Pox,Qx).

  reduceBildArg:(term,list[term],term,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceBildArg(anon,Q,anon,Pre,Pre,Post,Post,Q).
  reduceBildArg(varbl(Id),Q,varbl(Id),Pre,Pre,Post,Post,Q).
  reduceBildArg(intgr(Ix),Q,intgr(Ix),Pre,Pre,Post,Post,Q).
  reduceBildArg(flot(Dx),Q,flot(Dx),Pre,Pre,Post,Post,Q).
  reduceBildArg(enum(Id),Q,enum(Id),Pre,Pre,Post,Post,Q).
  reduceBildArg(strng(Sx),Q,strng(Sx),Pre,Pre,Post,Post,Q).
  reduceBildArg(cons(Op,Els),Q,cons(Op,NEls),Pre,Prx,Post,Psx,Qx) :-
    reduceBildTerms(Els,Q,NEls,Pre,Prx,Post,Psx,Qx).
  reduceBildArg(prg(Nm,Ar),Q,prg(Nm,Ar),Pre,Pre,Post,Post,Q).
  reduceBildArg(strct(Nm,Ar),Q,strct(Nm,Ar),Pre,Pre,Post,Post,Q).

  reduceBildTerms:(list[term],list[term],list[term],list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceBildTerms([],Q,[],Pre,Pre,Post,Post,Q).
  reduceBildTerms([A,..L],Q,[NA,..NL],Pr,Rpx,Po,Psx,Qx) :-
    reduceBildTerm(A,Q,NA,Pr,Pr0,Po,Po0,Q0),
    reduceBildTerms(L,Q0,NL,Pr0,Prx,Po0,Psx,Qx).

  reduceBildTerm:(term,list[term],term,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  reduceBildTerm(anon,Q,anon,Pre,Pre,Post,Post,Q).
  reduceBildTerm(varbl(Id),Q,varbl(Id),Pre,Pre,Post,Post,Q).
  reduceBildTerm(intgr(Ix),Q,intgr(Ix),Pre,Pre,Post,Post,Q).
  reduceBildTerm(flot(Dx),Q,flot(Dx),Pre,Pre,Post,Post,Q).
  reduceBildTerm(enum(Id),Q,enum(Id),Pre,Pre,Post,Post,Q).
  reduceBildTerm(strng(Sx),Q,strng(Sx),Pre,Pre,Post,Post,Q).
  reduceBildTerm(cons(Op,Els),Q,VV,Pre,Prx,Post,Psx,Qx) :-
    VV = genVr("$%"),
    reduceBildTerms(Els,Q,NEls,Pre,[unfy(VV,cons(Op,NEls)),..Prx],Post,Psx,Qx).
  reduceBildTerm(prg(Nm,Ar),Q,prg(Nm,Ar),Pre,Pre,Post,Post,Q).
  reduceBildTerm(strct(Nm,Ar),Q,strct(Nm,Ar),Pre,Pre,Post,Post,Q).
}

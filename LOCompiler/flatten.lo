lo.comp.flatten{
  import lo.

  import lo.comp.misc.
  import lo.comp.package.
  import lo.comp.term.
  import lo.comp.types.

  -- Flatten a program - eliminating nested function calls

  public flattenProg:(prProg) => prProg.
  flattenProg(prProg(Spec,Rels)) => prProg(Spec,Rels///((Nm,Rel)=>flattenRel(Rel))).

  flattenRel:(rel) => rel.
  flattenRel(rel(Nm,Lc,Rls)) => rel(Nm,Lc,Rls//((Rl)=>flattenRule(Rl))).

  flattenRule:(clse) => clse.
  flattenRule(clse(Q,Nm,Args,Body)) => clse(NQ,Nm,NArgs,Guard<>NBody) :-
    flattenTerms(Args,Q,NArgs,Guard,Post,Post,[],Q1)!,
    flattenBody(Body,Q1,NBody,[],NQ).
  flattenRule(eqn(Q,Nm,Args,guarded(Rep,G))) => eqn(NQ,Nm,NArgs,guarded(simplifyGuard(guarded(NRep,PrR)),Guard)) :-
    flattenTerms(Args,Q,NArgs,G0,Post,Post,[],Q0)!,
    flattenBody(G,Q0,Guard,G0,Q1),
    flattenTerm(Rep,Q1,NRep,PrR,PsR,PsR,[],NQ).
  flattenRule(eqn(Q,Nm,Args,Rep)) => eqn(NQ,Nm,NArgs,guarded(simplifyGuard(guarded(NRep,PrR)),Guard)) :-
    flattenTerms(Args,Q,NArgs,Guard,Post,Post,[],Q0)!,
    flattenTerm(Rep,Q0,NRep,PrR,PsR,PsR,[],NQ).

  flattenTerm:(term,list[term],term,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  flattenTerm(anon,Q,anon,Pre,Pre,Post,Post,Q).
  flattenTerm(varbl(Id),Q,varbl(Id),Pre,Pre,Post,Post,Q).
  flattenTerm(T,Q,T,Pre,Pre,Post,Post,Q) :- isGroundTerm(T).
  flattenTerm(cons(Op,Els),Q,cons(Op,NEls),Pre,Prx,Post,Psx,Qx) :-
    flattenTerms(Els,Q,NEls,Pre,Prx,Post,Psx,Qx).
  flattenTerm(invoke(Lc,Op,Args),Q,Res,Pre,Prx,Post,Psx,Qx) :-
    genVarbl("_R",Res),
    flattenTerm(Op,[Res,..Q],NOp,Pre,Pre0,Post,Pst0,Q0),
    flattenTerms(Args,Q0,NArgs,Pre0,Prx,Pst0,[unfy(Lc,Res,invoke(Lc,NOp,NArgs)),..Psx],Qx).
  flattenTerm(escvoke(Lc,Es,Args),Q,Res,Pre,Prx,Post,Psx,Qx) :-
    genVarbl("_R",Res),
    flattenTerms(Args,[Res,..Q],NArgs,Pre,Prx,Post,[unfy(Lc,Res,escvoke(Lc,Es,NArgs)),..Psx],Qx).
  flattenTerm(ovoke(Lc,Call,Lb,Th),Q,Res,Pre,Prx,Post,Psx,Qx) :-
    genVarbl("_R",Res),
    flattenTerm(Call,[Res,..Q],NCall,Pre,Pre0,Post,Pst0,Q0),
    flattenTerm(Lb,Q0,NLb,Pre0,Pre1,Pst0,Pst1,Q1),
    flattenTerm(Th,Q0,NTh,Pre1,Prx,Pst1,[unfy(Lc,Res,ovoke(Lc,NCall,NLb,NTh)),..Psx],Qx).
  flattenTerm(guarded(T,C),Q,Res,Pre,Prx,Post,Psx,Qx) :-
    flattenTerm(T,Q,Res,Pr0,Prx,Post,Psx,Q1),
    flattenBody(C,Q1,Pre,Pr0,Qx).

  flattenTerms:(list[term],list[term],list[term],list[pred],list[pred],list[pred],list[pred],list[term]){}.
  flattenTerms([],Q,[],Pre,Pre,Post,Post,Q).
  flattenTerms([A,..L],Q,[NA,..NL],Pr,Prx,Po,Psx,Qx) :-
    flattenTerm(A,Q,NA,Pr,Pr0,Po,Po0,Q0),
    flattenTerms(L,Q0,NL,Pr0,Prx,Po0,Psx,Qx).

  flattenBody:(list[pred],list[term],list[pred],list[pred],list[term]){}.
  flattenBody([],Q,Pr,Pr,Q).
  flattenBody([P,..L],Q,Pre,Prx,NQ) :-
    flattenPred(P,Q,NP,Pre,Ps,Ps,[NP,..P2],Q1),
    flattenBody(L,Q1,P2,Prx,NQ).

  flattenPred:(pred,list[term],pred,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  flattenPred(call(TLc,Op,Args),Q,call(TLc,NOp,NArgs),Pre,Prx,Post,Psx,Qx) :-
    flattenTerm(Op,Q,NOp,Pre,Pr0,Post,Ps0,Q0),
    flattenTerms(Args,Q0,NArgs,Pr0,Prx,Ps0,Psx,Qx).
  flattenPred(ecall(TLc,Op,Args),Q,ecall(TLc,Op,NArgs),Pr,Prx,Ps,Psx,Qx) :-
    flattenTerms(Args,Q,NArgs,Pr,Prx,Ps,Psx,Qx).
  flattenPred(ocall(TLc,Cl,Lb,Th),Q,ocall(TLc,NCl,NLb,NTh),Pre,Prx,Post,Psx,Qx) :-
    flattenTerm(Cl,Q,NCl,Pre,Pr0,Post,Ps0,Q0),
    flattenTerm(Lb,Q0,NLb,Pr0,Pr1,Ps0,Ps1,Q1),
    flattenTerm(Th,Q1,NTh,Pr1,Prx,Ps1,Psx,Qx).
  flattenPred(unfy(TLc,L,R),Q,NP,Pre,Prx,Post,Psx,Qx) :-
    flattenUnify(TLc,L,R,Q,NP,Pre,Prx,Post,Psx,Qx).
  flattenPred(neck,Q,neck,Pr,Pr,Ps,Ps,Q).
  flattenPred(fail,Q,fail,Pr,Pr,Ps,Ps,Q).
  flattenPred(except(TLc,E),Q,except(TLc,NE),Pre,Prx,Pos,Psx,Qx) :-
    flattenTerm(E,Q,NE,Pre,Prx,Post,Psx,Qx).

  flattenUnify:(option[tloc],term,term,list[term],pred,list[pred],list[pred],list[pred],list[pred],list[term]){}.
  flattenUnify(Lc,varbl(V),invoke(ILc,Op,Args),Q,unfy(Lc,varbl(V),invoke(ILc,NOp,NArgs)),Pre,Prx,Pst,Pstx,Qx) :-
    flattenTerm(Op,Q,NOp,Pre,Pr0,Pst,Pst0,Q0),
    flattenTerms(Args,Q0,NArgs,Pr0,Prx,Pst0,Pstx,Qx).
  flattenUnify(Lc,invoke(ILc,Op,Args),varbl(V),Q,unfy(Lc,varbl(V),invoke(ILc,NOp,NArgs)),Pre,Prx,Pst,Pstx,Qx) :-
    flattenTerm(Op,Q,NOp,Pre,Pr0,Pst,Pst0,Q0),
    flattenTerms(Args,Q0,NArgs,Pr0,Prx,Pst0,Pstx,Qx).
  flattenUnify(Lc,L,R,Q,unfy(Lc,NL,NR),Pre,Prx,Pst,Pstx,Qx) :-
    flattenTerm(L,Q,NL,Pre,Pr0,Pst,Pst0,Q0),
    flattenTerm(R,Q0,NR,Pr0,Prx,Pst0,Pstx,Qx).
}

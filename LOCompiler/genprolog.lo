lo.comp.genprolog{
  import lo.

  import lo.comp.encode.
  import lo.comp.flatten.
  import lo.comp.package.
  import lo.comp.term.
  import lo.comp.transutils.
  import lo.comp.types.

  public implementation coercion[prProg,string] <= {
    _coerce(P) => formatSS(prog2code(flattenProg(P))).
  }

  prog2code:(prProg) => ss.
  prog2code(prProg(Spec,Rels)) => ssSeq([genTerm(genPrologSig(Spec)),ss(".\n"),..values(Rels)//genRel]).

  genPrologSig:(pkgSpec) => term.
  genPrologSig(Spec) => cons(strct("#pkg",1),[packageSig(Spec)]).

  genRel:(rel) => ss.
  genRel(rel(Nm,Lc,Clses)) => ssSeq((Clses<>[genFailsafe(Nm,Lc)])//genCl) :- eqn(_,_,_,_) in Clses.
  genRel(rel(Nm,Lc,Clses)) => ssSeq(Clses//genCl).

  genFailsafe:(term,option[tloc]) => clse.
  genFailsafe(prg(Nm,Ar),Lc) =>
    clse([],prg(Nm,Ar),genAnons(Ar),[except(Lc,cons(strct("error",2),[strng(Nm),genLoc(Lc)]))]).

  genLoc:(option[tloc]) => term.
  genLoc(none) => enum("lo.core#none").
  genLoc(some(tloc(Line,Off,Col,Len))) => cons(strct("lo.core#some",1),[cons(strct("()4",4),[intgr(Line),intgr(Off),intgr(Col),intgr(Len)])]).

  genCl:(clse) => ss.
  genCl(clse(_,Nm,Args,[])) => ssSeq([genTerm(Nm),ss("("),genArgs(Args),ss(")"),ss(".\n")]).
  genCl(clse(_,Nm,Args,Body)) => ssSeq([genTerm(Nm),ss("("),genArgs(Args),ss("):-"),ssSeq(genPreds(Body,"",_)),ss(".\n")]).
  genCl(eqn(_,Nm,Args,guarded(Rep,Body))) =>
    ssSeq([genTerm(Nm),ss("("),genArgs(Args<>[R]),ss(") :- "),
          ssSeq(genPreds(Body,"",Sep)),ss(Sep),ss("!,"),genPred(unfy(_,R,Rep)),ss(".\n")]) :- genVarbl("_R",R).
  genCl(eqn(_,Nm,Args,Rep)) =>
    ssSeq([genTerm(Nm),ss("("),genArgs(Args<>[R]),ss(") :- !,\n    "),genPred(unfy(_,R,Rep)),ss(".\n")]) :- genVarbl("_R",R).

  genPreds:(list[pred],string,string) => list[ss].
  genPreds([],S,S) => [].
  genPreds([P,..L],S,Sx) => [ss(S),genPred(P),..genPreds(L,",\n    ",Sx)].

  genPred:(pred) => ss.
  genPred(call(_,Op,Args)) => ssSeq([genTerm(Op),ss("("),genArgs(Args),ss(")")]).
  genPred(ecall(_,Op,Args)) => ssSeq([genId(Op),ss("("),genArgs(Args),ss(")")]).
  genPred(unfy(Lc,L,R)) => genFunCall(unfy(Lc,L,R)).
  genPred(ocall(_,Call,Lb,Th)) => ssSeq([ss("ocall("),genTerm(Call),ss(","),genTerm(Lb),ss(","),genTerm(Th),ss(")")]).
  genPred(neck) => ss("!").
  genPred(fail) => ss("fail").
  genPred(except(_,E)) => ssSeq([ss("raise_exception"),ss("("),genTerm(E),ss(")")]).

  genFunCall:(pred) => ss.
  genFunCall(unfy(Lc,L,guarded(R,P))) => ssSeq(genPreds(P,"",Sep)<>[ss(Sep),genFunCall(unfy(Lc,L,R))]).
  genFunCall(unfy(_,L,invoke(Lc,Op,Args))) => ssSeq([genTerm(Op),ss("("),genArgs(Args<>[L]),ss(")")]).
  genFunCall(unfy(_,L,escvoke(Lc,Op,Args))) => ssSeq([genId(Op),ss("("),genArgs(Args<>[L]),ss(")")]).
  genFunCall(unfy(_,L,ovoke(Lc,Cl,Lb,Th))) => ssSeq([ss("ofun("),genTerm(Cl),ss(","),genTerm(Lb),ss(","),genTerm(Th),ss(","),genTerm(L),ss(")")]).
  genFunCall(unfy(_,L,R)) => ssSeq([genTerm(L),ss(" = "),genTerm(R)]).

  genTerm:(term) => ss.
  genTerm(anon) => ss("_").
  genTerm(varbl(Nm)) => ssSeq([ss("_"),ss(Nm)]).
  genTerm(intgr(Ix)) => disp(Ix).
  genTerm(flot(Dx)) => disp(Dx).
  genTerm(strng(Sx)) => ssSeq([ss("\""),ss(implode(genQuoted(explode(Sx),0c"))),ss("\"")]).
  genTerm(enum(Nm)) => genId(Nm).
  genTerm(strct(Nm,_)) => genId(Nm).
  genTerm(prg(Nm,_)) => genId(Nm).
  genTerm(cons(Op,Args)) => ssSeq([genTerm(Op),ss("("),genArgs(Args),ss(")")]).

  genArgs:(list[term]) => ss.
  genArgs([]) => ssSeq([]).
  genArgs([T,..L]) => ssSeq([genTerm(T),..genMoreArgs(L)]).

  genMoreArgs:(list[term]) => list[ss].
  genMoreArgs([]) => [].
  genMoreArgs([T,..L]) => [ss(", "),genTerm(T),..genMoreArgs(L)].

  genId:(string) => ss.
  genId(Id) => ssSeq([ss("'"),ss(implode(genQuoted(explode(Id),0c'))),ss("'")]).

  genQuoted:(list[integer],integer) => list[integer].
  genQuoted([],_) => [].
  genQuoted([Qt,..L],Qt) => [0c\\,Qt,..genQuoted(L,Qt)].
  genQuoted([0c",..L],Qt) => [0c\\,0c",..genQuoted(L,Qt)].
  genQuoted([0c\\,..L],Qt) => [0c\\,0c\\,..genQuoted(L,Qt)].
  genQuoted([C,..L],Qt) => [C,..genQuoted(L,Qt)].
}

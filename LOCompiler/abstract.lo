lo.comp.abstract{
  -- Utilities for parsing ast structures

  import lo.
  import lo.comp.ast.
  import lo.comp.keywords.
  import lo.comp.location.
  import lo.comp.package.

  public
  defnKind ::= tpe | con | impl | valu | clss | imp.

  public marker:(defnKind)=>string.
  marker(tpe)=>"*".
  marker(valu)=>"@".
  marker(clss)=>"#".
  marker(con)=>"$".

  public isScalar:(ast){}.
  isScalar(intg(_,_)).
  isScalar(flot(_,_)).
  isScalar(strg(_,_)).

  public isIden:(ast,location,string){}.
  isIden(iden(Lc,Nm),Lc,Nm).
  isIden(tupl(Lc,"()",[iden(_,Nm)]),Lc,Nm).

  public isCurryDollar:(ast){}.
  isCurryDollar(A) :- isIden(A,_,"$").

  public genIden:(location)=>ast.
  genIden(Lc) => iden(Lc,_str_gen("N")).

  public isString:(ast,location,string){}.
  isString(strg(Lc,St),Lc,St).

  public isInteger:(ast,location,integer){}.
  isInteger(intg(Lc,Ix),Lc,Ix).

  public isBinary:(ast,string,location,ast,ast){}.
  isBinary(appl(Lc,iden(_,Nm),tupl(_,"()",[L,R])),Nm,Lc,L,R).

  public
  binary:(location,string,ast,ast) => ast.
  binary(Lc,Op,L,R) => appl(Lc,iden(Lc,Op),tupl(Lc,"()",[L,R])).

  public isUnary:(ast,string,location,ast){}.
  isUnary(appl(Lc,iden(_,Nm),tupl(_,"()",[L])),Nm,Lc,L).

  public
  unary:(location,string,ast) => ast.
  unary(Lc,Op,A) => appl(Lc,iden(Lc,Op),tupl(Lc,"()",[A])).

  public isTernary:(ast,string,location,ast,ast,ast){}.
  isTernary(appl(Lc,iden(_,Nm),tupl(_,"()",[L,M,R])),Nm,Lc,L,M,R).

  public ternary:(location,string,ast,ast,ast)=>ast.
  ternary(Lc,Nm,L,M,R) => appl(Lc,iden(Lc,Nm),tupl(Lc,"()",[L,M,R])).

  public
  isSquareTerm:(ast,location,ast,list[ast]){}.
  isSquareTerm(appl(Lc,Op,tupl(_,"[]",A)),Lc,Op,A).

  public
  squareTerm:(location,ast,list[ast]) => ast.
  squareTerm(Lc,Op,Els) => appl(Lc,Op,tupl(Lc,"[]",Els)).

  public
  isBraceTerm:(ast,location,ast,list[ast]){}.
  isBraceTerm(appl(Lc,Op,tupl(_,"{}",A)),Lc,Op,A).

  public
  isBrace:(ast,location,ast,ast){}.
  isBrace(appl(Lc,Op,A),Lc,Op,A) :- \+ keyword(Op), isBraceTuple(A,_,_).

  public braceTerm:(location,ast,list[ast]) => ast.
  braceTerm(Lc,Op,Els) => appl(Lc,Op,tupl(Lc,"{}",Els)).

  public
  isRoundTuple:(ast,location,list[ast]){}.
  isRoundTuple(tupl(Lc,"()",A),Lc,A).

  public roundTuple:(location,list[ast]) => ast.
  roundTuple(Lc,Els) => tupl(Lc,"()",Els).

  public
  isSquareTuple:(ast,location,list[ast]){}.
  isSquareTuple(tupl(Lc,"[]",A),Lc,A).

  public
  isBraceTuple:(ast,location,list[ast]){}.
  isBraceTuple(tupl(Lc,"{}",A),Lc,A).

  public
  braceTuple:(location,list[ast]) => ast.
  braceTuple(Lc,Els) => tupl(Lc,"{}",Els).

  public
  mapTuple:(location,list[ast]) => ast.
  mapTuple(Lc,Els) => tupl(Lc,"{}",Els).

  public
  isRoundTerm:(ast,location,ast,list[ast]){}.
  isRoundTerm(appl(Lc,Op,tupl(_,"()",A)),Lc,Op,A) :- \+ keyword(Op).

  public
  isRound:(ast,location,ast,ast){}.
  isRound(appl(Lc,Op,A),Lc,Op,A) :- \+ keyword(Op), isRoundTuple(A,_,_).

  public
  roundTerm:(location,ast,list[ast]) => ast.
  roundTerm(Lc,Op,Els) => appl(Lc,Op,tupl(Lc,"()",Els)).

  public
  keyword:(ast){}.
  keyword(iden(_,Nm)) :- isKeyword(Nm).

  public
  deComma:(ast) => list[ast].
  deComma(T) => [L,..deComma(R)] :-  isBinary(T,",",_,L,R).
  deComma(T) => [T].

  public reComma:(list[ast]) => ast.
  reComma([A]) => A.
  reComma([A,..R]) => binary(A.loc,",",A,reComma(R)).

  public sameTerm:(ast,ast){}.
  sameTerm(iden(_,Nm),iden(_,Nm)).
  sameTerm(intg(_,Ix),intg(_,Ix)).
  sameTerm(flot(_,Dx),flot(_,Dx)).
  sameTerm(strg(_,S),strg(_,S)).
  sameTerm(tupl(_,T,A),tupl(_,T,B)) :-
    sameTerms(A,B).
  sameTerm(appl(_,OA,AA),appl(_,OB,BA)) :-
    sameTerm(OA,OB),
    sameTerm(AA,BA).

  private sameTerms:(list[ast],list[ast]){}.
  sameTerms([],[]).
  sameTerms([A,..L1],[B,..L2]) :-
    sameTerm(A,B),
    sameTerms(L1,L2).

  public isTypeAnnotation:(ast,location,string,ast){}.
  isTypeAnnotation(St,Lc,Nm,Tp) :-
    isBinary(St,":",Lc,L,Tp),
    isIden(L,_,Nm).

  public isAlgebraicTypeDef:(ast,location,list[ast],list[ast],ast,ast){}.
  isAlgebraicTypeDef(Stmt,Lc,Quants,Constraints,Head,Body) :-
    getQuantifiers(Stmt,Quants,Inner),
    getConstraints(Inner,Constraints,TpStmt),
    isBinary(TpStmt,"::=",Lc,Head,Body).

  public isTypeRule:(ast){}.
  isTypeRule(St) :-
    isQuantified(St,_,Inner),
    isTypeRule(Inner).
  isTypeRule(St) :-
    isConstrained(St,_,Inner),
    isTypeRule(Inner).
  isTypeRule(St) :-
    isBinary(St,"<~",_,_,_).
  isTypeRule(St) :-
    isBinary(St,"~>",_,_,_).

  public isQuantified:(ast,ast,ast){}.
  isQuantified(T,V,B) :-
    isBinary(T,"~~",_,L,B),
    isUnary(L,"all",_,V).

  getQuantifiers:(ast,list[ast],ast){}.
  getQuantifiers(T,deComma(V),B) :- isQuantified(T,V,B).
  getQuantifiers(T,[],T).

  public isContractSpec:(ast,location,list[ast],list[ast],ast,list[ast]){}.
  isContractSpec(St,Lc,Quants,Constraints,Con,Body) :-
    isUnary(St,"contract",Lc,I),
    isBinary(I,"<~",_,Con,R),
    isBraceTuple(R,_,Body),
    contractSpec(L,Quants,Constraints,Con).

  contractSpec:(ast,list[ast],list[ast],ast){}.
  contractSpec(S,deComma(V),Constraints,Con) :-
    isQuantified(S,V,B),
    contractSpec(B,_,Constraints,Con).
  contractSpec(S,[],deComma(L),Con) :-
    isBinary(S,"|:",_,L,Con).
  contractSpec(S,[],[],S).

  public isConstrained:(ast,list[ast],ast){}.
  isConstrained(T,deComma(L),R) :-
    isBinary(T,"|:",_,L,R).

  private getConstraints:(ast,list[ast],ast){}.
  getConstraints(T,deComma(L),R) :-
    isBinary(T,"|:",_,L,R).
  getConstraints(T,[],T).

  public wrapQuants:(list[ast],location,ast)=>ast.
  wrapQuants([],_,Rule) => Rule.
  wrapQuants(Q,Lc,Rl) => binary(Lc,"~~",unary(Lc,"all",QV),Rl) :-
    listComma(Q,Lc,QV).

  public wrapConstraints:(list[ast],location,ast) => ast.
  wrapConstraints([],_,Tp) => Tp.
  wrapConstraints(Con,Lc,Tp) => binary(Lc,"|:",CTp,Tp) :-
    listComma(Con,Lc,CTp).

  listComma:(list[ast],location,ast){}.
  listComma([T],_,T).
  listComma([T,..R],Lc,binary(Lc,",",T,RR)) :-
    listComma(R,Lc,RR).

  public isImplementation:(ast,location,ast,list[ast]){}.
  isImplementation(St,Lc,Con,Els) :-
    isUnary(St,"implementation",Lc,R),
    isBinary(R,"<=",_,Con,RR),
    isBraceTuple(RR,_,Els).

  public packageName:(ast) => string.
  packageName(T) =>  Pkg :-  isIden(T,_,Pkg).
  packageName(T) =>  Pkg :-  isString(T,_,Pkg).
  packageName(T) => packageName(L)+"."+packageName(R) :- isBinary(T,".",_,L,R).

  public
  pkgName:(ast) => pkg.
  pkgName(T) => pkg(packageName(L),vers(packageVersion(R))) :-
    isBinary(T,"#",_,L,R).
  pkgName(T) => pkg(packageName(T),defltVersion).

  packageVersion:(ast) => string.
  packageVersion(T) =>  Pkg :-  isIden(T,_,Pkg).
  packageVersion(T) =>  Pkg :-  isString(T,_,Pkg).
  packageVersion(T) =>  "\(Ix)" :-  isInteger(T,_,Ix).
  packageVersion(T) =>  packageVersion(L)+"."+packageVersion(R) :-  isBinary(T,".",_,L,R).

  public
  tupleize:(ast,string,ast){}.
  tupleize(P,Op,tupl(Lc,Op,[L,..deComma(R)])) :-
    isBinary(P,",",Lc,L,R).
  tupleize(P,Op,tupl(P.loc,Op,[P])).


}

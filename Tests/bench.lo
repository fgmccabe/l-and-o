/*
   benchmark, adapted from  BENCH.PL : The classic Prolog benchmark

	Supplied by Quintus Computer Systems, Inc.
	April 30th 1984

  Modified to run in L&O using monads to sequentialize things properly
*/
test.bench{
  import lo.
  import lo.monad.
  import lo.action.

  get_cpu_time:()=>float.
  get_cpu_time() => _ticks().

  nrev:all t ~~ (list[t],list[t]){}.
  nrev([],[]).
  nrev([X,..Rest],Ans) :- nrev(Rest,L), append(L,[X],Ans).

  append:all t ~~ (list[t],list[t],list[t]){}.
  append([],L,L).
  append([X,..L1],L2,[X,..L3]) :- append(L1,L2,L3).

  data:(list[integer]){}.
  data([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
        21,22,23,24,25,26,27,28,29,30]).

  eg_count:(integer){}.
  eg_count(100).
  eg_count(200).
  eg_count(500).
  eg_count(1000).
  eg_count(2000).
  eg_count(5000).
  eg_count(10000).

  benchTest:(integer)=>string.
  benchTest(Count) => calculate_lips(Count,testTime-dummyTime):-
    dummyTime = _perform(timeTest((():-dodummy(Count)))),
    -- _logmsg("dummy time for \(Count) is \(dummyTime)"),
    testTime = _perform(timeTest((():-dobench(Count)))),
    _logmsg("test time is \(testTime)").

  timeTest:((){}) => action[float].
  timeTest(F) => return get_cpu_time() >>= runTest(F).

  runTest:((){}) => ((float)=>action[float]).
  runTest(T) => ((St)=>delta(St) :- T()).

  delta:(float) => action[float].
  delta(St) => return (get_cpu_time()-St).

  dobench:(integer){}.
  dobench(Count) :-
      data(List),
      repeat(Count),
      nrev(List,_),
      false.
  dobench(_).

  dodummy:(integer){}.
  dodummy(Count) :-
      data(List),
      repeat(Count),
      dummy(List,_),
      false.
  dodummy(_).

  dummy:all t ~~ (t,t){}.
  dummy(_,_).

  repeat:(integer){}.
  repeat(_).
  repeat(N) :- N > 1, repeat(N-1).

  calculate_lips:(integer,float) => string.
  calculate_lips(Count,Time) => "\(Sp)\(Units) lips for \(Count) iterations, taking \(Time) seconds":- megaLip((496*Count)::float/Time,Sp,Units).

  scale ::= unit | kilo | mega.
  implementation display[scale] <= {
    disp(unit) => ss("").
    disp(kilo) => ss("K").
    disp(mega) => ss("M").
  }

  megaLip:(float,float,scale){}.
  megaLip(0.0,0.0,unit).
  megaLip(L,L,unit) :- L<1000.0.
  megaLip(L,L/1000.0,kilo) :- L>=1000.0,L<1000000.0.
  megaLip(L,L/1000000.0,mega) :- L>=1000000.0.

  assert eg_count(C) *> _logmsg(benchTest(C)).
}

maps{
  import lo.

  all u,v ~~ pair[u,v] ::= pair(u,v).

  implementation
  all u,v ~~ display[u], display[v] |: display[pair[u,v]] .. {
    disp(P) => dispPair(P).
  }

  private
  dispPair:all u,v ~~ display[u], display[v] |: (pair[u,v]) => ss.
  dispPair(pair(A,B)) => ssSeq([ss("("),disp(A),ss(", "),disp(B),ss(")")]).

  myPairs:map[string,integer].
  myPairs = {"A"->1. "B"->2. "C"->3. }

  allPairs:map[string,pair[integer,integer]].
  allPairs = {"A"->pair(1,2). "B"->pair(3,4). }

  otherPairs:map[string,pair[integer,integer]].
  otherPairs = {"C"->pair(5,6). "B"->pair(7,8)}.

  show myPairs.
  show allPairs.
  show otherPairs.

  show allPairs+otherPairs.

  checkMap:(string,map[string,pair[integer,integer]]) => option[pair[integer,integer]].
  checkMap(Ky,Mp) => some(Vl) :- present(Mp,Ky,Vl).
  checkMap(_,_) => none.

  assert checkMap("A",allPairs) = some(pair(1,2)).

  assert otherPairs["B"] = some(pair(7,8)).
}

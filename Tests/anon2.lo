/*
 * Testing inner classes with inheritance
*/
test.anon2{
  import lo.
  import lo.io.
  import lo.unit.

  bf <~ { mem:(string){}. }.

  beliefs:(list[string])<=>bf.
  beliefs(I)<={                         -- A simple belief store
    mem(X) :- X in I.
  }.

  ot <~ { bfs:()=>bf. }.			      -- a bfs has a belief store

  outer:(list[string])<=>ot.
  outer(X)<={
    b:bf.
    b=beliefs(X).
    bfs()=>b.
  }.

  foo <~ { iBelieve:(string){}. }. -- A foo can believe things

  XX <~ { belief:(string){}. }.    -- An XXX can be checked, and has beliefs
  XX <~ ot.

  inner:(list[string]) <=> XX.
  inner(X) <= outer(X).			            -- inner inherits its belief store
  inner(Bfs) <= {
    belief(B) :- bfs().mem(B).		      -- we believe things that are in our belief store

    OO:foo.                             -- inner class - is a foo
    OO<={
          iBelieve(B) :- belief(B).     -- inherited from outer (i.e., enclosing class)
      }.
    checkMe() :-			                  -- check my beliefs
      belief(B) *> OO.iBelieve(B).
  }.

  anon:harness.
  anon<=harness("inner class").         -- test harness
  anon<={
    doPred() :-
        II = inner(["A","C","D"]),      -- what do we believe?
        II.belief("A"),
        \+ II.belief("B").
  }.

  assert checkUnit(anon).
}

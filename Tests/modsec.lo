test.modsec{
  -- Test of L&O by parsing modsecurity rules.

  import lo.
  import lo.uri.
  import lo.resources.
  import lo.json.

  -- import test.parsetools.

  modSecRule ::= modSecRule(list[msgTgt],string,list[msAct]) | modSecMarker(string).

  msgTgt ::= tgtVar(string) | negTgt(msgTgt) | indexed(msgTgt,string).

  msAct ::= single(string) | id(string) | tag(string) | other(string,string).

  -- Hint to the run-time:
  main:(list[string]){}.
  main(Args) :-
    processFiles(parseArgs(Args),parseUri(cwd()),meta([],[]),M),
    _logmsg("Analysis is \(M::json)").

  parseArgs:(list[string]) => list[uri].
  parseArgs([]) => [].
  parseArgs([f,..l]) => [parseUri(f),..parseArgs(l)].

  processFiles:(list[uri],uri,meta,meta){}.
  processFiles([],_,M,M).
  processFiles([u,..l],c,M,Mx) :-
    procFile(resolveUri(c,u),L,M,M0),
    processFiles(l,c,M0,Mx).

  procFile:(uri,list[modSecRule],meta,meta){}.
  procFile(U,Rls,M,Mx) :-
    (lines(Lns) %% getResource(U))!,
    -- _logmsg("Lines are \(Lns::list[string])"),
    Tks = tokenize(Lns),
    _logmsg("Tokens are \(Tks)"),
    Rls = secRules(Tks),
    _logmsg("Rules are \(Rls::list[json])"),
    analyseRules(Rls,M,Mx).

  private analyseRules:(list[modSecRule],meta,meta){}.
  analyseRules([],M,M).
  analyseRules([Rl,..l],M,Mx) :-
    analyseRules(l,M.addRule(Rl),Mx).

  meta <~ { tgts:map[string,list[string]]. tags:map[string,list[string]]. addRule:(modSecRule) => meta. }

  private meta:(map[string,list[string]],map[string,list[string]]) <=> meta.
  meta(Tgts,Tags) <= {
    tgts = Tgts.
    tags = Tags.
    addRule(Rl) => meta(merge(Tgts,M.target,M.id),merge(Tags,M.tags,M.id)) :- extractMetaFromRule(Rl,M).
    addRule(_) => this.

    private merge:(map[string,list[string]],list[string],string) => map[string,list[string]].
    merge(M,[],_) => M.
    merge(M,[e,..l],i) => merge(M[e->[i,..ids]],l,i) :- present(M,e,ids).
    merge(M,[e,..l],i) => merge(M[e->[i]],l,i).
  }

  implementation coercion[meta,json] => {
    _coerce(M) => meta2json(M).
  }

  private meta2json:(meta)=>json.
  meta2json(meta(Tgts,Tags)) => jColl(["targets" -> jColl(tags2json(Tgts)), "tags"->jColl(tags2json(Tags))]).

  tags2json:(map[string,list[string]]) => map[string,json].
  tags2json(M) => mapMap(M,lst).

  lst:(list[string]) => json.
  lst(L) => jSeq(listify(L)).

  private listify:(list[string]) => list[json].
  listify([])=>[].
  listify([s,..l]) => [jTxt(s),..listify(l)].

  extractMetaFromRule:(modSecRule,{id:string. target:list[string]. tags:list[string]}){}.
  extractMetaFromRule(modSecRule(Tgts,Pth,Acts),metaAnal(Id,Tgts//extractTgt,findTags(Acts,[]))) :-
    id(Id) in Acts.

  private metaAnal:(string,list[string],list[string]) <=> {id:string. target:list[string]. tags:list[string]}.
  metaAnal(Id,Tgt,Tags) <= {
    id = Id.
    target = Tgt.
    tags = Tags.
  }

  extractTgt:(msgTgt)=>string.
  extractTgt(tgtVar(Nm)) => Nm.
  extractTgt(indexed(T,Nm)) => extractTgt(T)+":"+Nm.
  extractTgt(negTgt(T)) => "!"+extractTgt(T).

  findTags:(list[msAct],list[string]) => list[string].
  findTags([],Tgs) => Tgs.
  findTags([tag(T),..l],Tgs) => findTags(l,[T,..Tgs]).
  findTags([_,..l],Tgs) => findTags(l,Tgs).

  implementation display[modSecRule] => {
    disp(modSecRule(Tgt,Ptn,A)) => ssSeq([ss("SecRule:"),ssSeq(Tgt//dispTgt),ss(" "),ss(Ptn),ss("-->"),dispActions(A)]).
    disp(modSecMarker(Id)) => ssSeq([ss("SecMarker:"),ss(Id)]).
  }

  implementation display[msAct] => {
    disp(single(S)) => ss(S).
    disp(id(S)) => ssSeq([ss("id:'"),ss(S),sc(0c')]).
    disp(tag(S)) => ssSeq([ss("tag:'"),ss(S),sc(0c')]).
    disp(other(V,A)) => ssSeq([ss(V),ss(":'"),ss(A),ss("'")]).
  }

  private dispTgt:(msgTgt) => ss.
  dispTgt(tgtVar(Nm)) => ss(Nm).
  dispTgt(negTgt(T)) => ssSeq([ss("!"),dispTgt(T)]).
  dispTgt(indexed(V,O)) => ssSeq([dispTgt(V),ss(":"),ss(O)]).

  private dispActions:(list[msAct]) => ss.
  dispActions(A) => disp(A).

  implementation coercion[modSecRule,json] => {
    _coerce(modSecRule(Tgts,Ptn,[])) =>  jColl(["SecRule" -> jColl(["target" -> jSeq(jStrings(Tgts//extractTgt)), "pattern"->jTxt(Ptn)])]).
    _coerce(modSecRule(Tgts,Ptn,Action)) => jColl(["SecRule" -> jColl(["target" -> jSeq(jStrings(Tgts//extractTgt)), "pattern"->jTxt(Ptn), "action"->jSeq(jActions(Action))])]).
    _coerce(modSecMarker(Id)) => jColl(["SecMarker" -> jTxt(Id)]).
  }

  jActions:(list[msAct]) => list[json].
  jActions([]) => [].
  jActions([S,..L]) => [S::json,..jActions(L)].

  implementation coercion[msAct,json] => {
    _coerce(single(A)) => jColl(["verb"->jTxt(A)]).
    _coerce(id(I)) => jColl(["id" -> jTxt(I)]).
    _coerce(tag(T)) => jColl(["tag"->jTxt(T)]).
    _coerce(other(V,A)) => jColl(["verb"->jTxt(V), "arg"->jTxt(A)]).
  }

  jStrings:(list[string]) => list[json].
  jStrings([]) => [].
  jStrings([S,..L]) => [jTxt(S),..jStrings(L)].

  secRules:(list[list[secTkn]]) => list[modSecRule].
  secRules([]) => [].
  secRules([Ln,..L]) => [Rl,..secRules(L)] :- rule(Rl) %% Ln.

  -- Parse a line as a mod security rule
  rule:(modSecRule) --> list[secTkn].
  rule(modSecRule(Tgt,Ptn,Action)) --> [secRule], target(Tgt), pattern(Ptn), actions(Action).
  rule(modSecMarker(implode(Id))) --> [secMarker], [idn(Id)].

  target:(list[msgTgt]) --> list[secTkn].
  target([T,..LT]) --> tgt(T), moreTgts(LT).

  moreTgts:(list[msgTgt]) --> list[secTkn].
  moreTgts([T,..L]) --> [bar], tgt(T), moreTgts(L).
  moreTgts([]) --> [].

  tgt:(msgTgt) --> list[secTkn].
  tgt(negTgt(T)) --> [pling], tgt(T).
  tgt(T) --> [amp], tgt(T).
  tgt(Tgt) --> [idn(Nm)], tgtModifier(tgtVar(implode(Nm)),Tgt).

  tgtModifier:(msgTgt,msgTgt) --> list[secTkn].
  tgtModifier(V,indexed(V,implode(Txt))) --> [colon], [idn(Txt)].
  tgtModifier(V,Tgt) --> [lbra, idn(Txt), rbra], tgtModifier(indexed(V,implode(Txt)),Tgt).
  tgtModifier(V,V) --> [].

  pattern:(string) --> list[secTkn].
  pattern(P) --> [strg(S)], {P = implode(S)}.

  actions:(list[msAct]) --> list[secTkn].
  actions(A) --> [strg(S)], { (spaces(), actionSeq(A)) %% S}.
  actions([A]) --> [idn(S)], {action(A) %% S}.
  actions([]) --> eof.

  actionSeq:(list[msAct]) --> list[integer].
  actionSeq([]) --> eof.
  actionSeq([I,..L]) --> action(I), spaces(), moreActions(L).

  moreActions:(list[msAct]) --> list[integer].
  moreActions([]) --> eof.
  moreActions(L) --> ",", spaces(), actionSeq(L).

  action:(msAct) --> list[integer].
  action(id(I)) --> "id:", spaces(), arg(I).
  action(tag(T)) --> "tag:", spaces(), arg(T).
  action(other(implode(V),A)) --> iden(V), spaces(), ":", spaces(), arg(A).
  action(single(implode(A))) --> iden(A).

  arg:(string) --> list[integer].
  arg(implode(A)) --> "'", frag(A,[],0c')!, "'".
  arg(implode(A)) --> frag(A,[],0c,).

  iden:(list[integer]) --> list[integer].
  iden([C,..L]) --> idChar(C), moreIden(L).

  idChar:(integer) --> list[integer].
  idChar(0c_) --> [0c_].
  idChar(0c-) --> [0c-].
  idChar(0c/) --> [0c/].
  idChar(0c*) --> [0c*].
  idChar(Ch) --> [Ch] , {_isLetterChar(Ch)}.
  idChar(Ch) --> [Ch] , {_isNdChar(Ch) }!.

  moreIden:(list[integer]) --> list[integer].
  moreIden([C,..L]) --> idChar(C), moreIden(L).
  moreIden([]) --> [].

  -- Absorb the \eol markers into a sequence of lines.

  lines:(list[list[integer]]) --> list[integer].
  lines([]) --> eof.
  lines(Lns) --> line(Ln)!, {glue(Lns,Ln,Rest)}, lines(Rest).

  line:(list[integer]) --> list[integer].
  line([]) --> "\n".
  line(Ln) --> "\\\n", line(Ln).
  line([C,..L]) --> [C],line(L).
  line([]) --> eof.

  private glue:(list[list[integer]],list[integer],list[list[integer]]){}.
  glue(Text,Ln,Text) :- blankLine(Ln)!.
  glue([Ln,..Rest],Ln,Rest) :- \+blankLine(Ln).

  private blankLine:(list[integer]){}.
  blankLine([]).
  blankLine(L) :- spaces() %% L.

  -- Tokenization of modsecurity source

  private secTkn ::= secRule | secAction | secDefaultAction | secMarker | secRuleUpdate
   | idn(list[integer]) | strg(list[integer]) | colon | bar | pling | lbra | rbra | amp.

  implementation display[secTkn] => {
    disp(secAction) => ss("SecAction").
    disp(secRule) => ss("SecRule").
    disp(secMarker) => ss("SecMarker").
    disp(secDefaultAction) => ss("SecDefaultAction").
    disp(secRuleUpdate) => ss("SecRuleUpdate").
    disp(strg(Seq)) => ssSeq([ss("\""), ss(implode(Seq)), ss("\"")]).
    disp(idn(Text)) => ssSeq([ss("'"), ss(implode(Text)), ss("'")]).
    disp(bar) => ss("|").
    disp(pling) => ss("!").
    disp(colon) => ss(":").
    disp(lbra) => ss("[").
    disp(rbra) => ss("]").
    disp(amp) => ss("&").
  }

  tokenize:(list[list[integer]]) => list[list[secTkn]].
  tokenize([]) => [].
  tokenize([l,..ll]) => [tks,..tokenize(ll)] :- tokens(tks) %% l.

  tokens:(list[secTkn]) --> list[integer].
  tokens(Toks) --> spaces(), moreToks(Toks).

  spaces:()-->list[integer].
  spaces() --> space(), spaces().
  spaces() --> \+ space().

  space:()-->list[integer].
  space() --> ([0c ] | [0c\t])!.
  space() --> "#", eol().

  eol:()-->list[integer].
  eol() --> "\n".
  eol() --> [C], { C \= 0c\n}, eol().
  eol() --> eof.

  moreToks:(list[secTkn]) --> list[integer].
  moreToks([]) --> eof.
  moreToks([Tok,..More]) --> token(Tok), tokens(More).

  token:(secTkn) --> list[integer].
  token(secRule) --> ("SecRule"|"secrule"|"Secrule"|"SECRULE")!.
  token(secAction) --> ("SecAction"|"Secaction"|"secaction"|"SECACTION")!.
  token(secMarker) --> ("SecMarker"|"Secmarker"|"secmarker"|"SECMARKER")!.
  token(strg(Seq)) --> "\"", stringText(Seq,0c"), "\"".
  token(colon) --> ":".
  token(pling) --> "!".
  token(amp) --> "&".
  token(bar) --> "|".
  token(idn(Text)) --> iden(Text).
  token(idn(Text)) --> "/", frag(Text,[],0c/), "/".
  token(idn(Text)) --> "'", stringText(Seq,0c'), "'".

  frag:(list[integer],list[integer],integer) --> list[integer].
  frag(L,L,_) --> eof.
  frag(L,X,Dl) --> [0c\\,0c\\], frag(L,X,Dl).
  frag([0c\\,..L],X,Dl) --> [0c\\], frag(L,X,Dl).
  frag(L,L,Dl) --> [Dl]+.
  frag([C,..L],X,Dl) --> [C], frag(L,X,Dl).

  stringText:(list[integer],integer) --> list[integer].
  stringText([C,..More],Qt) --> "\\", [C], stringText(More,Qt).
  stringText([C,..More],Qt) --> [C], { C \= Qt }, stringText(More,Qt).
  stringText([],Qt) --> [Qt]+.
}

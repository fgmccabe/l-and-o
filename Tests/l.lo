test.l{
  import lo.

/*
  public
  implementation all x ~~ stream[list[x] ->> x] <= {
    _eof([]).
    _hdtl([E,..L],E,L).
  }
*/

  public implementation all x ~~ additive[x] |: additive[option[x]] ..{
    X+Y => optAdd(X,Y).
    X-Y => optMinus(X,Y).
    zero = none.
  }

  optAdd:all x ~~ additive[x] |: (option[x],option[x]) => option[x].
  optAdd(none,XA) => XA.
  optAdd(AX,none) => AX.
  optAdd(some(AX),some(AY)) => some(AX+AY).

  optMinus:all x ~~ additive[x] |: (option[x],option[x]) => option[x].
  optMinus(none,X) => X.
  optMinus(X,none) => X.
  optMinus(some(X),some(Y)) => some(X-Y).

  fact:(integer) => integer.
  fact(XF) => _int_plus(XF,XF).

  ff:(integer)=>integer.
  ff=fact.

  assert ff(3)=fact(3).

  import test.mapp.

  inc1:(integer) => integer.
  inc1(XI) => XI+1.

  assert mapp([1,2,3],inc1) == [2,3,4].

  banjo:(integer)<=>{incr:(integer)=>integer}.
  banjo(XB) <= {
    incr(Y)=>fred+Y.
    private fred:integer.
    fred = XB.
  }

  inc:(integer)=>integer.
  inc = banjo(3).incr.

  show mapp([1,2,3],inc).

  assert mapp([1,2,3],banjo(1).incr) == [2,3,4].

  private positive:(integer){}.
  positive(N) :- N>0.

  show filter([1,-2,3],positive).

  ab:(integer) --> list[integer].
  ab(T) --> "a", ab(T), "b".
  ab(X) --> [X].

  assert ab(0cx) %% explode("aaxbb").
}
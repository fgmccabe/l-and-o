test.b{
  all k,v ~~ nkeyVal[k,v] ::= empty | pair{left:keyVal[k,v]. ky:k. vl:v. right:keyVal[k,v]}.

  contract
  all t ~~ named[t] <~ {
    named:(t)=>string.
  }

  entity ::= chair(string) | p{nm:string}.

  all t ~~ named[t] |: cons[t] ::= nil | cons(t,cons[t]).

  implementation named[entity] => {
    name(Ch) => entityName(Ch).
  }

  entityName:(entity)=>string.
  entityName(chair(Nm)) => Nm.
  entityName(p{nm=Nm}) => Nm.

  implementation all t ~~ named[t] |: named[cons[t]] => {
    name(nil) => "".
  }

  nameOf:all t,k ~~ t <~ {name:k} |: (t)=>k.
  nameOf(R) => R.name.
}

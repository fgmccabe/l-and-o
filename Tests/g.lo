g{
  -- stream contract
  public
  contract all S,E ~~ stream[S ->> E] <~ {
    _eof:(S){}.
    _hdtl:(S,E,S){}.
    _cons:(E,S)=>S.
  }

  public 
  contract all t ~~ additive[t] <~ {
    (+): (t,t)=>t.
    (-): (t,t)=>t.
  }

  public
  implementation additive[integer] .. {
    X+Y => _int_plus(X,Y).
    X-Y => _int_minus(X,Y).
  }

  type all t ~~ cons[t] ::= nil | pair(t,cons[t]).

  implementation all e ~~ stream[cons[e] ->> e] .. {
    _eof(nil).

    _hdtl(pair(E,L),E,L).

    _cons(E,L) => pair(E,L).
  }.

  brackets:all s ~~ stream[s->>integer] |: (integer)-->s.
  brackets(N+1) --> "[", brackets(N), "]".
  brackets(0) --> [].

  assert brackets(C)%%pair(0c[,pair(0c[,pair(0c],pair(0c],nil)))).
}
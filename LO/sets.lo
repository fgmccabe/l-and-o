lo.sets {
  import lo.core.
  import lo.index.
  import lo.list.
  import lo.collection.
  import lo.coerce.

  public all e ~~ /* equality[k] |: */ set[e] ::= set(map[e,()]).

  public nullSet:all e ~~ equality[e] |: set[e].
  nullSet = set([]).

  public implementation all e ~~ equality[e] |: membership[set[e]->>e] => {
    empty = nullSet.
    addMem(E,set(S)) => set(S[E->()]).
    delMem(E,set(S)) => set(S[\+E]).
    k in set(M1) :- (ground(k) ? listEl(k,keys(M1)) | present(M1,k,_)).
  }

  public implementation all e ~~ equality[e] |: setops[set[e]->>e] => {
    union(S1,S2) => setUnion(S1,S2).
    intersect(S1,S2) => setIntersection(S1,S2).
    difference(S1,S2) => setDifference(S1,S2).
  }

  public implementation all e ~~ equality[e] |: coercion[set[e],list[e]] => {
    _coerce(set(Els)) => keys(Els).
  }

  public implementation all e ~~ equality[e] |: coercion[list[e],set[e]] => {
    _coerce(Els) => set(foldLeft((E,M)=>M[E->()],[],Els)).
  }

  public implementation all e ~~ equality[e] |: additive[set[e]] => {
    S1+S2 => setUnion(S1,S2).
    S1-S2 => setDifference(S1,S2).
  }

  private setUnion:all e ~~ equality[e] |: (set[e],set[e]) => set[e].
  setUnion(set(M1),set(M2)) => set(M1+M2).

  private setDifference:all e ~~ equality[e] |: (set[e],set[e]) => set[e].
  setDifference(set(M1),set(M2)) => set(M1-M2).

  private setIntersection:all e ~~ equality[e] |: (set[e],set[e]) => set[e].
  setIntersection(set(M1),set(M2)) =>  set(foldMap(binApp,M2,M1)).

  binApp:all e ~~ equality[e] |: (e,(),map[e,()])=>map[e,()].
  binApp(k,_,M) => M :- present(M,k,_).
  binApp(k,_,M) => M[k->()].

  public implementation all e,f ~~ equality[e], equality[f] |: mapping[set->>e,f] => {
    S//F => setMap(S,F).
  }

  public setMap:all e,f ~~ equality[e],equality[f] |: (set[e],(e)=>f)=>set[f].
  setMap(set(Els),F) => set(foldLeft((k,M)=>M[F(k)->()],[],keys(Els))).

  public implementation all e ~~ equality[e] |: folding[set[e]->>e] => {
    foldRight(F,X,S) => foldRightEls(F,X,S::list[e]).
    foldLeft(F,X,S) => foldLeftEls(F,X,S::list[e]).
  }

  private foldLeftEls:all f,e,x ~~ ((e,x)=>x,x,list[e]) => x.
  foldLeftEls(F,X,S) => foldLeft(F,X,S).

  private foldRightEls:all f,e,x ~~ ((e,x)=>x,x,list[e]) => x.
  foldRightEls(F,X,S) => foldRight(F,X,S).

  public implementation all e ~~ display[e], equality[e] |: display[set[e]] => {
    disp(set(Els)) => ssSeq([ss("{"),ssSeq(dispEls((keys(Els):list[e]),"")),ss("}")]).
  }

  dispEls:all e ~~ display[e] |: (list[e],string) => list[ss].
  dispEls([],_) => [].
  dispEls([E,..L],Sep) => [ss(Sep),disp(E),..dispEls(L,", ")].
}

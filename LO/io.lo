lo.io {
  import lo.core.
  import lo.collection.
  import lo.lists.
  import lo.coerce.

  /*
  Interface to file I/O services, expressed using object notation
  Copyright (c) 2016, 2017. Francis G. McCabe

  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  except in compliance with the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied. See the License for the specific language governing
  permissions and limitations under the License.
 */

  public openInFile:(string,ioEncoding) => inChannel.
  openInFile(Fn,Enc) => inChannel(Fn,_openInFile(Fn,Enc::integer)).

  public openOutFile:(string,ioEncoding) => outChannel.
  openOutFile(Fn,Enc) => outChannel(Fn,_openOutFile(Fn,Enc::integer)).

  private type fileHandle <~ {}.

  public type inChannel <~ {
    name:string.
    inBytes:(integer)=>list[integer].
    inB:()=>integer.
    inCh:()=>integer.
    inChars:(integer)=>string.
    inLine:()=>string.
    inText:(string)=>string.
    pos:()=>integer.
    seek:(integer){}.
    eof:(){}.
    close:(){}.
    ready:(){}.
  }.

  private inChannel:(string,fileHandle) <=> inChannel.
  inChannel(N,H) <= {
    name = N.
    inBytes(Cx) => _inbytes(H,Cx).
    inB() => _inbyte(H).
    inCh() => _inchar(H).
    inChars(Cx) => _inchars(H,Cx).
    inLine() => _inline(H).
    inText(term) => _intext(H,term).
    pos() => _fposition(H).
    seek(Px) :- _fseek(H,Px).
    eof() :- _end_of_file(H).
    close() :- _close(H).
    ready() :- _ready(H).
  }

  public type outChannel <~ {
    name:string.
    outCh:(integer){}.
    outB:(integer){}.
    outBytes:(list[integer]){}.
    outStr:(string){}.
    outLine:(string){}.
    flush:(){}.
    close:(){}.
    ready:(){}.
  }.

  private outChannel:(string,fileHandle) <=> outChannel.
  outChannel(N,H) <= {
    name = N.
    outCh(Ch) :- _outch(H,Ch).
    outB(B) :- _outbyte(H,B).
    outBytes(L) :- _outbytes(H,L).
    outStr(S) :- _outtext(H,S).
    outLine(S) :- _outtext(H,S), _outtext(H,"\n").
    flush() :- _flush(H).
    close() :- _close(H).
    ready() :- _ready(H).
  }

  -- Interface declaration of file types

  public type ioEncoding ::= rawEncoding |
     utf8Encoding | unknownEncoding.

  implementation coercion[ioEncoding,integer] <= {
    _coerce(rawEncoding) => 0.
    _coerce(utf8Encoding) => 3.
    _coerce(unknownEncoding) => 2.
  }

  -- open a file on local file system in append mode
  openAppendFile:(string,ioEncoding)=>outChannel.
  openAppendFile(fle,encoding) => outChannel(fle,__openAppendFile(fle,encoding::integer)).

  -- standard output channel
  stdout:outChannel = outChannel("stdout",__stdfile(1)).

  -- standard input channel
  stdin:inChannel = inChannel("stdin",__stdfile(0)).

  -- standard error channel
  stderr:outChannel = outChannel("stderr",__stdfile(2)).

  -- set up a pipe to a subsidiary process
  pipeConnect:(string,list[string],list[(string,string)],ioEncoding) =>
      (outChannel,inChannel,inChannel).
  pipeConnect(Cmd,Args,Env,encoding) => (outChannel(Cmd+":stdin",inF),inChannel(Cmd+":stdout",outF),
         inChannel(Cmd+":stderr",errF)) :-
    __popen(Cmd,Args,Env,inF,outF,errF,encoding::integer).

  -- report on current working directory
  public cwd:()=>string.
  cwd() => _cwd().

  -- change current directory
  public cd:(string){}.
  cd(D) :- _cd(D).

  -- list the contents of a directory
  public ls:(string)=>list[string].
  ls(D) => _ls(D)//(((F,_))=>F).

  public ffileList:(string)=>list[(string,fileType,list[filePerm])].
  ffileList(D) => _ls(D)//(((F,T))=>(F,T,fmodes(F))).

  -- report on the type of a file
  public type fileType ::= fifoSpecial | directory | charSpecial | blockSpecial
       | plainFile | symlink | socket | unknownFileType.

  public ftype:(string)=>fileType.
  ftype(F) => __file_type(F).

  -- report on the permission modes on a file
  public type filePerm ::= setUid | setGid | stIcky | rUsr | wUsr | xUsr |
         rGrp | wGrp | xGrp | rOth | wOth | xOth.
  public fmodes:(string)=>list[filePerm].
  fmodes(F) => fileMode(__file_mode(F)).

  private fileMode:(integer)=>list[filePerm].
  fileMode(0) => [].
  fileMode(X) => [setUid,..fileMode(X.&.0x7ff)] :- X.&.0x800==0x800.
  fileMode(X) => [setGid,..fileMode(X.&.0xbff)] :- X.&.0x400==0x400.
  fileMode(X) => [stIcky,..fileMode(X.&.0xdff)] :- X.&.0x200==0x200.
  fileMode(X) => [rUsr,..fileMode(X.&.0xeff)] :- X.&.0x100==0x100.
  fileMode(X) => [wUsr,..fileMode(X.&.0xf7f)] :- X.&.0x80==0x80.
  fileMode(X) => [xUsr,..fileMode(X.&.0xfbf)] :- X.&.0x40==0x40.
  fileMode(X) => [rGrp,..fileMode(X.&.0xfdf)] :- X.&.0x20==0x20.
  fileMode(X) => [wGrp,..fileMode(X.&.0xfef)] :- X.&.0x10==0x10.
  fileMode(X) => [xGrp,..fileMode(X.&.0xff7)] :- X.&.0x8==0x8.
  fileMode(X) => [rOth,..fileMode(X.&.0xffb)] :- X.&.0x4==0x4.
  fileMode(X) => [wOth,..fileMode(X.&.0xffd)] :- X.&.0x2==0x2.
  fileMode(X) => [xOth,..fileMode(band(X,0xffe))] :- X.&.0x1==0x1.

  -- change the permissions on a file
  public chmode:(string,list[filePerm]){}.
  chmode(F,P) :- __chmod(F,encodeModes(P,0)).

  private encodeModes:(list[filePerm],integer)=>integer.
  encodeModes([],P)=>P.
  encodeModes([setUid,..L],P) => encodeModes(L,P.|.0x800).
  encodeModes([setGid,..L],P) => encodeModes(L,P.|.0x400).
  encodeModes([stIcky,..L],P) => encodeModes(L,P.|.0x200).
  encodeModes([rUsr,..L],P) => encodeModes(L,P.|.0x100).
  encodeModes([wUsr,..L],P) => encodeModes(L,P.|.0x80).
  encodeModes([xUsr,..L],P) => encodeModes(L,P.|.0x40).
  encodeModes([rGrp,..L],P) => encodeModes(L,P.|.0x20).
  encodeModes([wGrp,..L],P) => encodeModes(L,P.|.0x10).
  encodeModes([xGrp,..L],P) => encodeModes(L,P.|.0x8).
  encodeModes([rOth,..L],P) => encodeModes(L,P.|.0x4).
  encodeModes([wOth,..L],P) => encodeModes(L,P.|.0x2).
  encodeModes([xOth,..L],P) => encodeModes(L,P.|.0x1).

  -- delete a file
  public rm:(string){}.
  rm(F) :- __rm(F).

  -- rename a file
  public mv:(string,string){}.
  mv(O,N) :- __mv(O,N).

  -- Test for the presence of a file
  public filePresent:(string){}.
  filePresent(F) :-
      __file_present(F).

  -- report on the size of a file
  public fileSize:[string]=>integer.
  fileSize(F) => __file_size(F).

  public newerFile:(string,string){}.
  newerFile(U1,U2) :-
    _file_modified(U1) > _file_modified(U2).

  public getFile:(string) => string.
  getFile(Fn) => _get_file(Fn).

  public putFile:(string,string){}.
  putFile(Fn,Text) :- _put_file(Fn,Text).
}

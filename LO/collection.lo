lo.collection{
  import lo.core.

  public contract all c,e ~~ folding[c->>e] <~ {
    foldRight:all x ~~ (((e,x)=>x),x,c) => x.
    foldLeft:all x ~~ (((x,e)=>x),x,c) => x.
  }

  public contract all c,e ~~ filter[c->>e] <~ {
    (^/):(c,(e){}) => c.
  }

  public contract all m/1 ~~ mapping[m] <~ {
    (//):all e,f ~~ (m[e],(e)=>f) => m[f].
  }

  public contract all m/2 ~~ ixmap[m] <~ {
    (///):all k,e,f ~~ (m[k,e],(k,e)=>f)=>m[k,f].
  }

  public contract all m,k,v ~~ map[m ->> k,v] <~ {
    present:(m,k,v){}.
    _remove:(m,k) => m.
    _put:(m,k,v) => m.
    keys:(m) => list[k].
    pairs:(m) => list[(k,v)].
    values:(m) => list[v].
    _empty:m.
  }.

  public contract all k,e ~~ membership[k->>e] <~ {
    empty: k.
    addMem:(k,e)=>k.
    delMem:(k,e)=>k.
    pick:(k,e){}.
  }

  public contract all k,e ~~ setops[k->>e] <~ {
    union : (k,k)=>k.
    intersect : (k,k)=>k.
    difference : (k,k)=>k.
  }.

}
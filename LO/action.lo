lo.action {
  import lo.
  import lo.monad.

  public all a ~~ action[a] ::= done(a) | delay(()=>action[a]) | err(string).

  public implementation monad[action->>string] <= {
    err(E) >>= _ => err(E).
    done(A) >>= F => delay(()=>F(A)).
    delay(G) >>= F => delay(()=>G()>>=F).

    return X => delay(()=>done(X)).

    raise E => err(E).
  }

  public implementation execution[action->>string] <= {
    _perform(done(X)) => X.
    _perform(delay(F)) => _perform(F()).

    _handle(done(X),_) => done(X).
    _handle(delay(A),E) => _handle(A(),E).
    _handle(err(X),E) => E(X).
  }

  public implementation all e ~~ coercion[e,string] |: coercion[action[e],string] <= {
    _coerce(A) => _action_to_string(A).
  }

  _action_to_string:all a ~~ coercion[a,string] |: (action[a])=>string.
  _action_to_string(A) => _perform(A)::string.

  public implementation all e ~~ display[e] |: display[action[e]] <= {
    disp(A) => dispAction(A).
  }

  dispAction:all a ~~ display[a] |: (action[a])=>ss.
  dispAction(A) => disp(_perform(A)).

}

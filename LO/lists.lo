lo.list{
  -- implement the list interface for lists
  import lo.stream.
  import lo.core.

  public all t ~~ list[t] <~ stream[t].

  public '[]':list[_].
  '[]'..{
    eof().
    cons(X) => [X].
    hdtl(_,_) :- false.
  }.

  public (,..): all t ~~ (t,list[t]) <=> list[t].
  (H,..T)..{
    eof() :- false.
    hdtl(H,T).
    cons(X) => [X,..this].
  }.

  public (<>):all t ~~ (list[t]+,list[t])=>list[t].

  [] <> X => X.
  [E,..X] <> Y => [E,..X<>Y].

  public reverse:all t ~~ (list[t]+) => list[t].
  reverse(X) => rev(X,[]).

  private
  rev:all t ~~ (list[t]+,list[t]) => list[t].
  rev([],R) => R.
  rev([E,..L],R) => rev(L,[E,..R]).

  public drop:all t ~~ (list[t]) => list[t].
  drop([_,..L]) => L.

  public isMember:all t ~~ (t,list[t]){}.
  isMember(E,[E,.._]).
  isMember(E,[_,..L]) :- isMember(E,L).

  public subtract:all t ~~ (t,list[t])=>list[t].
  subtract(_,[]) => [].
  subtract(E,[E,..R]) => R.
  subtract(E,[X,..R]) => [E,..subtract(E,R)].
}
/*
  Bootstrap program, this program is loaded automatically
  when the L&O engine is started. Its main function is to set up the
  environment and then load and execute the program mentioned in the command line

  Copyright (c) 2016. Francis G. McCabe

  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  except in compliance with the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under the
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied. See the License for the specific language governing
  permissions and limitations under the License.
*/
lo.boot{
  import lo.
  import lo.options.
  import lo.repo.
  import lo.repo.file.
  import lo.uri.

  type bootOptions <~ { repo:string. wd:string. }
  bootOptions : (string,string) <=> bootOptions.
  bootOptions(R,W) <= {
    repo = R.
    wd = W.
  }

  public type all o ~~ optionsProcessor <~ {
    shortForm : string.
    alternatives : list[string].
    usage : string.
    validator : option[(string){}].
    setOption: (string,o) => o.
  }

  repoOption:optionsProcessor[bootOptions].
  repoOption <= {
    shortForm = "-r".
    alternatives = [].
    usage = "-r dir -- directory of code repository".
    validator = some(isDir).
    setOption(R,bootOptions(_,W)) => bootOptions(R,W).
  }

  isDir:(string){}.
  isDir(D) :- filePresent(D), fileType(D) = directory.

  wdOption:optionsProcessor[bootOptions].
  wdOption <= {
    shortForm = "-w".
    alternatives = [].
    usage = "-w dir -- override working directory".
    validator = some(isDir).
    setOption(W,bootOptions(R,_)) => bootOptions(R,W).
  }

  public __boot:(){}.
  __boot() :-
    handleCmdLineOpts(processOptions(_command_line(),[repoOption,wdOption],bootOptions(cwd(),cwd()))).

  handleCmdLineOpts:(either[(bootOptions,list[string]),string]){}.
  handleCmdLineOpts(either((Opts,[Top,..Args]))) :-
    Repo = openRepository(parseUri(Opts.repo)),
    importPkgs([parsePkgName(Top)],Repo),
    invokeMain(Top,Args).

  importPkgs:(list[pkg],list[pkg],list[pkg],fileRepo){}.
  importPkgs([],Ld,Ld,_).
  importPkgs([P,..L],Ld,Ldx,R) :-
    importPkg(P,R,Ld,Imps),
    importPkgs(Imps,[P,..Ld],Ldx,R),
    initialize(P).

  importPkg:(pkg,fileRepo,list[pkg],list[pkg]){}.
  importPkg(P,_,Ld,[]) :- P in Ld.
  importPkg(P,R,Ld,Imps) :-
    locateCode(R,P,_,Code),
    _define_code(Code,Imps).

  


processPackage(Pkg,Repo,Loaded,Ldx,PrIn,PrOut) :-
loadPrologPkg(Pkg,Repo,Code,Imports),
assertAll(Code,PrIn,Pr0),
processImports(Imports,[Pkg|Loaded],Ldx,Repo,Pr0,PrOut),!,
initPkg(Pkg).

initPkg(pkg(Pkg,_)) :-
localName(Pkg,"@","init",Init),
atom_string(ICall,Init),
current_predicate(ICall/0),!,
call(ICall).
initPkg(_).

lookForMain(pkg(Top,_),Args) :-
localName(Top,"@","main",M),
atom_string(Main,M),
current_predicate(Main/1),!,
listify(Args,LArgs),
writef("starting...\n",[]),
call(Main,LArgs).
lookForMain(_,_).

assertAll([],Pr0,Pr0).
assertAll([T|M],Pr0,Prx) :-
checkPred(T,Pr0,Pr1),
assert(T),
assertAll(M,Pr1,Prx).

checkPred(T,Pr,Px) :-
predOf(T,P),!,
(is_member(P,Pr),!,Px=Pr ; abolish(P),Px=[P|Pr]).

predOf((H :- _),P) :- !,
predOf(H,P).
predOf(T,T/0) :- atom(T),!.
predOf(T,P/A) :-
compound_name_arity(T,P,A).

processImports([],Ld,Ld,_,Pr,Pr).
processImports([import(_,pkg(Pkg,Vers))|Imports],Loaded,Ldx,Repo,Pr,Prx) :-
is_member(pkg(Pkg,LdVers),Loaded),
(LdVers \= Vers ->
    runTimeMsg("not permitted to load multiple versions of same package: %s@%s, %s already loaded",[Pkg,Vers,LdVers]);true),
processImports(Imports,Loaded,Ldx,Repo,Pr,Prx).
processImports([import(_,Pkg)|Imports],Loaded,Ldx,Repo,Pr,Prx) :-
processPackage(Pkg,Repo,Loaded,LdI,Pr,Pr0),
processImports(Imports,LdI,Ldx,Repo,Pr0,Prx).



  private delayHandler:(list[(){}]){}. -- private, but known to the run-time
  delayHandler([]).
  delayHandler([H,..L]) :- H()!, delayHandler(L).

}

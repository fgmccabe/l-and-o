lo.trie{
  import lo.index.
  import lo.collection.
  import lo.core.
  import lo.list.

  public type all k,v ~~ trie[k,v] <~ { put:(list[k],v) => trie[k,v]. get:(list[k])=>option[v]. }.

  private trie: all k,v ~~ equality[k] |: (option[v],map[k,trie[k,v]]) <=> trie[k,v].
  trie(Vl,Entries) <= {
    put([],V) => trie(some(V),Entries).
    put([k,..l],V) => trie(Vl,Entries[k->find(Entries,k).put(l,v)]).

    private find:(map[k,trie[k,v]],k)=>trie[k,v].
    find(M,K) => T :- present(M,K,T).
    find(M,K) => trie(none,[]).

    get([]) => Vl.
    get([k,..l]) => sub.get(l) :- present(Entries,k,(sub:trie[k,v])).
  }

  /*private showTrie: all k,v ~~ display[k], display[v] |: (trie[k,v],integer) => ss.
  showTrie(trie(some(Vl),Entries),Sp) => ssSeq([spaces(Sp),disp(Vl),ss("\n"),..showEntries(pairs(Entries),Sp+2)]).
  showTrie(trie(none,Entries),Sp) => ssSeq(showEntries(pairs(Entries))).

  private showEntries: all k,v ~~ display[k], display[v] |: (list[(k,trie[k,v])],integer) => list[ss].
  showEntries([],_) => [].
  showEntries([(k,M)],Sp) => [spaces(Sp),]
*/

  
}